{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Unix-like Artifacts Collector documentation UAC (Unix-like Artifacts Collector) is a powerful and extensible incident response tool designed for forensic investigators, security analysts, and IT professionals. It automates the collection of artifacts from a wide range of Unix-like systems, including AIX, ESXi, FreeBSD, Linux, macOS, NetBSD, NetScaler, OpenBSD and Solaris. Whether you're handling an intrusion, conducting forensic investigations, or performing compliance checks, UAC simplifies and accelerates data collection while minimizing reliance on external support during critical incidents. UAC reads YAML files on the fly and, based on their contents, collects relevant artifacts. This makes UAC very customizable and extensible. Key Highlights \ud83d\udcc2 Fully customizable via YAML profiles for tailored data collection. \u26a1 Lightweight, portable, and requires no installation or dependencies. \ud83d\udd12 Adheres to the order of volatility to ensure reliable data acquisition. \ud83d\udee0 Designed for diverse environments, including IoT devices and NAS systems. The source code is available on the project page]( https://github.com/tclahr/uac ). Main features Run everywhere with no dependencies (no installation required). Customizable and extensible collections and artifacts. Respect the order of volatility during artifact collection. Collect information about current running processes (including processes without a binary on disk). Hash running processes and executable files. Extract files and directories status to create a bodyfile. Collect system and user-specific data, configuration files and logs. Acquire volatile memory from Linux systems using different methods and tools. Support to write output to various cloud platforms. Supported operating systems UAC runs on any Unix-like system, regardless of the processor architecture. All UAC needs is shell :) AIX ESXi FreeBSD Linux macOS NetBSD NetScaler OpenBSD Solaris Note that UAC even runs on systems like Network Attached Storage (NAS) devices, Network devices such as OpenWrt, and IoT devices. Using UAC UAC does not need to be installed on the target system. Simply download the latest version from the releases page , uncompress it, and launch. It's that simple! Full Disk Access permission is a privacy feature introduced in macOS Mojave (10.14) that prevents some applications from accessing important data, such as Mail, Messages, and Safari files. So it is strongly recommended that you manually grant permission for Terminal application before running UAC from the terminal, or grant permission for remote users before running UAC via ssh. To execute a collection, you must supply at least a profile and/or a list of artifacts , and specify the destination directory. Any additional parameters are optional. Examples: Collect all artifacts based on the ir_triage profile, and save the output file to /tmp. ./uac -p ir_triage /tmp Collect all artifacts located in the artifacts/live_response directory, and save the output file to /tmp. ./uac -a ./artifacts/live_response/\\* /tmp Collect all artifacts based on the ir_triage profile, along with all artifacts located in the /my_custom_artifacts directory, and save the output file to /mnt/sda1. ./uac -p ir_triage -a /my_custom_artifacts/\\* /mnt/sda1 Collect a memory dump and all artifacts based on the full profile. ./uac -a ./artifacts/memory_dump/avml.yaml -p full /tmp Collect all artifacts based on the ir_triage profile excluding the bodyfile.yaml artifact. ./uac -p ir_triage -a \\!artifacts/bodyfile/bodyfile.yaml /tmp Command line options UAC is a command line tool, and as such, has several options that can be used to interact with it. It is recommended to run UAC from an external device/usb/network share to avoid overwriting evidence. Usage: ./uac [-h] [-V] [--debug] {-p PROFILE | -a ARTIFACT} DESTINATION or: ./uac --validate-artifact FILE or: ./uac --validate-profile FILE Optional Arguments: -h, --help Display this help and exit. -v, --verbose Increases the verbosity level. --debug Enable debug mode. --trace Enable trace messages. -V, --version Output version information and exit. Profiling Arguments: -p, --profile PROFILE Specify the collection profile name or path. Use '--profile list' to list all available profiles. -a, --artifacts ARTIFACT Specify the artifact(s) to be collected during the collection. The expression is a comma separated string where each element is an artifact. You can exclude individual artifacts by prefixing them with an exclamation mark (!). Special characters such as ! and * must be escaped with a backslash. Examples: --artifacts files/logs/\\*,\\!files/logs/var_log.yaml Use '--artifacts list [OPERATING_SYSTEM]' to list available artifacts (default: all). Positional Arguments: DESTINATION Specify the directory the output file should be copied to. Output Arguments: -o, --output-base-name BASENAME Specify the base name of the output file (without extension). Default: uac-%hostname%-%os%-%timestamp% -f, --output-format FORMAT Specify the output format. Compression will be enabled if gzip is available. Options: none, tar, zip (default: tar) -P, --output-password PASSWORD Specify the password to be used to encrypt the contents of the archive file. Applies to zip output format only. Collection Arguments: -c, --config FILE Load the config from a specific file. -m, --mount-point MOUNT_POINT Specify the mount point (default: /). -s, --operating-system OPERATING_SYSTEM Specify the operating system. Options: aix, esxi, freebsd, linux, macos, netbsd netscaler, openbsd, solaris -H, --hash-collected Hash all collected files. -u, --run-as-non-root Disable root user check. Note that data collection may be limited. --enable-modifiers Enable artifacts that change the system state. --hostname HOSTNAME Specify the target system hostname. --temp-dir PATH Write all temporary data to this directory. Filter Arguments: --start-date YYYY-MM-DD Only collects files that were last modified/accessed/changed after the given date. --end-date YYYY-MM-DD Only collects files that were last modified/accessed/changed before the given date. Informational Arguments: --case-number CASE_NUMBER Specify the case number. --description DESCRIPTION Specify the description. --evidence-number EVIDENCE_NUMBER Specify the evidence number. --examiner EXAMINER Specify the examiner name. --notes NOTES Specify the notes. Remote Transfer Arguments: --sftp SERVER Transfer the output file to remote SFTP server. SERVER must be specified in the form [user@]host:[path] --sftp-port PORT Remote SFTP server port (default: 22). --sftp-identity-file FILE File from which the identity (private key) for public key authentication is read. --sftp-ssh-options Comma separated ssh options. --s3-provider Transfer the output and log files to S3 service. Options: amazon, google, ibm --s3-region S3 region name (default: us-east-1 [amazon], us-south [ibm]). --s3-bucket S3 bucket/cloud object storage name. --s3-access-key The access key for the bucket/cloud object storage. --s3-secret-key The secret access key for the bucket/cloud object storage. --s3-token The session/bearer token for the bucket/cloud object storage. --aws-s3-presigned-url URL Transfer the output file to AWS S3 using a pre-signed URL. --aws-s3-presigned-url-log-file URL Transfer the log file to AWS S3 using a pre-signed URL. --azure-storage-sas-url URL Transfer the output file to Azure Storage using a SAS URL. --azure-storage-sas-url-log-file URL Transfer the log file to Azure Storage using a SAS URL. --delete-local-on-successful-transfer Delete local output and log files on successful transfer. Validation Arguments: --validate-artifact FILE Validate artifact. --validate-profile FILE Validate profile. Optional Arguments --help Display the help and exit. -v, --verbose Increases the verbosity level. Enabling a higher verbosity level will result in the display of all executed commands. --debug Enable debug mode. Enabling debug mode will prevent the removal of the uac-data.tmp directory in the destination directory. This directory stores collected, temporary and debugging data during execution. --trace Enable set -x . Using set -x in a shell script enables command tracing by printing each command before execution, which helps in debugging and understanding the script's flow. -V, --version Output version information and exit. Profiling Arguments -p, --profile Specify the collection profile name. Profiles are used to define the list of artifacts that will be used during the execution. They are YAML files located in the profiles directory. Feel free to utilize multiple profiles to craft a highly tailored collection. Profiles will be processed in the sequence they are listed in the command line. It's important to note that duplicate artifacts will be gathered just once. Use --profile list to list available profiles. Examples: ./uac -p ir_triage DESTINATION ./uac -p ir_triage -p offline DESTINATION You also have the option to supply a file path to a custom profile located outside the profiles directory. Example: ./uac -p /home/user/my_custom_profile.yaml DESTINATION_DIR -a, --artifacts Specify the artifacts to be used during the collection. Artifacts are used to define parameters that will be used by a collector to collect data. They are YAML files located in the artifacts directory. Feel free to utilize multiple artifacts to craft a highly tailored collection. Artifacts will be processed in the sequence they are listed in the command line. It's important to note that duplicate artifacts will be gathered just once. You have the option to specify multiple artifacts simultaneously by either separating them with a comma (without spaces) or by using -a/--artifacts multiple times. You can exclude individual artifacts by prefixing them with an exclamation mark (!). Note that in many shells, special characters like ! and * require escaping with a backslash. Use --artifacts list to list all available artifacts. Use --artifacts list [OPERATING_SYSTEM] to list all available artifacts for a specific operating system. Examples: ./uac -a files/logs/\\*,\\!files/logs/var_log.yaml DESTINATION ./uac -a artifacts/live_response/\\* -a ./artifacts/files/logs/\\* -a \\!files/logs/var_log.yaml DESTINATION You also have the option to supply a file path to a custom artifact file located outside the artifacts directory. Examples: ./uac -a files/logs/\\* -a /home/user/my_artifact_file.yaml DESTINATION ./uac -a /home/user/my_artifacts/\\* DESTINATION Positional Arguments DESTINATION The directory where the output and acquisition log files should be copied to. Output Arguments -o, --output-base-name Specify the base name of the output file (without extension). Default is uac-%hostname%-%os%-%timestamp% Examples: ./uac -p ir_triage -o my_custom_output_file_name DESTINATION ./uac -a ./artifacts/files/browsers/chrome.yaml -o uac-chrome-only-%hostname%-%timestamp% DESTINATION -f, --output-format Specify the output format. Compression will be automatically enabled if gzip is available. Options: none, tar, zip (Default is tar ) none : Collected data will not be archived or compressed. Instead, it will be copied directly to an output directory. tar : Collected data will be archived (and compressed) into a tar file. zip : Collected data will be archived and compressed into a zip file. Examples: ./uac -p full --output-format none DESTINATION -P, --output-password Specify the password to be used to encrypt the contents of the archive file. Applies to zip output format only. Examples: ./uac -p ir_triage --output-format zip --output-password \"infected\" DESTINATION Collection Arguments -c, --config Load the config from a specific file. Examples: ./uac -p full -c /home/user/my_custom_uac_config.conf DESTINATION -m, --mount-point The mount point where the files will be collected from. Default is / Examples: ./uac -p offline -m /mnt/sda1 DESTINATION -s, --operating-system This option allows you to force UAC to collect artifacts for a specific operating system. By default, UAC automatically attempts to identify the target operating system. Options: aix, esxi, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris -H, --hash-collected Enabling this option will cause UAC to hash all collected files and save the results in a hash file. To accomplish this, all collected data must first be copied to the destination directory. Therefore, ensure you have twice the free space available on the system: once for the collected data and once for the output file. Additionally, note that this process will increase the running time. -u, --run-as-non-root Disable root user check. Note that artifact collection may be limited. --enable-modifiers Enabling this option will cause UAC to run artifacts that change the current system state. Please refer to the modifiers section for more information. --hostname Specify the hostname to be used as part of the output name when %hostname% is used in --output-base-name. By default, UAC automatically attempts to identify the target system's hostname. --temp-dir The location where the uac-data.tmp directory will be created. This directory stores collected, temporary and debugging data during execution. By default, uac-data.tmp will be created within the DESTINATION directory. Filter Arguments --start-date Collect only the files that were last modified, accessed, or changed after a specific date. The date must be in the format: YYYY-MM-DD. --end-date Collect only the files that were last modified, accessed, or changed before a specific date. The date must be in the format: YYYY-MM-DD. Informational Arguments --case-number Specify the case number. --description Specify the case description. --evidence-number Specify the evidence number. --examiner Specify the examiner's name. --notes Specify the case notes. Remote Transfer Arguments --sftp SFTP server host/IP for transferring the output and acquisition log files. It also transfers collected data when none is used as the output format. It must be specified in the form [user@]host:[path] Examples: ./uac -p full --sftp \"user@host:/remote_dir\" DESTINATION --sftp-port SFTP server port. Default is 22 . --sftp-identity-file File from which the identity (private key) for public-key authentication is read. --sftp-ssh-options Comma-separated options that modify the behavior of the SSH client. These options are usually specified in the SSH client configuration file, but this argument allows you to specify them directly on the command line. Examples: ./uac -p ir_triage --sftp \"user@host:/remote_dir\" --sftp-ssh-options \"StrictHostKeyChecking=no,UserKnownHostsFile=/dev/null\" DESTINATION --s3-provider Transfer the output and log file to a S3 bucket/cloud object storage. Options: amazon, google, ibm --s3-region S3 region name. Default: us-east-1 (amazon), us-south (ibm) --s3-bucket S3 bucket/cloud object storage name --s3-access-key The access key for the bucket/cloud object storage. --s3-secret-key The secret access key for the bucket/cloud object storage. ./uac -p ir_triage --s3-provider amazon --s3-region us-east-1 --s3-bucket uac-test --s3-access-key \"AKIAXKDAGGVYYXDZKAGH1\" --s3-secret-key \"plJqM2mFAu2lVBhpi5UrL+X+8hL+LOYOJryhp2s2\" DESTINATION --s3-token The session/bearer token for the bucket/cloud object storage. Examples: ./uac -p ir_triage --s3-provider ibm --s3-region us-south --s3-bucket uac-test --s3-token \"eyJraWQiOiIyMDIyMDkxMzA4MjciLCJhbGciOiJSUzI1NiJ9.eyJpYW1faWQiOiJJQk1pZC0wNjAwMDFLVVJDIiwiaWQiOiJJQk1pZC0wNjAwMDFLVVJDIiwicmVhbG1pZCI6IklCTWlkIiwianRpIjoiYWVhMDE0MGYtZGM2Ni00MzE0LWJhMjMtZTIxOTAzZmQ3Y2ZhIiwiaWRlbnRpZmllciI6IjA2MDAwMUtVUkMiLCJnaXZlbl9uYW1lIjoiVGhpYWdvIiwiZmFtaWx5X25hbWUiOiJDYW5ve\" DESTINATION --aws-s3-presigned-url This allows for using a pre-signed URL to upload the output file to AWS S3. Make sure you generate a PUT URL for this to work. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p full --aws-s3-presigned-url 'https://uac-test.s3.amazonaws.com/uac-output.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795' DESTINATION --aws-s3-presigned-url-log-file This allows for using a pre-signed URL to upload the acquisition log file to AWS S3. Make sure you generate a PUT URL for this to work. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p full --aws-s3-presigned-url 'https://uac-test.s3.amazonaws.com/uac-output.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795' --aws-s3-presigned-url-log-file 'https://uac-test.s3.amazonaws.com/uac-output.log?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795' DESTINATION --azure-storage-sas-url This allows for using a shared access signature (SAS) URL to upload the output file to Azure Storage. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p ir_triage --azure-storage-sas-url 'https://uac-test.blob.core.windows.net/uac-container/uac-output.tar.gz?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' DESTINATION --azure-storage-sas-url-log-file This allows for using a shared access signature (SAS) URL to upload the acquisition log to Azure Storage. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p ir_triage --azure-storage-sas-url 'https://uac-test.blob.core.windows.net/uac-container/uac-output.tar.gz?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' --azure-storage-sas-url-log-file 'https://uac-test.blob.core.windows.net/uac-container/uac-output.log?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' DESTINATION --delete-local-on-successful-transfer Delete the local output and acquisition log files if they were successfully transferred to a remote destination such as an SFTP server or S3. Validation Arguments --validate-artifact Validate whether the artifact YAML file contains any errors. Examples: ./uac --validate-artifact my_custom_artifact.yaml --validate-profile Validate whether the profile YAML file contains any errors. Examples: ./uac --validate-profile my_custom_profile.yaml Validating custom artifacts It is recommended that you validate your custom artifacts before running a collection. You can do it using the --validate-artifact option as shown below. ./uac --validate-artifact /path_to/my_custom_artifact.yaml Validating custom profiles It is recommended that you validate your custom profiles before running a collection. You can do it using the --validate-profile option as shown below. ./uac --validate-profile /path_to/my_custom_profile.yaml Using your binary files In most cases, the executables should be placed in the [UAC_DIRECTORY]/bin directory, along with any additional support files it needs to run. For example, if you have an artifact that uses an executable named 'my_script.sh', you should place this binary in the [UAC_DIRECTORY]/bin directory. In the case where you have executables with the same name, but for multiple operating systems, they should be placed in the [UAC_DIRECTORY]/bin/[OS] directory. For example, if you have an artifact that uses an executable named 'lsof', but you have two binary files, one for Linux and one for FreeBSD, you should place the binaries in the [UAC_DIRECTORY]/bin/linux and [UAC_DIRECTORY]/bin/freebsd directories. Note that the operating system name must be in lowercase. In the case where you have executables that can be run on multiple operating systems, they should be placed in the [UAC_DIRECTORY]/bin/[OS1_OS2_OS3] directory. Note that you can have multiple operating systems separated by an underscore '_'. For example, if you have an artifact that uses an executable named 'netstat' that runs on both Linux and ESXi systems, you should place the binary either in the [UAC_DIRECTORY]/bin/linux_esxi directory or place the binary in the [UAC_DIRECTORY]/bin/linux and [UAC_DIRECTORY]/bin/esxi directories. In the case where you have executables with the same name, but for multiple operating systems and multiple architectures, they should be placed in the [UAC_DIRECTORY]/bin/[OS]/[ARCH] directory. For example, if you have an artifact that uses an executable named 'ss', but you have binary files for Linux arm64 and ppc64, FreeBSD i386, and Solaris x86_64 and sparc64, you should place the binary files in the [UAC_DIRECTORY]/bin/linux/arm64 , [UAC_DIRECTORY]/bin/linux/ppc64 , [UAC_DIRECTORY]/bin/freebsd/i386 , [UAC_DIRECTORY]/bin/solaris/x86_64 and [UAC_DIRECTORY]/bin/solaris/sparc64 directories. Modifiers Modifiers are artifacts that include commands that will alter the current system state when executed on the target system. Please refer to the modifier property page for more information. Troubleshooting and support Debug mode Debug mode --debug may be useful if you are trying to find the source of an error. Enabling debug mode will prevent the removal of the uac-data.tmp directory in the destination directory. This directory stores collected, temporary and debugging data during execution. Trace messages Using --trace enables command tracing by printing each command before execution, which helps in debugging and understanding the script's flow. It is recommended to redirect the stderr (shell tracing messages) to a text file. Consider the following command to enable command tracing and storing them in /tmp/uac-tracing.log file. ./uac -p ir_triage --trace DESTINATION 2>/tmp/uac-tracing.log File an issue on Github If you are a user and find a bug, please submit an issue and provide enough information for others to reproduce it. One of the project's maintainers should respond to your issue soon. Before submitting, please check our list of already reported bugs to ensure you are not raising a duplicate. See our Contributing Guide for more information. Contributing Contributions make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated. Have you created any artifacts? Please share them with us! You can contribute with new artifacts, profiles, bug fixes, or propose new features. Please read our Contributing Guide before submitting a Pull Request to the project. Support For general help using UAC, please refer to the project documentation page . For additional help, you can use one of the following channels: Discord (For live discussion with the community and UAC team) GitHub (Bug reports and contributions) Twitter (Get the news fast) Support the Project If you find UAC helpful, please give us a \u2b50 on GitHub ! This helps others discover the project and motivates us to improve it further. License The UAC project uses the Apache License Version 2.0 software license.","title":"Getting Started"},{"location":"#welcome-to-the-unix-like-artifacts-collector-documentation","text":"UAC (Unix-like Artifacts Collector) is a powerful and extensible incident response tool designed for forensic investigators, security analysts, and IT professionals. It automates the collection of artifacts from a wide range of Unix-like systems, including AIX, ESXi, FreeBSD, Linux, macOS, NetBSD, NetScaler, OpenBSD and Solaris. Whether you're handling an intrusion, conducting forensic investigations, or performing compliance checks, UAC simplifies and accelerates data collection while minimizing reliance on external support during critical incidents. UAC reads YAML files on the fly and, based on their contents, collects relevant artifacts. This makes UAC very customizable and extensible.","title":"Welcome to the Unix-like Artifacts Collector documentation"},{"location":"#key-highlights","text":"\ud83d\udcc2 Fully customizable via YAML profiles for tailored data collection. \u26a1 Lightweight, portable, and requires no installation or dependencies. \ud83d\udd12 Adheres to the order of volatility to ensure reliable data acquisition. \ud83d\udee0 Designed for diverse environments, including IoT devices and NAS systems. The source code is available on the project page]( https://github.com/tclahr/uac ).","title":"Key Highlights"},{"location":"#main-features","text":"Run everywhere with no dependencies (no installation required). Customizable and extensible collections and artifacts. Respect the order of volatility during artifact collection. Collect information about current running processes (including processes without a binary on disk). Hash running processes and executable files. Extract files and directories status to create a bodyfile. Collect system and user-specific data, configuration files and logs. Acquire volatile memory from Linux systems using different methods and tools. Support to write output to various cloud platforms.","title":"Main features"},{"location":"#supported-operating-systems","text":"UAC runs on any Unix-like system, regardless of the processor architecture. All UAC needs is shell :) AIX ESXi FreeBSD Linux macOS NetBSD NetScaler OpenBSD Solaris Note that UAC even runs on systems like Network Attached Storage (NAS) devices, Network devices such as OpenWrt, and IoT devices.","title":"Supported operating systems"},{"location":"#using-uac","text":"UAC does not need to be installed on the target system. Simply download the latest version from the releases page , uncompress it, and launch. It's that simple! Full Disk Access permission is a privacy feature introduced in macOS Mojave (10.14) that prevents some applications from accessing important data, such as Mail, Messages, and Safari files. So it is strongly recommended that you manually grant permission for Terminal application before running UAC from the terminal, or grant permission for remote users before running UAC via ssh. To execute a collection, you must supply at least a profile and/or a list of artifacts , and specify the destination directory. Any additional parameters are optional. Examples: Collect all artifacts based on the ir_triage profile, and save the output file to /tmp. ./uac -p ir_triage /tmp Collect all artifacts located in the artifacts/live_response directory, and save the output file to /tmp. ./uac -a ./artifacts/live_response/\\* /tmp Collect all artifacts based on the ir_triage profile, along with all artifacts located in the /my_custom_artifacts directory, and save the output file to /mnt/sda1. ./uac -p ir_triage -a /my_custom_artifacts/\\* /mnt/sda1 Collect a memory dump and all artifacts based on the full profile. ./uac -a ./artifacts/memory_dump/avml.yaml -p full /tmp Collect all artifacts based on the ir_triage profile excluding the bodyfile.yaml artifact. ./uac -p ir_triage -a \\!artifacts/bodyfile/bodyfile.yaml /tmp","title":"Using UAC"},{"location":"#command-line-options","text":"UAC is a command line tool, and as such, has several options that can be used to interact with it. It is recommended to run UAC from an external device/usb/network share to avoid overwriting evidence. Usage: ./uac [-h] [-V] [--debug] {-p PROFILE | -a ARTIFACT} DESTINATION or: ./uac --validate-artifact FILE or: ./uac --validate-profile FILE Optional Arguments: -h, --help Display this help and exit. -v, --verbose Increases the verbosity level. --debug Enable debug mode. --trace Enable trace messages. -V, --version Output version information and exit. Profiling Arguments: -p, --profile PROFILE Specify the collection profile name or path. Use '--profile list' to list all available profiles. -a, --artifacts ARTIFACT Specify the artifact(s) to be collected during the collection. The expression is a comma separated string where each element is an artifact. You can exclude individual artifacts by prefixing them with an exclamation mark (!). Special characters such as ! and * must be escaped with a backslash. Examples: --artifacts files/logs/\\*,\\!files/logs/var_log.yaml Use '--artifacts list [OPERATING_SYSTEM]' to list available artifacts (default: all). Positional Arguments: DESTINATION Specify the directory the output file should be copied to. Output Arguments: -o, --output-base-name BASENAME Specify the base name of the output file (without extension). Default: uac-%hostname%-%os%-%timestamp% -f, --output-format FORMAT Specify the output format. Compression will be enabled if gzip is available. Options: none, tar, zip (default: tar) -P, --output-password PASSWORD Specify the password to be used to encrypt the contents of the archive file. Applies to zip output format only. Collection Arguments: -c, --config FILE Load the config from a specific file. -m, --mount-point MOUNT_POINT Specify the mount point (default: /). -s, --operating-system OPERATING_SYSTEM Specify the operating system. Options: aix, esxi, freebsd, linux, macos, netbsd netscaler, openbsd, solaris -H, --hash-collected Hash all collected files. -u, --run-as-non-root Disable root user check. Note that data collection may be limited. --enable-modifiers Enable artifacts that change the system state. --hostname HOSTNAME Specify the target system hostname. --temp-dir PATH Write all temporary data to this directory. Filter Arguments: --start-date YYYY-MM-DD Only collects files that were last modified/accessed/changed after the given date. --end-date YYYY-MM-DD Only collects files that were last modified/accessed/changed before the given date. Informational Arguments: --case-number CASE_NUMBER Specify the case number. --description DESCRIPTION Specify the description. --evidence-number EVIDENCE_NUMBER Specify the evidence number. --examiner EXAMINER Specify the examiner name. --notes NOTES Specify the notes. Remote Transfer Arguments: --sftp SERVER Transfer the output file to remote SFTP server. SERVER must be specified in the form [user@]host:[path] --sftp-port PORT Remote SFTP server port (default: 22). --sftp-identity-file FILE File from which the identity (private key) for public key authentication is read. --sftp-ssh-options Comma separated ssh options. --s3-provider Transfer the output and log files to S3 service. Options: amazon, google, ibm --s3-region S3 region name (default: us-east-1 [amazon], us-south [ibm]). --s3-bucket S3 bucket/cloud object storage name. --s3-access-key The access key for the bucket/cloud object storage. --s3-secret-key The secret access key for the bucket/cloud object storage. --s3-token The session/bearer token for the bucket/cloud object storage. --aws-s3-presigned-url URL Transfer the output file to AWS S3 using a pre-signed URL. --aws-s3-presigned-url-log-file URL Transfer the log file to AWS S3 using a pre-signed URL. --azure-storage-sas-url URL Transfer the output file to Azure Storage using a SAS URL. --azure-storage-sas-url-log-file URL Transfer the log file to Azure Storage using a SAS URL. --delete-local-on-successful-transfer Delete local output and log files on successful transfer. Validation Arguments: --validate-artifact FILE Validate artifact. --validate-profile FILE Validate profile.","title":"Command line options"},{"location":"#optional-arguments","text":"","title":"Optional Arguments"},{"location":"#-help","text":"Display the help and exit.","title":"--help"},{"location":"#-v-verbose","text":"Increases the verbosity level. Enabling a higher verbosity level will result in the display of all executed commands.","title":"-v, --verbose"},{"location":"#-debug","text":"Enable debug mode. Enabling debug mode will prevent the removal of the uac-data.tmp directory in the destination directory. This directory stores collected, temporary and debugging data during execution.","title":"--debug"},{"location":"#-trace","text":"Enable set -x . Using set -x in a shell script enables command tracing by printing each command before execution, which helps in debugging and understanding the script's flow.","title":"--trace"},{"location":"#-v-version","text":"Output version information and exit.","title":"-V, --version"},{"location":"#profiling-arguments","text":"","title":"Profiling Arguments"},{"location":"#-p-profile","text":"Specify the collection profile name. Profiles are used to define the list of artifacts that will be used during the execution. They are YAML files located in the profiles directory. Feel free to utilize multiple profiles to craft a highly tailored collection. Profiles will be processed in the sequence they are listed in the command line. It's important to note that duplicate artifacts will be gathered just once. Use --profile list to list available profiles. Examples: ./uac -p ir_triage DESTINATION ./uac -p ir_triage -p offline DESTINATION You also have the option to supply a file path to a custom profile located outside the profiles directory. Example: ./uac -p /home/user/my_custom_profile.yaml DESTINATION_DIR","title":"-p, --profile"},{"location":"#-a-artifacts","text":"Specify the artifacts to be used during the collection. Artifacts are used to define parameters that will be used by a collector to collect data. They are YAML files located in the artifacts directory. Feel free to utilize multiple artifacts to craft a highly tailored collection. Artifacts will be processed in the sequence they are listed in the command line. It's important to note that duplicate artifacts will be gathered just once. You have the option to specify multiple artifacts simultaneously by either separating them with a comma (without spaces) or by using -a/--artifacts multiple times. You can exclude individual artifacts by prefixing them with an exclamation mark (!). Note that in many shells, special characters like ! and * require escaping with a backslash. Use --artifacts list to list all available artifacts. Use --artifacts list [OPERATING_SYSTEM] to list all available artifacts for a specific operating system. Examples: ./uac -a files/logs/\\*,\\!files/logs/var_log.yaml DESTINATION ./uac -a artifacts/live_response/\\* -a ./artifacts/files/logs/\\* -a \\!files/logs/var_log.yaml DESTINATION You also have the option to supply a file path to a custom artifact file located outside the artifacts directory. Examples: ./uac -a files/logs/\\* -a /home/user/my_artifact_file.yaml DESTINATION ./uac -a /home/user/my_artifacts/\\* DESTINATION","title":"-a, --artifacts"},{"location":"#positional-arguments","text":"","title":"Positional Arguments"},{"location":"#destination","text":"The directory where the output and acquisition log files should be copied to.","title":"DESTINATION"},{"location":"#output-arguments","text":"","title":"Output Arguments"},{"location":"#-o-output-base-name","text":"Specify the base name of the output file (without extension). Default is uac-%hostname%-%os%-%timestamp% Examples: ./uac -p ir_triage -o my_custom_output_file_name DESTINATION ./uac -a ./artifacts/files/browsers/chrome.yaml -o uac-chrome-only-%hostname%-%timestamp% DESTINATION","title":"-o, --output-base-name"},{"location":"#-f-output-format","text":"Specify the output format. Compression will be automatically enabled if gzip is available. Options: none, tar, zip (Default is tar ) none : Collected data will not be archived or compressed. Instead, it will be copied directly to an output directory. tar : Collected data will be archived (and compressed) into a tar file. zip : Collected data will be archived and compressed into a zip file. Examples: ./uac -p full --output-format none DESTINATION","title":"-f, --output-format"},{"location":"#-p-output-password","text":"Specify the password to be used to encrypt the contents of the archive file. Applies to zip output format only. Examples: ./uac -p ir_triage --output-format zip --output-password \"infected\" DESTINATION","title":"-P, --output-password"},{"location":"#collection-arguments","text":"","title":"Collection Arguments"},{"location":"#-c-config","text":"Load the config from a specific file. Examples: ./uac -p full -c /home/user/my_custom_uac_config.conf DESTINATION","title":"-c, --config"},{"location":"#-m-mount-point","text":"The mount point where the files will be collected from. Default is / Examples: ./uac -p offline -m /mnt/sda1 DESTINATION","title":"-m, --mount-point"},{"location":"#-s-operating-system","text":"This option allows you to force UAC to collect artifacts for a specific operating system. By default, UAC automatically attempts to identify the target operating system. Options: aix, esxi, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris","title":"-s, --operating-system"},{"location":"#-h-hash-collected","text":"Enabling this option will cause UAC to hash all collected files and save the results in a hash file. To accomplish this, all collected data must first be copied to the destination directory. Therefore, ensure you have twice the free space available on the system: once for the collected data and once for the output file. Additionally, note that this process will increase the running time.","title":"-H, --hash-collected"},{"location":"#-u-run-as-non-root","text":"Disable root user check. Note that artifact collection may be limited.","title":"-u, --run-as-non-root"},{"location":"#-enable-modifiers","text":"Enabling this option will cause UAC to run artifacts that change the current system state. Please refer to the modifiers section for more information.","title":"--enable-modifiers"},{"location":"#-hostname","text":"Specify the hostname to be used as part of the output name when %hostname% is used in --output-base-name. By default, UAC automatically attempts to identify the target system's hostname.","title":"--hostname"},{"location":"#-temp-dir","text":"The location where the uac-data.tmp directory will be created. This directory stores collected, temporary and debugging data during execution. By default, uac-data.tmp will be created within the DESTINATION directory.","title":"--temp-dir"},{"location":"#filter-arguments","text":"","title":"Filter Arguments"},{"location":"#-start-date","text":"Collect only the files that were last modified, accessed, or changed after a specific date. The date must be in the format: YYYY-MM-DD.","title":"--start-date"},{"location":"#-end-date","text":"Collect only the files that were last modified, accessed, or changed before a specific date. The date must be in the format: YYYY-MM-DD.","title":"--end-date"},{"location":"#informational-arguments","text":"","title":"Informational Arguments"},{"location":"#-case-number","text":"Specify the case number.","title":"--case-number"},{"location":"#-description","text":"Specify the case description.","title":"--description"},{"location":"#-evidence-number","text":"Specify the evidence number.","title":"--evidence-number"},{"location":"#-examiner","text":"Specify the examiner's name.","title":"--examiner"},{"location":"#-notes","text":"Specify the case notes.","title":"--notes"},{"location":"#remote-transfer-arguments","text":"","title":"Remote Transfer Arguments"},{"location":"#-sftp","text":"SFTP server host/IP for transferring the output and acquisition log files. It also transfers collected data when none is used as the output format. It must be specified in the form [user@]host:[path] Examples: ./uac -p full --sftp \"user@host:/remote_dir\" DESTINATION","title":"--sftp"},{"location":"#-sftp-port","text":"SFTP server port. Default is 22 .","title":"--sftp-port"},{"location":"#-sftp-identity-file","text":"File from which the identity (private key) for public-key authentication is read.","title":"--sftp-identity-file"},{"location":"#-sftp-ssh-options","text":"Comma-separated options that modify the behavior of the SSH client. These options are usually specified in the SSH client configuration file, but this argument allows you to specify them directly on the command line. Examples: ./uac -p ir_triage --sftp \"user@host:/remote_dir\" --sftp-ssh-options \"StrictHostKeyChecking=no,UserKnownHostsFile=/dev/null\" DESTINATION","title":"--sftp-ssh-options"},{"location":"#-s3-provider","text":"Transfer the output and log file to a S3 bucket/cloud object storage. Options: amazon, google, ibm","title":"--s3-provider"},{"location":"#-s3-region","text":"S3 region name. Default: us-east-1 (amazon), us-south (ibm)","title":"--s3-region"},{"location":"#-s3-bucket","text":"S3 bucket/cloud object storage name","title":"--s3-bucket"},{"location":"#-s3-access-key","text":"The access key for the bucket/cloud object storage.","title":"--s3-access-key"},{"location":"#-s3-secret-key","text":"The secret access key for the bucket/cloud object storage. ./uac -p ir_triage --s3-provider amazon --s3-region us-east-1 --s3-bucket uac-test --s3-access-key \"AKIAXKDAGGVYYXDZKAGH1\" --s3-secret-key \"plJqM2mFAu2lVBhpi5UrL+X+8hL+LOYOJryhp2s2\" DESTINATION","title":"--s3-secret-key"},{"location":"#-s3-token","text":"The session/bearer token for the bucket/cloud object storage. Examples: ./uac -p ir_triage --s3-provider ibm --s3-region us-south --s3-bucket uac-test --s3-token \"eyJraWQiOiIyMDIyMDkxMzA4MjciLCJhbGciOiJSUzI1NiJ9.eyJpYW1faWQiOiJJQk1pZC0wNjAwMDFLVVJDIiwiaWQiOiJJQk1pZC0wNjAwMDFLVVJDIiwicmVhbG1pZCI6IklCTWlkIiwianRpIjoiYWVhMDE0MGYtZGM2Ni00MzE0LWJhMjMtZTIxOTAzZmQ3Y2ZhIiwiaWRlbnRpZmllciI6IjA2MDAwMUtVUkMiLCJnaXZlbl9uYW1lIjoiVGhpYWdvIiwiZmFtaWx5X25hbWUiOiJDYW5ve\" DESTINATION","title":"--s3-token"},{"location":"#-aws-s3-presigned-url","text":"This allows for using a pre-signed URL to upload the output file to AWS S3. Make sure you generate a PUT URL for this to work. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p full --aws-s3-presigned-url 'https://uac-test.s3.amazonaws.com/uac-output.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795' DESTINATION","title":"--aws-s3-presigned-url"},{"location":"#-aws-s3-presigned-url-log-file","text":"This allows for using a pre-signed URL to upload the acquisition log file to AWS S3. Make sure you generate a PUT URL for this to work. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p full --aws-s3-presigned-url 'https://uac-test.s3.amazonaws.com/uac-output.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795' --aws-s3-presigned-url-log-file 'https://uac-test.s3.amazonaws.com/uac-output.log?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795' DESTINATION","title":"--aws-s3-presigned-url-log-file"},{"location":"#-azure-storage-sas-url","text":"This allows for using a shared access signature (SAS) URL to upload the output file to Azure Storage. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p ir_triage --azure-storage-sas-url 'https://uac-test.blob.core.windows.net/uac-container/uac-output.tar.gz?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' DESTINATION","title":"--azure-storage-sas-url"},{"location":"#-azure-storage-sas-url-log-file","text":"This allows for using a shared access signature (SAS) URL to upload the acquisition log to Azure Storage. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p ir_triage --azure-storage-sas-url 'https://uac-test.blob.core.windows.net/uac-container/uac-output.tar.gz?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' --azure-storage-sas-url-log-file 'https://uac-test.blob.core.windows.net/uac-container/uac-output.log?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' DESTINATION","title":"--azure-storage-sas-url-log-file"},{"location":"#-delete-local-on-successful-transfer","text":"Delete the local output and acquisition log files if they were successfully transferred to a remote destination such as an SFTP server or S3.","title":"--delete-local-on-successful-transfer"},{"location":"#validation-arguments","text":"","title":"Validation Arguments"},{"location":"#-validate-artifact","text":"Validate whether the artifact YAML file contains any errors. Examples: ./uac --validate-artifact my_custom_artifact.yaml","title":"--validate-artifact"},{"location":"#-validate-profile","text":"Validate whether the profile YAML file contains any errors. Examples: ./uac --validate-profile my_custom_profile.yaml","title":"--validate-profile"},{"location":"#validating-custom-artifacts","text":"It is recommended that you validate your custom artifacts before running a collection. You can do it using the --validate-artifact option as shown below. ./uac --validate-artifact /path_to/my_custom_artifact.yaml","title":"Validating custom artifacts"},{"location":"#validating-custom-profiles","text":"It is recommended that you validate your custom profiles before running a collection. You can do it using the --validate-profile option as shown below. ./uac --validate-profile /path_to/my_custom_profile.yaml","title":"Validating custom profiles"},{"location":"#using-your-binary-files","text":"In most cases, the executables should be placed in the [UAC_DIRECTORY]/bin directory, along with any additional support files it needs to run. For example, if you have an artifact that uses an executable named 'my_script.sh', you should place this binary in the [UAC_DIRECTORY]/bin directory. In the case where you have executables with the same name, but for multiple operating systems, they should be placed in the [UAC_DIRECTORY]/bin/[OS] directory. For example, if you have an artifact that uses an executable named 'lsof', but you have two binary files, one for Linux and one for FreeBSD, you should place the binaries in the [UAC_DIRECTORY]/bin/linux and [UAC_DIRECTORY]/bin/freebsd directories. Note that the operating system name must be in lowercase. In the case where you have executables that can be run on multiple operating systems, they should be placed in the [UAC_DIRECTORY]/bin/[OS1_OS2_OS3] directory. Note that you can have multiple operating systems separated by an underscore '_'. For example, if you have an artifact that uses an executable named 'netstat' that runs on both Linux and ESXi systems, you should place the binary either in the [UAC_DIRECTORY]/bin/linux_esxi directory or place the binary in the [UAC_DIRECTORY]/bin/linux and [UAC_DIRECTORY]/bin/esxi directories. In the case where you have executables with the same name, but for multiple operating systems and multiple architectures, they should be placed in the [UAC_DIRECTORY]/bin/[OS]/[ARCH] directory. For example, if you have an artifact that uses an executable named 'ss', but you have binary files for Linux arm64 and ppc64, FreeBSD i386, and Solaris x86_64 and sparc64, you should place the binary files in the [UAC_DIRECTORY]/bin/linux/arm64 , [UAC_DIRECTORY]/bin/linux/ppc64 , [UAC_DIRECTORY]/bin/freebsd/i386 , [UAC_DIRECTORY]/bin/solaris/x86_64 and [UAC_DIRECTORY]/bin/solaris/sparc64 directories.","title":"Using your binary files"},{"location":"#modifiers","text":"Modifiers are artifacts that include commands that will alter the current system state when executed on the target system. Please refer to the modifier property page for more information.","title":"Modifiers"},{"location":"#troubleshooting-and-support","text":"","title":"Troubleshooting and support"},{"location":"#debug-mode","text":"Debug mode --debug may be useful if you are trying to find the source of an error. Enabling debug mode will prevent the removal of the uac-data.tmp directory in the destination directory. This directory stores collected, temporary and debugging data during execution.","title":"Debug mode"},{"location":"#trace-messages","text":"Using --trace enables command tracing by printing each command before execution, which helps in debugging and understanding the script's flow. It is recommended to redirect the stderr (shell tracing messages) to a text file. Consider the following command to enable command tracing and storing them in /tmp/uac-tracing.log file. ./uac -p ir_triage --trace DESTINATION 2>/tmp/uac-tracing.log","title":"Trace messages"},{"location":"#file-an-issue-on-github","text":"If you are a user and find a bug, please submit an issue and provide enough information for others to reproduce it. One of the project's maintainers should respond to your issue soon. Before submitting, please check our list of already reported bugs to ensure you are not raising a duplicate. See our Contributing Guide for more information.","title":"File an issue on Github"},{"location":"#contributing","text":"Contributions make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated. Have you created any artifacts? Please share them with us! You can contribute with new artifacts, profiles, bug fixes, or propose new features. Please read our Contributing Guide before submitting a Pull Request to the project.","title":"Contributing"},{"location":"#support","text":"For general help using UAC, please refer to the project documentation page . For additional help, you can use one of the following channels: Discord (For live discussion with the community and UAC team) GitHub (Bug reports and contributions) Twitter (Get the news fast)","title":"Support"},{"location":"#support-the-project","text":"If you find UAC helpful, please give us a \u2b50 on GitHub ! This helps others discover the project and motivates us to improve it further.","title":"Support the Project"},{"location":"#license","text":"The UAC project uses the Apache License Version 2.0 software license.","title":"License"},{"location":"artifacts/","text":"Artifacts definition Artifacts define parameters for a collector to gather data. UAC reads the YAML files dynamically and, based on their contents, uses one of the five available collectors ( command , file , find , hash and stat ) to collect the relevant artifacts. The example below contains two sets of rules: the first set uses the hash collector, and the second set uses the command collector to gather the artifacts. version: 1.0 artifacts: - description: Hash running processes. supported_os: [aix] collector: hash path: /proc/[0-9]*/object/a.out output_directory: /live_response/process output_file: hash_running_processes - description: Report a snapshot of the current processes. supported_os: [aix, freebsd, linux, macos, netbsd, openbsd, solaris] collector: command command: ps auxwww output_directory: /live_response/process output_file: ps_auxwww.txt It is common practice to group all artifacts related to the same topic within a single YAML file. This approach allows for more granular artifact collection based on the specific case you are working on. An artifact has one required field at the top of the file version , followed by a set of rules that will be used by one of the collectors to collect the desired data. The version should be incremented as artifacts are updated or additional artifacts are added. artifacts Required Set of rules (sequence of mappings) that define what data will be collected. An artifact rule must include three mandatory fields: description , supported_os , and collector , along with additional properties depending on the chosen collector. version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command ... # additional options depending on the collector - description: Hash files that contain at least +x flag set for owner. supported_os: [all] collector: hash ... # additional options depending on the collector - description: Collect /var/log logs. supported_os: [all] collector: file ... # additional options depending on the collector collector Required UAC uses collectors to gather data, with each collector serving a specific function and requiring its options. command Use this collector to run commands and store the output into an output file. In a nutshell, UAC will use eval to run the command and redirect the stdout to the output file. The stderr will be captured and added to uac.log file as a log record. Required fields: command output_directory Optional fields: compress_output_file condition exclude_nologin_users foreach output_file redirect_stderr_to_stdout find based collectors These collectors use the find tool to search for files and directories before collecting or processing any data. As an example, the artifact below... version: 1.0 artifacts: - description: Collect nginx logs. supported_os: [aix, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris] collector: file path: /var/log exclude_path_pattern: [\"/sys\", \"/proc\"] name_pattern: [\"*access_log*\", \"*access.log*\", \"*error_log*\", \"*error.log*\"] max_depth: 5 file_type: [f] max_file_size: 1073741824 # 1GB ...will become this: find /var/log -maxdepth 5 \\( -path \"/sys\" -o -path \"/proc\" \\) -prune -o -size -1073741824c \\( -name \"*access_log*\" -o -name \"*access.log*\" -o -name \"*error_log*\" -o -name \"*error.log*\" \\) -print Since the find tool varies between operating systems, UAC will determine which options are supported by the find tool on the target system to build the correct find command at runtime. UAC can also use a Perl-based implementation of the find command provided in the tools/find_pl directory. For example, if the artifact above is executed on a system where the find tool does not support the -maxdepth and -path options, and perl is also not available, the find command will be: find /var/log -size -1073741824c \\( -name \"*access_log*\" -o -name \"*access.log*\" -o -name \"*error_log*\" -o -name \"*error.log*\" \\) -print Since the Perl-based implementation of the find command supports most known options, the same example will result in the following command: find_pl /var/log -maxdepth 5 \\( -path \"/sys\" -o -path \"/proc\" \\) -prune -o -size -1073741824c \\( -name \"*access_log*\" -o -name \"*access.log*\" -o -name \"*error_log*\" -o -name \"*error.log*\" \\) -print This is done to prevent the find command from failing during the collection due to an invalid option. find Use this collector to find files and directories and store the output into a text file. Required fields: path output_directory output_file Optional fields: Artifacts definition artifacts collector command find based collectors find hash stat file command compress_output_file condition description exclude_file_system exclude_name_pattern exclude_nologin_users exclude_path_pattern file_type foreach ignore_date_range is_file_list max_depth max_file_size min_file_size modifier name_pattern no_group no_user output_directory output_file path path_pattern permissions redirect_stderr_to_stdout supported_os version hash Use this collector to hash files and store the output into a text file. The algorithms are defined in the uac.conf file. Required fields: path output_directory output_file Optional fields: Artifacts definition artifacts collector command find based collectors find hash stat file command compress_output_file condition description exclude_file_system exclude_name_pattern exclude_nologin_users exclude_path_pattern file_type foreach ignore_date_range is_file_list max_depth max_file_size min_file_size modifier name_pattern no_group no_user output_directory output_file path path_pattern permissions redirect_stderr_to_stdout supported_os version stat Use this collector to extract information from files and directories to create a body file . Some systems do not have the stat tool available, but do have Perl (e.g., AIX). In this case, UAC will use a Perl-based version ( stat_pl ) to extract information from files and directories. Required fields: path output_directory output_file Optional fields: Artifacts definition artifacts collector command find based collectors find hash stat file command compress_output_file condition description exclude_file_system exclude_name_pattern exclude_nologin_users exclude_path_pattern file_type foreach ignore_date_range is_file_list max_depth max_file_size min_file_size modifier name_pattern no_group no_user output_directory output_file path path_pattern permissions redirect_stderr_to_stdout supported_os version file Use this collector to collect files and directories (in their raw format). Collected files will be stored in the [root] directory within the output file. Required fields: path Optional fields: Artifacts definition artifacts collector command find based collectors find hash stat file command compress_output_file condition description exclude_file_system exclude_name_pattern exclude_nologin_users exclude_path_pattern file_type foreach ignore_date_range is_file_list max_depth max_file_size min_file_size modifier name_pattern no_group no_user output_directory output_file path path_pattern permissions redirect_stderr_to_stdout supported_os version command Required by: command Accepted values: one or multiple shell commands The command will be executed on the target system, and the output will be collected. You do not need to specify the path to the executable as it is expected to be in the PATH; only the executable's name and parameters are required. UAC can also run executables located in the bin directory. In this case, the path to the executable is still not required, as the bin directory is automatically added to PATH when UAC runs. For more information, refer to the bin/README.md file. The example below demonstrates how to collect the output from the ps -ef command: version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps -ef output_directory: /live_response/process output_file: ps_-ef.txt compress_output_file Optional for: command Accepted values: true or false If this option is set to true , the output file will be compressed using gzip (when gzip is available). The example below will result in a compressed ps_-ef.txt.gz file. version: 1.0 output_directory: /live_response/process artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps -ef output_file: ps_-ef.txt compress_output_file: true Note that compress_output_file only applies to files specified in the output_file key-value pair. condition Optional for: command, file, find, hash and stat Accepted values: one or multiple shell commands The collection will only run if the condition returns true. This feature is very useful for preventing UAC from executing numerous commands if a specific condition does not apply to the target system. In the example below, the command will only be executed if the condition ls /proc/$$ returns true. version: 1.0 output_directory: /live_response/process artifacts: - description: Collect running processes executable path. supported_os: [freebsd] condition: ls /proc/$$ collector: command command: ls -l /proc/[0-9]*/file output_file: running_processes_full_paths.txt You can prefix the command with an exclamation mark (!) to perform an 'if not' condition. In the example below, the command will only be executed if the condition ls /proc/$$ returns false. version: 1.0 output_directory: /live_response/process artifacts: - description: Collect running processes executable path. supported_os: [freebsd] condition: ! ls /proc/$$ collector: command command: ps -eo args | grep ^/ | awk '{print $1}' | sort -u output_file: running_processes_full_paths.txt The condition key-pair value can also be used as a global option, placed before the artifacts mapping. In this case, the collection will only proceed if the global condition returns true. In the example below, the data will only be collected if the global condition returns true. version: 1.0 output_directory: /live_response/process condition: ls /proc/$$ artifacts: - description: Hash running processes. supported_os: [linux, netbsd] collector: hash path: /proc/[0-9]*/exe output_file: hash_running_processes - description: Hash running processes. supported_os: [freebsd] collector: hash path: /proc/[0-9]*/file output_file: hash_running_processes description Required Description of what will be collected. No line breaks are supported. exclude_file_system Optional for: file, find, hash and stat Accepted values: array of file systems Use this option to exclude file systems from the collection. UAC will retrieve the list of existing mountpoints (paths) at runtime and exclude them from the collection. The file system types that are supported depend on the target computer's running kernel. Note that exclude_file_system will be ignored when path_pattern is used. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all files excluding any files located in procfs, nfs and devfs file systems. supported_os: [all] collector: find path: / exclude_file_system: [procfs, nfs, devfs] output_file: exclude_procfs_nfs_devfs.txt exclude_name_pattern Optional for: file, find, hash and stat Accepted values: array of paths Use this option to exclude files from the collection. This option works the same way as find's -name -prune option. Since the leading directories are removed, the file names considered for a match with name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. version: 1.0 output_directory: /live_response/system artifacts: - description: Search /etc excluding passwd and shadow* files. supported_os: [all] collector: find path: /etc exclude_name_pattern: [\"passwd\", \"shadow*\"] output_file: etc_excluding_passwd_shadow.txt exclude_nologin_users Optional for: command, file, find, hash and stat Accepted values: true or false Use this option to search for artifacts only from users with a valid shell. Any user with no shell will be skipped from the collection. By default, UAC will always search for artifacts from all users. version: 1.0 artifacts: - description: Run 'ls -lRa' on all home directories for users that have a valid shell only. supported_os: [all] collector: command command: ls -lRa /%user_home%/ exclude_nologin_users: true output_directory: /live_response/%user% output_file: ls_-lRa_%user%.txt exclude_path_pattern Optional for: file, find, hash and stat Accepted values: array of paths Use this option to exclude paths from the collection. This option works the same way as find's -path -prune option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all excluding /etc and /var. supported_os: [all] collector: find path: / exclude_path_pattern: [\"/dev\", \"/var\"] output_file: all_excluding_etc_var.txt file_type Optional for: file, find, hash and stat Accepted values: array of file types Use this option to specify the type of file to search for, such as directories (d), regular files (f), symbolic links (l), and other file types. This option works the same way as find's -type option. File is of type: Value Description f regular file d directory l symbolic link p named pipe (FIFO) s socket b block special c character special version: 1.0 output_directory: /live_response/system artifacts: - description: Search files only. supported_os: [all] collector: find path: / file_type: [f] output_file: files_only.txt - description: Search directories only. supported_os: [all] collector: find path: / file_type: [f, d, l] output_file: directories_only.txt foreach Optional for: command Accepted values: one or multiple shell commands The command will be executed, and its output lines will be used as input by the command key-value pair. The logic behind it is: for (each line returned by foreach); do command done The %line% variable has to be used and will be replaced by each line returned by the execution of the foreach command at runtime. The %line% variable can also be used on output_directory and output_file key-value pairs. Let's suppose you need to collect container logs, and you don't know the container IDs. First, you need to retrieve all the IDs: docker container ps -all | sed 1d | awk '{print $1}' The %line% variable will be replaced by each output line generated by the command (which are container IDs in the example above). This implies that if you have 10 containers, the command docker container logs %line% will be executed 10 times, once for each container ID. Example: version: 1.0 artifacts: - description: Fetch the logs of all containers. supported_os: [linux] collector: command foreach: docker container ps -all | sed 1d | awk '{print $1}' command: docker container logs %line% output_directory: /live_response/containers/%line% output_file: docker_container_logs_%line%.txt ignore_date_range Optional for: file, find, hash and stat Accepted values: true or false Use this option to collect files ignoring the date set using both --start-date and --end-date command line options. This is useful when you want to set a date range for your collection, but want to collect some files regardless of their last accessed, modified and changed dates. For example, search for all files and subdirectories from /etc regardless of their last accessed, modified and changed dates, even if a date range was set using --start-date and --end-date command line options. version: 1.0 output_directory: /live_response/system artifacts: - description: Search /etc regardless date range set by --start-date and --end-date. supported_os: [all] collector: find path: /etc ignore_date_range: true output_file: ignore_date_range.txt is_file_list Optional for: file, hash and stat Accepted values: true or false If set to true, the path option will refer to a file list containing one path per line. This is useful when you need to hash/stat/collect files based on a file list. artifacts: - description: Hash files based on a file list located in /%uac_directory%/my_file_list.txt. supported_os: [all] collector: hash path: /%uac_directory%/my_file_list.txt is_file_list: true output_file: hash_my_file_list.txt max_depth Optional for: file, find, hash and stat Accepted values: non-negative integer Descend at most levels (a non-negative integer) levels of directories below the starting-point. Using 0 means only applying the tests and actions to the starting-points themselves. This option works the same way as find's -maxdepth option. version: 1.0 output_directory: /live_response/system artifacts: - description: Descend at most 5 levels of directories below /. supported_os: [all] collector: find path: / max_depth: 5 output_file: max_5_levels.txt max_file_size Optional for: file, find, hash and stat Accepted values: non-negative integer The maximum size of a file to search (in bytes). Any files bigger than this will be ignored. This option works the same way as find's -size option. Note that file_type must be set to f . version: 1.0 output_directory: /live_response/system artifacts: - description: Search all files smaller than 1048576 bytes. supported_os: [all] collector: find path: / file_type: [f] max_file_size: 1048576 output_file: smaller_than.txt min_file_size Optional for: file, find, hash and stat Accepted values: non-negative integer The minimum size of a file to search (in bytes). Any files smaller than this will be ignored. This option works the same way as find's -size option. Note that file_type must be set to f . version: 1.0 output_directory: /live_response/system artifacts: - description: Search all files bigger than 1048576 bytes. supported_os: [all] collector: find path: / file_type: [f] min_file_size: 1048576 output_file: bigger_than.txt modifier Optional Accepted values: true or false The collection will only execute if the value is set to true and the --enable-modifiers switch is included in the command line. This feature helps identify artifacts that modify the current system state after execution. Please note that this is a global property that must be set before defining the artifacts mapping. In the example below, the artifact will only be executed if --enable-modifiers switch is included in the command line. version: 1.0 modifier: true output_directory: /live_response/modifiers artifacts: - description: List all PIDs with a directory in /proc but hidden for ps command. supported_os: [linux] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: if ps ax | awk '{print $1}' | grep -q %line%; then true; else echo %line%; fi output_file: hidden_pids_for_ps_command.txt - description: Umount all bind mounted directories to /proc/PID. supported_os: [linux] collector: command foreach: mount | awk 'BEGIN { FS=\" on \"; } { print $2; }' | grep \"/proc/[0-9]\" | awk '{print $1}' command: umount \"%line%\" output_file: umount_%line%.txt name_pattern Optional for: file, find, hash and stat Accepted values: array of paths Return the full file path if one of the name_pattern values matches the file name. This option works the same way as find's -name option. Since the leading directories are removed, the file names considered for a match with name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all wtmp and utmp files. supported_os: [all] collector: find path: /var name_pattern: [\"wtmp\", \"btmp\"] output_file: wtmp_btmp.txt As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all HTML and TXT files. supported_os: [all] collector: find path: / name_pattern: [\"*.html\", \"*.txt\"] output_file: all_html_txt.txt version: 1.0 output_directory: /live_response/system artifacts: - description: Search all .log and .Log (capital L) files. supported_os: [all] collector: find path: /var/log name_pattern: [\"*.[Ll]og\"] output_file: all_log_files.txt no_group Optional for: file, find, hash and stat Accepted values: true or false Use this option to search for files that have a group ID (GID) that no longer exists in the system. This means that the group associated with the file has been deleted or is missing from /etc/group. version: 1.0 output_directory: /live_response/system artifacts: - description: List files under /bin directory with an unknown group ID name. supported_os: [aix, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris] collector: find path: /bin file_type: [f] no_group: true output_file: group_name_unknown_files.txt no_user Optional for: file, find, hash and stat Accepted values: true or false Use this option to search for files that have a user ID (UID) that no longer exists in the system. This means the file was owned by a user that has been deleted or is missing from /etc/passwd. version: 1.0 output_directory: /live_response/system artifacts: - description: List files under /bin directory with an unknown user ID name. supported_os: [aix, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris] collector: find path: /bin file_type: [f] no_user: true output_file: user_name_unknown_files.txt output_directory Required by: command, find, hash and stat Accepted values: path Specify the directory within the output file where the collected data will be stored. In the example below, ls_tmp.txt will stored in my_custom_artifacts directory within the output file. version: 1.0 artifacts: - description: My first artifact. supported_os: [all] collector: command command: ls /tmp output_directory: /my_custom_artifacts output_file: ls_tmp.txt Output file contents: The output_directory key-pair value can also be used as a global option, placed before the artifacts mapping. In this case, any rules that do not have a specified output_directory will use the global setting. In the example below, ps.txt will be stored in live_response/process directory, but ps_auxwww.txt will be stored in my_global_dir directory. version: 1.0 output_directory: /my_global_dir artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_directory: /live_response/process output_file: ps.txt - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps auxwww output_file: ps_auxwww.txt output_file Optional for: command, find, hash and stat Accepted values: file name Specify the output file name where the collected data will be stored. Note that if the output file name is longer than 255 characters, UAC will truncate the file name to 245 characters and add the prefix (trunc). version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_directory: /live_response/process output_file: ps.txt If no output_file is specified, all data in the output_directory will be archived into the output file. In the example below, avml.raw will be placed in the memory_dump directory. version: 1.0 output_directory: /memory_dump artifacts: - description: Capture a memory image. supported_os: [linux] collector: command command: avml avml.raw UAC never overwrites output files; data is always appended. In the example below, both ps and ps auxwww outputs will be stored in the same same_file.txt file. version: 1.0 output_directory: /live_response/process artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_file: same_file.txt - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps auxwww output_file: same_file.txt path Required by: find, file, hash and stat Accepted values: path The starting point from where the artifact will be searched for. UAC will recurse into subdirectories unless otherwise prevented by max_depth option. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. Every artifact should be treated as if it originates from the / (root) mount point. The root mount point will be replaced by UAC at runtime if a mount point is defined with the --mount-point command-line option. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all cmdline files within /proc/*/ supported_os: [all] collector: find path: /proc/*/cmdline output_file: list_of_cmdline_files.txt Remember to use quotation marks when specifying paths with spaces or special characters. version: 1.0 output_directory: /live_response/system artifacts: - description: Search for TCC.db file. supported_os: [all] collector: find path: /Library/\"Application Support\"/com.apple.TCC/TCC.db output_file: path_with_spaces.txt path_pattern Optional for: find, file, hash and stat Accepted values: array of paths Return the full file path if one of the path_pattern values matches the file path. This option works the same way as find's -path option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. The example below searches for Discord's Cache directory anywhere within the user's home directory. Hits would be as follows: /home/user/.config /discord/Cache/ 00bcecbd2455cb22_0 /home/user/.var/app/com.discordapp.Discord/config /discord/Cache/ index /home/user/snap/discord/current/.config /discord/Cache/ ac0fa118bdaaa62e_0 version: 1.0 output_directory: /live_response/system artifacts: - description: Find Discord cache files. supported_os: [all] collector: find path: /%user_home% path_pattern: [\"*/discord/Cache/*\"] output_file: discord_cache.txt permissions Optional for: find, file, hash and stat Accepted values: array of permissions Use this option to search for files and directories based on their permissions. This option works the same way as find's -perm option. Please note that symbolic mode is not supported (e.g: -g=w). Permissions can be used as follows: File's permission bits are exactly mode (octal). version: 1.0 output_directory: /live_response/system artifacts: - description: Search files that have permissions set to 755 or 644. supported_os: [all] collector: find path: / file_type: [f] permissions: [755, 644] output_file: all_755_and_644_permissions.txt All of the permission bits mode (octal) are set for the file. version: 1.0 output_directory: /live_response/system artifacts: - description: Search for files that have SUID bit set. supported_os: [all] collector: find path: / file_type: [f] permissions: [-4000] output_file: suid_files.txt redirect_stderr_to_stdout Optional for: command Accepted values: true or false If this option is set to true , all error messages (stderr) will be redirected to the standard output (stdout), which is the output file . In the example below, both the command output (stdout) and the error messages (stderr) will be stored in the lsof_-nPl.txt file. version: 1.0 output_directory: /live_response/process artifacts: - description: Collect the list open files. supported_os: [all] collector: command command: lsof -nPl output_file: lsof_-nPl.txt redirect_stderr_to_stdout: true supported_os Required Accepted values: array of operating systems List of operating systems that the artifact applies to. Use all whether the artifact applies to all operating systems. The currently supported operating systems are (case sensitive): Value Description aix Artifact applies to AIX systems. esxi Artifact applies to ESXi systems. freebsd Artifact applies to FreeBSD systems. linux Artifact applies to Linux systems. macos Artifact applies to macOS systems. netbsd Artifact applies to NetBSD systems. netscaler Artifact applies to NetScaler systems. openbsd Artifact applies to OpenBSD systems. solaris Artifact applies to Solaris systems. Examples: Artifact applies to all supported operating systems: version: 1.0 artifacts: - description: Artifact description. supported_os: [all] collector: hash ... # additional options depending on the collector Artifact applies to Aix, FreeBSD and Solaris systems only: version: 1.0 artifacts: - description: Artifact description. supported_os: [aix, freebsd, solaris] collector: stat ... # additional options depending on the collector version Required The artifact file version. It needs to be updated every time the YAML file is changed.","title":"Artifacts"},{"location":"artifacts/#artifacts-definition","text":"Artifacts define parameters for a collector to gather data. UAC reads the YAML files dynamically and, based on their contents, uses one of the five available collectors ( command , file , find , hash and stat ) to collect the relevant artifacts. The example below contains two sets of rules: the first set uses the hash collector, and the second set uses the command collector to gather the artifacts. version: 1.0 artifacts: - description: Hash running processes. supported_os: [aix] collector: hash path: /proc/[0-9]*/object/a.out output_directory: /live_response/process output_file: hash_running_processes - description: Report a snapshot of the current processes. supported_os: [aix, freebsd, linux, macos, netbsd, openbsd, solaris] collector: command command: ps auxwww output_directory: /live_response/process output_file: ps_auxwww.txt It is common practice to group all artifacts related to the same topic within a single YAML file. This approach allows for more granular artifact collection based on the specific case you are working on. An artifact has one required field at the top of the file version , followed by a set of rules that will be used by one of the collectors to collect the desired data. The version should be incremented as artifacts are updated or additional artifacts are added.","title":"Artifacts definition"},{"location":"artifacts/#artifacts","text":"Required Set of rules (sequence of mappings) that define what data will be collected. An artifact rule must include three mandatory fields: description , supported_os , and collector , along with additional properties depending on the chosen collector. version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command ... # additional options depending on the collector - description: Hash files that contain at least +x flag set for owner. supported_os: [all] collector: hash ... # additional options depending on the collector - description: Collect /var/log logs. supported_os: [all] collector: file ... # additional options depending on the collector","title":"artifacts"},{"location":"artifacts/#collector","text":"Required UAC uses collectors to gather data, with each collector serving a specific function and requiring its options.","title":"collector"},{"location":"artifacts/#command","text":"Use this collector to run commands and store the output into an output file. In a nutshell, UAC will use eval to run the command and redirect the stdout to the output file. The stderr will be captured and added to uac.log file as a log record. Required fields: command output_directory Optional fields: compress_output_file condition exclude_nologin_users foreach output_file redirect_stderr_to_stdout","title":"command"},{"location":"artifacts/#find-based-collectors","text":"These collectors use the find tool to search for files and directories before collecting or processing any data. As an example, the artifact below... version: 1.0 artifacts: - description: Collect nginx logs. supported_os: [aix, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris] collector: file path: /var/log exclude_path_pattern: [\"/sys\", \"/proc\"] name_pattern: [\"*access_log*\", \"*access.log*\", \"*error_log*\", \"*error.log*\"] max_depth: 5 file_type: [f] max_file_size: 1073741824 # 1GB ...will become this: find /var/log -maxdepth 5 \\( -path \"/sys\" -o -path \"/proc\" \\) -prune -o -size -1073741824c \\( -name \"*access_log*\" -o -name \"*access.log*\" -o -name \"*error_log*\" -o -name \"*error.log*\" \\) -print Since the find tool varies between operating systems, UAC will determine which options are supported by the find tool on the target system to build the correct find command at runtime. UAC can also use a Perl-based implementation of the find command provided in the tools/find_pl directory. For example, if the artifact above is executed on a system where the find tool does not support the -maxdepth and -path options, and perl is also not available, the find command will be: find /var/log -size -1073741824c \\( -name \"*access_log*\" -o -name \"*access.log*\" -o -name \"*error_log*\" -o -name \"*error.log*\" \\) -print Since the Perl-based implementation of the find command supports most known options, the same example will result in the following command: find_pl /var/log -maxdepth 5 \\( -path \"/sys\" -o -path \"/proc\" \\) -prune -o -size -1073741824c \\( -name \"*access_log*\" -o -name \"*access.log*\" -o -name \"*error_log*\" -o -name \"*error.log*\" \\) -print This is done to prevent the find command from failing during the collection due to an invalid option.","title":"find based collectors"},{"location":"artifacts/#find","text":"Use this collector to find files and directories and store the output into a text file. Required fields: path output_directory output_file Optional fields: Artifacts definition artifacts collector command find based collectors find hash stat file command compress_output_file condition description exclude_file_system exclude_name_pattern exclude_nologin_users exclude_path_pattern file_type foreach ignore_date_range is_file_list max_depth max_file_size min_file_size modifier name_pattern no_group no_user output_directory output_file path path_pattern permissions redirect_stderr_to_stdout supported_os version","title":"find"},{"location":"artifacts/#hash","text":"Use this collector to hash files and store the output into a text file. The algorithms are defined in the uac.conf file. Required fields: path output_directory output_file Optional fields: Artifacts definition artifacts collector command find based collectors find hash stat file command compress_output_file condition description exclude_file_system exclude_name_pattern exclude_nologin_users exclude_path_pattern file_type foreach ignore_date_range is_file_list max_depth max_file_size min_file_size modifier name_pattern no_group no_user output_directory output_file path path_pattern permissions redirect_stderr_to_stdout supported_os version","title":"hash"},{"location":"artifacts/#stat","text":"Use this collector to extract information from files and directories to create a body file . Some systems do not have the stat tool available, but do have Perl (e.g., AIX). In this case, UAC will use a Perl-based version ( stat_pl ) to extract information from files and directories. Required fields: path output_directory output_file Optional fields: Artifacts definition artifacts collector command find based collectors find hash stat file command compress_output_file condition description exclude_file_system exclude_name_pattern exclude_nologin_users exclude_path_pattern file_type foreach ignore_date_range is_file_list max_depth max_file_size min_file_size modifier name_pattern no_group no_user output_directory output_file path path_pattern permissions redirect_stderr_to_stdout supported_os version","title":"stat"},{"location":"artifacts/#file","text":"Use this collector to collect files and directories (in their raw format). Collected files will be stored in the [root] directory within the output file. Required fields: path Optional fields: Artifacts definition artifacts collector command find based collectors find hash stat file command compress_output_file condition description exclude_file_system exclude_name_pattern exclude_nologin_users exclude_path_pattern file_type foreach ignore_date_range is_file_list max_depth max_file_size min_file_size modifier name_pattern no_group no_user output_directory output_file path path_pattern permissions redirect_stderr_to_stdout supported_os version","title":"file"},{"location":"artifacts/#command_1","text":"Required by: command Accepted values: one or multiple shell commands The command will be executed on the target system, and the output will be collected. You do not need to specify the path to the executable as it is expected to be in the PATH; only the executable's name and parameters are required. UAC can also run executables located in the bin directory. In this case, the path to the executable is still not required, as the bin directory is automatically added to PATH when UAC runs. For more information, refer to the bin/README.md file. The example below demonstrates how to collect the output from the ps -ef command: version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps -ef output_directory: /live_response/process output_file: ps_-ef.txt","title":"command"},{"location":"artifacts/#compress_output_file","text":"Optional for: command Accepted values: true or false If this option is set to true , the output file will be compressed using gzip (when gzip is available). The example below will result in a compressed ps_-ef.txt.gz file. version: 1.0 output_directory: /live_response/process artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps -ef output_file: ps_-ef.txt compress_output_file: true Note that compress_output_file only applies to files specified in the output_file key-value pair.","title":"compress_output_file"},{"location":"artifacts/#condition","text":"Optional for: command, file, find, hash and stat Accepted values: one or multiple shell commands The collection will only run if the condition returns true. This feature is very useful for preventing UAC from executing numerous commands if a specific condition does not apply to the target system. In the example below, the command will only be executed if the condition ls /proc/$$ returns true. version: 1.0 output_directory: /live_response/process artifacts: - description: Collect running processes executable path. supported_os: [freebsd] condition: ls /proc/$$ collector: command command: ls -l /proc/[0-9]*/file output_file: running_processes_full_paths.txt You can prefix the command with an exclamation mark (!) to perform an 'if not' condition. In the example below, the command will only be executed if the condition ls /proc/$$ returns false. version: 1.0 output_directory: /live_response/process artifacts: - description: Collect running processes executable path. supported_os: [freebsd] condition: ! ls /proc/$$ collector: command command: ps -eo args | grep ^/ | awk '{print $1}' | sort -u output_file: running_processes_full_paths.txt The condition key-pair value can also be used as a global option, placed before the artifacts mapping. In this case, the collection will only proceed if the global condition returns true. In the example below, the data will only be collected if the global condition returns true. version: 1.0 output_directory: /live_response/process condition: ls /proc/$$ artifacts: - description: Hash running processes. supported_os: [linux, netbsd] collector: hash path: /proc/[0-9]*/exe output_file: hash_running_processes - description: Hash running processes. supported_os: [freebsd] collector: hash path: /proc/[0-9]*/file output_file: hash_running_processes","title":"condition"},{"location":"artifacts/#description","text":"Required Description of what will be collected. No line breaks are supported.","title":"description"},{"location":"artifacts/#exclude_file_system","text":"Optional for: file, find, hash and stat Accepted values: array of file systems Use this option to exclude file systems from the collection. UAC will retrieve the list of existing mountpoints (paths) at runtime and exclude them from the collection. The file system types that are supported depend on the target computer's running kernel. Note that exclude_file_system will be ignored when path_pattern is used. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all files excluding any files located in procfs, nfs and devfs file systems. supported_os: [all] collector: find path: / exclude_file_system: [procfs, nfs, devfs] output_file: exclude_procfs_nfs_devfs.txt","title":"exclude_file_system"},{"location":"artifacts/#exclude_name_pattern","text":"Optional for: file, find, hash and stat Accepted values: array of paths Use this option to exclude files from the collection. This option works the same way as find's -name -prune option. Since the leading directories are removed, the file names considered for a match with name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. version: 1.0 output_directory: /live_response/system artifacts: - description: Search /etc excluding passwd and shadow* files. supported_os: [all] collector: find path: /etc exclude_name_pattern: [\"passwd\", \"shadow*\"] output_file: etc_excluding_passwd_shadow.txt","title":"exclude_name_pattern"},{"location":"artifacts/#exclude_nologin_users","text":"Optional for: command, file, find, hash and stat Accepted values: true or false Use this option to search for artifacts only from users with a valid shell. Any user with no shell will be skipped from the collection. By default, UAC will always search for artifacts from all users. version: 1.0 artifacts: - description: Run 'ls -lRa' on all home directories for users that have a valid shell only. supported_os: [all] collector: command command: ls -lRa /%user_home%/ exclude_nologin_users: true output_directory: /live_response/%user% output_file: ls_-lRa_%user%.txt","title":"exclude_nologin_users"},{"location":"artifacts/#exclude_path_pattern","text":"Optional for: file, find, hash and stat Accepted values: array of paths Use this option to exclude paths from the collection. This option works the same way as find's -path -prune option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all excluding /etc and /var. supported_os: [all] collector: find path: / exclude_path_pattern: [\"/dev\", \"/var\"] output_file: all_excluding_etc_var.txt","title":"exclude_path_pattern"},{"location":"artifacts/#file_type","text":"Optional for: file, find, hash and stat Accepted values: array of file types Use this option to specify the type of file to search for, such as directories (d), regular files (f), symbolic links (l), and other file types. This option works the same way as find's -type option. File is of type: Value Description f regular file d directory l symbolic link p named pipe (FIFO) s socket b block special c character special version: 1.0 output_directory: /live_response/system artifacts: - description: Search files only. supported_os: [all] collector: find path: / file_type: [f] output_file: files_only.txt - description: Search directories only. supported_os: [all] collector: find path: / file_type: [f, d, l] output_file: directories_only.txt","title":"file_type"},{"location":"artifacts/#foreach","text":"Optional for: command Accepted values: one or multiple shell commands The command will be executed, and its output lines will be used as input by the command key-value pair. The logic behind it is: for (each line returned by foreach); do command done The %line% variable has to be used and will be replaced by each line returned by the execution of the foreach command at runtime. The %line% variable can also be used on output_directory and output_file key-value pairs. Let's suppose you need to collect container logs, and you don't know the container IDs. First, you need to retrieve all the IDs: docker container ps -all | sed 1d | awk '{print $1}' The %line% variable will be replaced by each output line generated by the command (which are container IDs in the example above). This implies that if you have 10 containers, the command docker container logs %line% will be executed 10 times, once for each container ID. Example: version: 1.0 artifacts: - description: Fetch the logs of all containers. supported_os: [linux] collector: command foreach: docker container ps -all | sed 1d | awk '{print $1}' command: docker container logs %line% output_directory: /live_response/containers/%line% output_file: docker_container_logs_%line%.txt","title":"foreach"},{"location":"artifacts/#ignore_date_range","text":"Optional for: file, find, hash and stat Accepted values: true or false Use this option to collect files ignoring the date set using both --start-date and --end-date command line options. This is useful when you want to set a date range for your collection, but want to collect some files regardless of their last accessed, modified and changed dates. For example, search for all files and subdirectories from /etc regardless of their last accessed, modified and changed dates, even if a date range was set using --start-date and --end-date command line options. version: 1.0 output_directory: /live_response/system artifacts: - description: Search /etc regardless date range set by --start-date and --end-date. supported_os: [all] collector: find path: /etc ignore_date_range: true output_file: ignore_date_range.txt","title":"ignore_date_range"},{"location":"artifacts/#is_file_list","text":"Optional for: file, hash and stat Accepted values: true or false If set to true, the path option will refer to a file list containing one path per line. This is useful when you need to hash/stat/collect files based on a file list. artifacts: - description: Hash files based on a file list located in /%uac_directory%/my_file_list.txt. supported_os: [all] collector: hash path: /%uac_directory%/my_file_list.txt is_file_list: true output_file: hash_my_file_list.txt","title":"is_file_list"},{"location":"artifacts/#max_depth","text":"Optional for: file, find, hash and stat Accepted values: non-negative integer Descend at most levels (a non-negative integer) levels of directories below the starting-point. Using 0 means only applying the tests and actions to the starting-points themselves. This option works the same way as find's -maxdepth option. version: 1.0 output_directory: /live_response/system artifacts: - description: Descend at most 5 levels of directories below /. supported_os: [all] collector: find path: / max_depth: 5 output_file: max_5_levels.txt","title":"max_depth"},{"location":"artifacts/#max_file_size","text":"Optional for: file, find, hash and stat Accepted values: non-negative integer The maximum size of a file to search (in bytes). Any files bigger than this will be ignored. This option works the same way as find's -size option. Note that file_type must be set to f . version: 1.0 output_directory: /live_response/system artifacts: - description: Search all files smaller than 1048576 bytes. supported_os: [all] collector: find path: / file_type: [f] max_file_size: 1048576 output_file: smaller_than.txt","title":"max_file_size"},{"location":"artifacts/#min_file_size","text":"Optional for: file, find, hash and stat Accepted values: non-negative integer The minimum size of a file to search (in bytes). Any files smaller than this will be ignored. This option works the same way as find's -size option. Note that file_type must be set to f . version: 1.0 output_directory: /live_response/system artifacts: - description: Search all files bigger than 1048576 bytes. supported_os: [all] collector: find path: / file_type: [f] min_file_size: 1048576 output_file: bigger_than.txt","title":"min_file_size"},{"location":"artifacts/#modifier","text":"Optional Accepted values: true or false The collection will only execute if the value is set to true and the --enable-modifiers switch is included in the command line. This feature helps identify artifacts that modify the current system state after execution. Please note that this is a global property that must be set before defining the artifacts mapping. In the example below, the artifact will only be executed if --enable-modifiers switch is included in the command line. version: 1.0 modifier: true output_directory: /live_response/modifiers artifacts: - description: List all PIDs with a directory in /proc but hidden for ps command. supported_os: [linux] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: if ps ax | awk '{print $1}' | grep -q %line%; then true; else echo %line%; fi output_file: hidden_pids_for_ps_command.txt - description: Umount all bind mounted directories to /proc/PID. supported_os: [linux] collector: command foreach: mount | awk 'BEGIN { FS=\" on \"; } { print $2; }' | grep \"/proc/[0-9]\" | awk '{print $1}' command: umount \"%line%\" output_file: umount_%line%.txt","title":"modifier"},{"location":"artifacts/#name_pattern","text":"Optional for: file, find, hash and stat Accepted values: array of paths Return the full file path if one of the name_pattern values matches the file name. This option works the same way as find's -name option. Since the leading directories are removed, the file names considered for a match with name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all wtmp and utmp files. supported_os: [all] collector: find path: /var name_pattern: [\"wtmp\", \"btmp\"] output_file: wtmp_btmp.txt As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all HTML and TXT files. supported_os: [all] collector: find path: / name_pattern: [\"*.html\", \"*.txt\"] output_file: all_html_txt.txt version: 1.0 output_directory: /live_response/system artifacts: - description: Search all .log and .Log (capital L) files. supported_os: [all] collector: find path: /var/log name_pattern: [\"*.[Ll]og\"] output_file: all_log_files.txt","title":"name_pattern"},{"location":"artifacts/#no_group","text":"Optional for: file, find, hash and stat Accepted values: true or false Use this option to search for files that have a group ID (GID) that no longer exists in the system. This means that the group associated with the file has been deleted or is missing from /etc/group. version: 1.0 output_directory: /live_response/system artifacts: - description: List files under /bin directory with an unknown group ID name. supported_os: [aix, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris] collector: find path: /bin file_type: [f] no_group: true output_file: group_name_unknown_files.txt","title":"no_group"},{"location":"artifacts/#no_user","text":"Optional for: file, find, hash and stat Accepted values: true or false Use this option to search for files that have a user ID (UID) that no longer exists in the system. This means the file was owned by a user that has been deleted or is missing from /etc/passwd. version: 1.0 output_directory: /live_response/system artifacts: - description: List files under /bin directory with an unknown user ID name. supported_os: [aix, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris] collector: find path: /bin file_type: [f] no_user: true output_file: user_name_unknown_files.txt","title":"no_user"},{"location":"artifacts/#output_directory","text":"Required by: command, find, hash and stat Accepted values: path Specify the directory within the output file where the collected data will be stored. In the example below, ls_tmp.txt will stored in my_custom_artifacts directory within the output file. version: 1.0 artifacts: - description: My first artifact. supported_os: [all] collector: command command: ls /tmp output_directory: /my_custom_artifacts output_file: ls_tmp.txt Output file contents: The output_directory key-pair value can also be used as a global option, placed before the artifacts mapping. In this case, any rules that do not have a specified output_directory will use the global setting. In the example below, ps.txt will be stored in live_response/process directory, but ps_auxwww.txt will be stored in my_global_dir directory. version: 1.0 output_directory: /my_global_dir artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_directory: /live_response/process output_file: ps.txt - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps auxwww output_file: ps_auxwww.txt","title":"output_directory"},{"location":"artifacts/#output_file","text":"Optional for: command, find, hash and stat Accepted values: file name Specify the output file name where the collected data will be stored. Note that if the output file name is longer than 255 characters, UAC will truncate the file name to 245 characters and add the prefix (trunc). version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_directory: /live_response/process output_file: ps.txt If no output_file is specified, all data in the output_directory will be archived into the output file. In the example below, avml.raw will be placed in the memory_dump directory. version: 1.0 output_directory: /memory_dump artifacts: - description: Capture a memory image. supported_os: [linux] collector: command command: avml avml.raw UAC never overwrites output files; data is always appended. In the example below, both ps and ps auxwww outputs will be stored in the same same_file.txt file. version: 1.0 output_directory: /live_response/process artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_file: same_file.txt - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps auxwww output_file: same_file.txt","title":"output_file"},{"location":"artifacts/#path","text":"Required by: find, file, hash and stat Accepted values: path The starting point from where the artifact will be searched for. UAC will recurse into subdirectories unless otherwise prevented by max_depth option. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. Every artifact should be treated as if it originates from the / (root) mount point. The root mount point will be replaced by UAC at runtime if a mount point is defined with the --mount-point command-line option. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all cmdline files within /proc/*/ supported_os: [all] collector: find path: /proc/*/cmdline output_file: list_of_cmdline_files.txt Remember to use quotation marks when specifying paths with spaces or special characters. version: 1.0 output_directory: /live_response/system artifacts: - description: Search for TCC.db file. supported_os: [all] collector: find path: /Library/\"Application Support\"/com.apple.TCC/TCC.db output_file: path_with_spaces.txt","title":"path"},{"location":"artifacts/#path_pattern","text":"Optional for: find, file, hash and stat Accepted values: array of paths Return the full file path if one of the path_pattern values matches the file path. This option works the same way as find's -path option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. The example below searches for Discord's Cache directory anywhere within the user's home directory. Hits would be as follows: /home/user/.config /discord/Cache/ 00bcecbd2455cb22_0 /home/user/.var/app/com.discordapp.Discord/config /discord/Cache/ index /home/user/snap/discord/current/.config /discord/Cache/ ac0fa118bdaaa62e_0 version: 1.0 output_directory: /live_response/system artifacts: - description: Find Discord cache files. supported_os: [all] collector: find path: /%user_home% path_pattern: [\"*/discord/Cache/*\"] output_file: discord_cache.txt","title":"path_pattern"},{"location":"artifacts/#permissions","text":"Optional for: find, file, hash and stat Accepted values: array of permissions Use this option to search for files and directories based on their permissions. This option works the same way as find's -perm option. Please note that symbolic mode is not supported (e.g: -g=w). Permissions can be used as follows: File's permission bits are exactly mode (octal). version: 1.0 output_directory: /live_response/system artifacts: - description: Search files that have permissions set to 755 or 644. supported_os: [all] collector: find path: / file_type: [f] permissions: [755, 644] output_file: all_755_and_644_permissions.txt All of the permission bits mode (octal) are set for the file. version: 1.0 output_directory: /live_response/system artifacts: - description: Search for files that have SUID bit set. supported_os: [all] collector: find path: / file_type: [f] permissions: [-4000] output_file: suid_files.txt","title":"permissions"},{"location":"artifacts/#redirect_stderr_to_stdout","text":"Optional for: command Accepted values: true or false If this option is set to true , all error messages (stderr) will be redirected to the standard output (stdout), which is the output file . In the example below, both the command output (stdout) and the error messages (stderr) will be stored in the lsof_-nPl.txt file. version: 1.0 output_directory: /live_response/process artifacts: - description: Collect the list open files. supported_os: [all] collector: command command: lsof -nPl output_file: lsof_-nPl.txt redirect_stderr_to_stdout: true","title":"redirect_stderr_to_stdout"},{"location":"artifacts/#supported_os","text":"Required Accepted values: array of operating systems List of operating systems that the artifact applies to. Use all whether the artifact applies to all operating systems. The currently supported operating systems are (case sensitive): Value Description aix Artifact applies to AIX systems. esxi Artifact applies to ESXi systems. freebsd Artifact applies to FreeBSD systems. linux Artifact applies to Linux systems. macos Artifact applies to macOS systems. netbsd Artifact applies to NetBSD systems. netscaler Artifact applies to NetScaler systems. openbsd Artifact applies to OpenBSD systems. solaris Artifact applies to Solaris systems. Examples: Artifact applies to all supported operating systems: version: 1.0 artifacts: - description: Artifact description. supported_os: [all] collector: hash ... # additional options depending on the collector Artifact applies to Aix, FreeBSD and Solaris systems only: version: 1.0 artifacts: - description: Artifact description. supported_os: [aix, freebsd, solaris] collector: stat ... # additional options depending on the collector","title":"supported_os"},{"location":"artifacts/#version","text":"Required The artifact file version. It needs to be updated every time the YAML file is changed.","title":"version"},{"location":"config_file/","text":"uac.conf UAC configuration file is located in the config directory. exclude_path_pattern Directory/path patterns will be excluded from find, file, hash and stat collectors. As find tool is used to search for files and directories, the path patterns below need to be compatible with -path option. Please check find man pages for more information. Example: exclude_path_pattern: [\"/etc\", \"/usr/*/local\", \"*/log\"] exclude_name_pattern File name patterns will be excluded from find, file, hash and stat collectors. As find tool is used to search for files and directories, the file name patterns below need to be compatible with -name option. Please check find man pages for more information. Example: exclude_name_pattern: [\"/etc/passwd\", \"*.txt\", \"*.gz.*\", \"*.[Ll][Oo][Gg]\"] exclude_file_system File systems that will be excluded from find, file, hash and stat collectors. UAC will retrieve the list of existing mount-points (paths) and add them to the exclusion list automatically. The file system types that are supported depend on the target computer's running kernel. Example: exclude_file_system: [9p, afs, nfs, nfs4, rpc_pipefs, smbfs, sysfs] hash_algorithm Hash algorithms will be used by the hash collector. Accepted values: md5, sha1 and sha256 Example: hash_algorithm: [md5, sha1] max_depth The find tool is used by UAC to search for files and directories within a directory hierarchy. The -maxdepth parameter is used to limit the depth of the search within the directory tree. By default, when you run the find command without specifying -maxdepth, it searches recursively through all subdirectories of the specified directory. When you specify the -maxdepth parameter followed by a number, it restricts the depth of the search to that number of levels below the starting point in the directory hierarchy. This option is used by all find-based UAC collectors such as find, file, hash and stat. Performance Consideration: Specifying a value here can improve performance by limiting the scope of the search. Accepted values: a positive integer or 0 for disabling it (making UAC search recursively through all subdirectories of the specified directory). Example: max_depth: 10 enable_find_mtime, enable_find_atime and enable_find_ctime Limit data collection based on the date range provided. UAC uses find's -mtime, -atime and -ctime options to limit the data collection based on the file/directory last accessed, last modified and last status changed dates. Accepted values: true or false Examples: To collect only files in which data was last modified OR status last changed within the given date range, please set enable_find_mtime and enable_find_ctime to true and enable_find_atime to false. enable_find_mtime: true enable_find_atime: false enable_find_ctime: true To collect only files whose last status was changed within the date range, please set enable_find_ctime to true, and enable_find_atime and enable_find_mtime to false. enable_find_mtime: false enable_find_atime: false enable_find_ctime: true","title":"uac.conf"},{"location":"config_file/#uacconf","text":"UAC configuration file is located in the config directory.","title":"uac.conf"},{"location":"config_file/#exclude_path_pattern","text":"Directory/path patterns will be excluded from find, file, hash and stat collectors. As find tool is used to search for files and directories, the path patterns below need to be compatible with -path option. Please check find man pages for more information. Example: exclude_path_pattern: [\"/etc\", \"/usr/*/local\", \"*/log\"]","title":"exclude_path_pattern"},{"location":"config_file/#exclude_name_pattern","text":"File name patterns will be excluded from find, file, hash and stat collectors. As find tool is used to search for files and directories, the file name patterns below need to be compatible with -name option. Please check find man pages for more information. Example: exclude_name_pattern: [\"/etc/passwd\", \"*.txt\", \"*.gz.*\", \"*.[Ll][Oo][Gg]\"]","title":"exclude_name_pattern"},{"location":"config_file/#exclude_file_system","text":"File systems that will be excluded from find, file, hash and stat collectors. UAC will retrieve the list of existing mount-points (paths) and add them to the exclusion list automatically. The file system types that are supported depend on the target computer's running kernel. Example: exclude_file_system: [9p, afs, nfs, nfs4, rpc_pipefs, smbfs, sysfs]","title":"exclude_file_system"},{"location":"config_file/#hash_algorithm","text":"Hash algorithms will be used by the hash collector. Accepted values: md5, sha1 and sha256 Example: hash_algorithm: [md5, sha1]","title":"hash_algorithm"},{"location":"config_file/#max_depth","text":"The find tool is used by UAC to search for files and directories within a directory hierarchy. The -maxdepth parameter is used to limit the depth of the search within the directory tree. By default, when you run the find command without specifying -maxdepth, it searches recursively through all subdirectories of the specified directory. When you specify the -maxdepth parameter followed by a number, it restricts the depth of the search to that number of levels below the starting point in the directory hierarchy. This option is used by all find-based UAC collectors such as find, file, hash and stat. Performance Consideration: Specifying a value here can improve performance by limiting the scope of the search. Accepted values: a positive integer or 0 for disabling it (making UAC search recursively through all subdirectories of the specified directory). Example: max_depth: 10","title":"max_depth"},{"location":"config_file/#enable_find_mtime-enable_find_atime-and-enable_find_ctime","text":"Limit data collection based on the date range provided. UAC uses find's -mtime, -atime and -ctime options to limit the data collection based on the file/directory last accessed, last modified and last status changed dates. Accepted values: true or false Examples: To collect only files in which data was last modified OR status last changed within the given date range, please set enable_find_mtime and enable_find_ctime to true and enable_find_atime to false. enable_find_mtime: true enable_find_atime: false enable_find_ctime: true To collect only files whose last status was changed within the date range, please set enable_find_ctime to true, and enable_find_atime and enable_find_mtime to false. enable_find_mtime: false enable_find_atime: false enable_find_ctime: true","title":"enable_find_mtime, enable_find_atime and enable_find_ctime"},{"location":"exposed_functions/","text":"Exposed functions Some internal functions are exposed and can be used during artifact collection. astrings Print the sequences of printable characters in files. This is a shell implementation of the strings command. Synopsis: astrings \"file\" Example: version: 1.0 artifacts: - description: Extract strings from running processes. supported_os: [aix] collector: command condition: ! command_exists \"strings\" foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: astrings /proc/%line%/object/a.out output_directory: /live_response/process/proc/%line% output_file: strings.txt compress_output_file: true command_exists Return true if the command exists in the target system. The command must be enclosed in quotes. Synopsis: command_exists \"command\" Example: version: 1.0 condition: command_exists \"lsblk\" output_directory: /live_response/storage artifacts: - description: List block devices. supported_os: [linux] collector: command command: lsblk -l output_file: lsblk_-l.txt","title":"Exposed Functions"},{"location":"exposed_functions/#exposed-functions","text":"Some internal functions are exposed and can be used during artifact collection.","title":"Exposed functions"},{"location":"exposed_functions/#astrings","text":"Print the sequences of printable characters in files. This is a shell implementation of the strings command. Synopsis: astrings \"file\" Example: version: 1.0 artifacts: - description: Extract strings from running processes. supported_os: [aix] collector: command condition: ! command_exists \"strings\" foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: astrings /proc/%line%/object/a.out output_directory: /live_response/process/proc/%line% output_file: strings.txt compress_output_file: true","title":"astrings"},{"location":"exposed_functions/#command_exists","text":"Return true if the command exists in the target system. The command must be enclosed in quotes. Synopsis: command_exists \"command\" Example: version: 1.0 condition: command_exists \"lsblk\" output_directory: /live_response/storage artifacts: - description: List block devices. supported_os: [linux] collector: command command: lsblk -l output_file: lsblk_-l.txt","title":"command_exists"},{"location":"exposed_vars/","text":"Exposed variables Some variables can be used and will be replaced by UAC at runtime: Variable Replacement %uac_directory% Full path to where uac was run from. %mount_point% Full path of the target mount point. %temp_directory% Full path to the temp directory used by UAC to store temp data. Data in this directory will be discarded and not be part of the output file. %start_date% Date specified by --start-date command line option. %start_date_epoch% Epoch converted date specified by --start-date. %end_date% Date specified by --end-date command line option. %end_date_epoch% Epoch converted date specified by --end-date. The following two variables will initiate a loop, causing UAC will run the command for all users. Variable Replacement %user% Username of each user. %user_home% User's home directory path. Examples: %uac_directory% is useful when you need to add custom files to use during the collection. version: 1.0 artifacts: - description: Hash all files based on a file list located in the UAC directory. supported_os: [all] collector: hash path: /%uac_directory%/my_file_list.txt is_file_list: true output_directory: /live_response/system output_file: my_hash_list.txt version: 1.0 output_directory: /live_response/packages artifacts: - description: Display all applications located at /Applications directory. supported_os: [macos] collector: command command: ls -l -a /%mount_point%/Applications output_file: ls_-l_-a_Applications.txt In the example below, the file hash_running_processes_full_paths.txt will not be part of the output file as it was stored in the %temp_directory% . version: 1.0 artifacts: - description: Collect running processes executable path. supported_os: [esxi] collector: command command: ps -c | awk '{print $4}' | sort -u | grep \"^/\" output_directory: /%temp_directory%/process output_file: hash_running_processes_full_paths.txt - description: Hash running processes. supported_os: [esxi, freebsd, macos, openbsd] collector: hash path: /%temp_directory%/process/hash_running_processes_full_paths.txt is_file_list: true output_directory: /live_response/hash_executables output_file: hash_running_processes In the example below, UAC will collect the file patterns specified in name_pattern from any user's home folder. version: 1.0 artifacts: - description: Collect shell history files. supported_os: [all] collector: file path: /%user_home%/ name_pattern: [\".*_history\", \".*history\", \".lesshst\", \".zhistory\"]","title":"Exposed Variables"},{"location":"exposed_vars/#exposed-variables","text":"Some variables can be used and will be replaced by UAC at runtime: Variable Replacement %uac_directory% Full path to where uac was run from. %mount_point% Full path of the target mount point. %temp_directory% Full path to the temp directory used by UAC to store temp data. Data in this directory will be discarded and not be part of the output file. %start_date% Date specified by --start-date command line option. %start_date_epoch% Epoch converted date specified by --start-date. %end_date% Date specified by --end-date command line option. %end_date_epoch% Epoch converted date specified by --end-date. The following two variables will initiate a loop, causing UAC will run the command for all users. Variable Replacement %user% Username of each user. %user_home% User's home directory path. Examples: %uac_directory% is useful when you need to add custom files to use during the collection. version: 1.0 artifacts: - description: Hash all files based on a file list located in the UAC directory. supported_os: [all] collector: hash path: /%uac_directory%/my_file_list.txt is_file_list: true output_directory: /live_response/system output_file: my_hash_list.txt version: 1.0 output_directory: /live_response/packages artifacts: - description: Display all applications located at /Applications directory. supported_os: [macos] collector: command command: ls -l -a /%mount_point%/Applications output_file: ls_-l_-a_Applications.txt In the example below, the file hash_running_processes_full_paths.txt will not be part of the output file as it was stored in the %temp_directory% . version: 1.0 artifacts: - description: Collect running processes executable path. supported_os: [esxi] collector: command command: ps -c | awk '{print $4}' | sort -u | grep \"^/\" output_directory: /%temp_directory%/process output_file: hash_running_processes_full_paths.txt - description: Hash running processes. supported_os: [esxi, freebsd, macos, openbsd] collector: hash path: /%temp_directory%/process/hash_running_processes_full_paths.txt is_file_list: true output_directory: /live_response/hash_executables output_file: hash_running_processes In the example below, UAC will collect the file patterns specified in name_pattern from any user's home folder. version: 1.0 artifacts: - description: Collect shell history files. supported_os: [all] collector: file path: /%user_home%/ name_pattern: [\".*_history\", \".*history\", \".lesshst\", \".zhistory\"]","title":"Exposed variables"},{"location":"log_files/","text":"Log files uac.log The uac.log file contains a timestamp along with the message level and message displayed. This is the primary log that serves to preserve the actions UAC took while operating. The --debug option affects the level of detail that ends up in this log. When the collection finishes, this log is also archived within the output file. Level Description DBG Debug messages INF Informational messages ERR Error messages CMD Commands executed and their stderr messages At the beginning of the file, UAC will record important information about the options used during execution, operating system, system architecture, mount point, configuration loaded from uac.conf file, tools and parameters available on the target system, etc (INF level). Example: 2024-05-23 18:07:12 -0300 INF Unix-like Artifacts Collector 2024-05-23 18:07:12 -0300 INF UAC directory: /tmp/uac 2024-05-23 18:07:12 -0300 INF Command line: ./uac -p ir_triage -u -v /tmp 2024-05-23 18:07:12 -0300 INF Operating system: linux 2024-05-23 18:07:12 -0300 INF System architecture: x86_64 2024-05-23 18:07:12 -0300 INF Hostname: uac-suse-tumbleweed 2024-05-23 18:07:12 -0300 INF Mount point: / 2024-05-23 18:07:12 -0300 INF Running as: uac 2024-05-23 18:07:12 -0300 INF Temp Directory: /tmp/uac/uac-data.tmp 2024-05-23 18:07:12 -0300 INF Output format: tar 2024-05-23 18:07:12 -0300 INF Current PID: 6377 2024-05-23 18:07:12 -0300 INF PATH: /tmp/uac/tools/date_to_epoch_pl:/tmp/uac/tools/find_pl:/tmp/uac/tools/stat_pl:/tmp/uac/tools/statx/linux/x86_64:/tmp/uac/tools/zip/esxi_linux/x86_64:/tmp/uac/bin/linux/x86_64:/tmp/uac/bin/linux:/tmp/uac/bin:/usr/xpg4/bin:/usr/xpg6/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/ucb:/usr/ccs/bin:/opt/bin:/opt/sbin:/opt/local/bin:/snap/bin:/netscaler:/opt/homebrew/bin:/usr/xpg4/bin:/usr/xpg6/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/ucb:/usr/ccs/bin:/opt/bin:/opt/sbin:/opt/local/bin:/snap/bin:/netscaler 2024-05-23 18:07:12 -0300 INF Loading uac.conf settings 2024-05-23 18:07:12 -0300 INF Exclude path pattern: 2024-05-23 18:07:12 -0300 INF Exclude name pattern: 2024-05-23 18:07:12 -0300 INF Exclude file system: 9p|afs|autofs|cifs|davfs|fuse|kernfs|nfs|nfs4|rpc_pipefs|smbfs|sysfs 2024-05-23 18:07:12 -0300 INF Hash algorithm: md5|sha1 2024-05-23 18:07:12 -0300 INF Max depth: 0 2024-05-23 18:07:12 -0300 INF Enable find mtime: true 2024-05-23 18:07:12 -0300 INF Enable find atime: false 2024-05-23 18:07:12 -0300 INF Enable find ctime: true 2024-05-23 18:07:12 -0300 INF Setting up tools and parameters 2024-05-23 18:07:12 -0300 INF find operators support: true 2024-05-23 18:07:12 -0300 INF find -path support: true 2024-05-23 18:07:12 -0300 INF find -size support: true 2024-05-23 18:07:12 -0300 INF find -maxdepth support: true 2024-05-23 18:07:12 -0300 INF find -perm support: true 2024-05-23 18:07:12 -0300 INF find -type support: true 2024-05-23 18:07:12 -0300 INF find -mtime support: true 2024-05-23 18:07:12 -0300 INF find -atime support: true 2024-05-23 18:07:12 -0300 INF find -ctime support: true 2024-05-23 18:07:12 -0300 INF find -print0 support: true When the collection starts, UAC will record each command executed on the target system using the CMD level. 2024-05-23 18:07:12 -0300 INF Artifacts collection started 2024-05-23 18:07:12 -0300 INF Parsing live_response/process/ps.yaml 2024-05-23 18:07:12 -0300 CMD ps 2024-05-23 18:07:12 -0300 CMD ps auxwww 2024-05-23 18:07:12 -0300 CMD ps auxwwwf 2024-05-23 18:07:12 -0300 CMD ps -deaf 2024-05-23 18:07:12 -0300 CMD ps -ef 2024-05-23 18:07:12 -0300 CMD ps -efl 2024-05-23 18:07:12 -0300 CMD ps -eo pid,user,etime,args 2024-05-23 18:07:12 -0300 CMD ps -eo pid,user,lstart,args 2024-05-23 18:07:12 -0300 CMD ps -eo pid,user,cgroup If the executed command generates an error message (stderr), it will be recorded on the same line following the 2> identifier. 2024-05-23 18:07:44 -0300 CMD uptime -s 2> uptime: invalid option -- 's'/nTry 'uptime --help' for more information. 2024-05-23 18:08:04 -0300 CMD fdisk -l 2> fdisk: cannot open /dev/vda: Permission denied Acquisition log The log file generated by UAC after execution provides detailed information about the acquisition process, along with the calculated hash values (e.g., MD5, SHA-1) for the output file to ensure data integrity. Example: Created by UAC (Unix-like Artifacts Collector) [Case Information] Case Number: 42 Evidence Number: 1 Description: Web server quick triage Examiner: Duncan Notes: [System Information] Operating System: linux System Architecture: x86_64 Hostname: webserver01 [Acquisition Information] Mount Point: / Acquisition Started: Mon May 26 20:29:36 2024 -0300 Acquisition Finished: Mon May 26 20:35:56 2024 -0300 [Output Information] File: uac-webserver01-linux-20240526202936.tar.gz Format: tar [Computed Hashes] md5 checksum: 5c5305c81a13efdbb394b588da84951d sha1 checksum: ab46c30b259bcbaa7ee9cdb64cae660d27ab98d2","title":"Log Files"},{"location":"log_files/#log-files","text":"","title":"Log files"},{"location":"log_files/#uaclog","text":"The uac.log file contains a timestamp along with the message level and message displayed. This is the primary log that serves to preserve the actions UAC took while operating. The --debug option affects the level of detail that ends up in this log. When the collection finishes, this log is also archived within the output file. Level Description DBG Debug messages INF Informational messages ERR Error messages CMD Commands executed and their stderr messages At the beginning of the file, UAC will record important information about the options used during execution, operating system, system architecture, mount point, configuration loaded from uac.conf file, tools and parameters available on the target system, etc (INF level). Example: 2024-05-23 18:07:12 -0300 INF Unix-like Artifacts Collector 2024-05-23 18:07:12 -0300 INF UAC directory: /tmp/uac 2024-05-23 18:07:12 -0300 INF Command line: ./uac -p ir_triage -u -v /tmp 2024-05-23 18:07:12 -0300 INF Operating system: linux 2024-05-23 18:07:12 -0300 INF System architecture: x86_64 2024-05-23 18:07:12 -0300 INF Hostname: uac-suse-tumbleweed 2024-05-23 18:07:12 -0300 INF Mount point: / 2024-05-23 18:07:12 -0300 INF Running as: uac 2024-05-23 18:07:12 -0300 INF Temp Directory: /tmp/uac/uac-data.tmp 2024-05-23 18:07:12 -0300 INF Output format: tar 2024-05-23 18:07:12 -0300 INF Current PID: 6377 2024-05-23 18:07:12 -0300 INF PATH: /tmp/uac/tools/date_to_epoch_pl:/tmp/uac/tools/find_pl:/tmp/uac/tools/stat_pl:/tmp/uac/tools/statx/linux/x86_64:/tmp/uac/tools/zip/esxi_linux/x86_64:/tmp/uac/bin/linux/x86_64:/tmp/uac/bin/linux:/tmp/uac/bin:/usr/xpg4/bin:/usr/xpg6/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/ucb:/usr/ccs/bin:/opt/bin:/opt/sbin:/opt/local/bin:/snap/bin:/netscaler:/opt/homebrew/bin:/usr/xpg4/bin:/usr/xpg6/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/ucb:/usr/ccs/bin:/opt/bin:/opt/sbin:/opt/local/bin:/snap/bin:/netscaler 2024-05-23 18:07:12 -0300 INF Loading uac.conf settings 2024-05-23 18:07:12 -0300 INF Exclude path pattern: 2024-05-23 18:07:12 -0300 INF Exclude name pattern: 2024-05-23 18:07:12 -0300 INF Exclude file system: 9p|afs|autofs|cifs|davfs|fuse|kernfs|nfs|nfs4|rpc_pipefs|smbfs|sysfs 2024-05-23 18:07:12 -0300 INF Hash algorithm: md5|sha1 2024-05-23 18:07:12 -0300 INF Max depth: 0 2024-05-23 18:07:12 -0300 INF Enable find mtime: true 2024-05-23 18:07:12 -0300 INF Enable find atime: false 2024-05-23 18:07:12 -0300 INF Enable find ctime: true 2024-05-23 18:07:12 -0300 INF Setting up tools and parameters 2024-05-23 18:07:12 -0300 INF find operators support: true 2024-05-23 18:07:12 -0300 INF find -path support: true 2024-05-23 18:07:12 -0300 INF find -size support: true 2024-05-23 18:07:12 -0300 INF find -maxdepth support: true 2024-05-23 18:07:12 -0300 INF find -perm support: true 2024-05-23 18:07:12 -0300 INF find -type support: true 2024-05-23 18:07:12 -0300 INF find -mtime support: true 2024-05-23 18:07:12 -0300 INF find -atime support: true 2024-05-23 18:07:12 -0300 INF find -ctime support: true 2024-05-23 18:07:12 -0300 INF find -print0 support: true When the collection starts, UAC will record each command executed on the target system using the CMD level. 2024-05-23 18:07:12 -0300 INF Artifacts collection started 2024-05-23 18:07:12 -0300 INF Parsing live_response/process/ps.yaml 2024-05-23 18:07:12 -0300 CMD ps 2024-05-23 18:07:12 -0300 CMD ps auxwww 2024-05-23 18:07:12 -0300 CMD ps auxwwwf 2024-05-23 18:07:12 -0300 CMD ps -deaf 2024-05-23 18:07:12 -0300 CMD ps -ef 2024-05-23 18:07:12 -0300 CMD ps -efl 2024-05-23 18:07:12 -0300 CMD ps -eo pid,user,etime,args 2024-05-23 18:07:12 -0300 CMD ps -eo pid,user,lstart,args 2024-05-23 18:07:12 -0300 CMD ps -eo pid,user,cgroup If the executed command generates an error message (stderr), it will be recorded on the same line following the 2> identifier. 2024-05-23 18:07:44 -0300 CMD uptime -s 2> uptime: invalid option -- 's'/nTry 'uptime --help' for more information. 2024-05-23 18:08:04 -0300 CMD fdisk -l 2> fdisk: cannot open /dev/vda: Permission denied","title":"uac.log"},{"location":"log_files/#acquisition-log","text":"The log file generated by UAC after execution provides detailed information about the acquisition process, along with the calculated hash values (e.g., MD5, SHA-1) for the output file to ensure data integrity. Example: Created by UAC (Unix-like Artifacts Collector) [Case Information] Case Number: 42 Evidence Number: 1 Description: Web server quick triage Examiner: Duncan Notes: [System Information] Operating System: linux System Architecture: x86_64 Hostname: webserver01 [Acquisition Information] Mount Point: / Acquisition Started: Mon May 26 20:29:36 2024 -0300 Acquisition Finished: Mon May 26 20:35:56 2024 -0300 [Output Information] File: uac-webserver01-linux-20240526202936.tar.gz Format: tar [Computed Hashes] md5 checksum: 5c5305c81a13efdbb394b588da84951d sha1 checksum: ab46c30b259bcbaa7ee9cdb64cae660d27ab98d2","title":"Acquisition log"},{"location":"multi_line_command/","text":"Multi-line command Commands can become long and difficult to read. To execute a multi-line command, you need to enter it within a triple-quote string. Multi-line commands are supported in the command , foreach and condition fields. The example below... version: 1.0 artifacts: - description: Collect the command name associated with a process. supported_os: [linux] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: cat /proc/%line%/comm output_directory: /live_response/process/proc/%line% output_file: comm.txt ...can also be defined as: version: 1.0 artifacts: - description: Collect the command name associated with a process. supported_os: [linux] collector: command foreach: \"\"\" for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done \"\"\" command: cat /proc/%line%/comm output_directory: /live_response/process/proc/%line% output_file: comm.txt","title":"Multi-line Command"},{"location":"multi_line_command/#multi-line-command","text":"Commands can become long and difficult to read. To execute a multi-line command, you need to enter it within a triple-quote string. Multi-line commands are supported in the command , foreach and condition fields. The example below... version: 1.0 artifacts: - description: Collect the command name associated with a process. supported_os: [linux] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: cat /proc/%line%/comm output_directory: /live_response/process/proc/%line% output_file: comm.txt ...can also be defined as: version: 1.0 artifacts: - description: Collect the command name associated with a process. supported_os: [linux] collector: command foreach: \"\"\" for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done \"\"\" command: cat /proc/%line%/comm output_directory: /live_response/process/proc/%line% output_file: comm.txt","title":"Multi-line command"},{"location":"output_formats/","text":"Output formats Currently, UAC can collect and store data in 4 different formats: none, tar and zip. The default output format is tar . You can define the output using the --output-format command line option. none Collected data will not be archived or compressed. Instead, it will be copied directly to an output directory. This is useful in cases where the system has no archiving tool available. ./uac -p ir_triage /tmp --output-format none tar Collected data will be archived (and compressed) into a tar file. This is the default output format. ./uac -p ir_triage /tmp zip Collected data will be archived and compressed into a zip file. UAC can also encrypt the contents of the zip archive using a password defined by the --output-password command line option. ./uac -p ir_triage /tmp --output-format zip","title":"Output Formats"},{"location":"output_formats/#output-formats","text":"Currently, UAC can collect and store data in 4 different formats: none, tar and zip. The default output format is tar . You can define the output using the --output-format command line option.","title":"Output formats"},{"location":"output_formats/#none","text":"Collected data will not be archived or compressed. Instead, it will be copied directly to an output directory. This is useful in cases where the system has no archiving tool available. ./uac -p ir_triage /tmp --output-format none","title":"none"},{"location":"output_formats/#tar","text":"Collected data will be archived (and compressed) into a tar file. This is the default output format. ./uac -p ir_triage /tmp","title":"tar"},{"location":"output_formats/#zip","text":"Collected data will be archived and compressed into a zip file. UAC can also encrypt the contents of the zip archive using a password defined by the --output-password command line option. ./uac -p ir_triage /tmp --output-format zip","title":"zip"},{"location":"parsing_uac_output/","text":"Parsing UAC output Using Plaso Plaso is a Python-based backend engine that powers log2timeline. Log2timeline is a tool designed to extract timestamps and forensic artifacts from a computer system to facilitate analysis. It creates what we refer to as a \"Super Timeline\". If you haven't watched it already, there is a great YouTube video by Richard Davis of 13cubed that I suggest you start with. For more information about Plaso please refer to the official documentation page . Plaso in a docker container Obtaining a Plaso docker image docker pull log2timeline/plaso Parsing UAC output file using Plaso First start the extraction with log2timeline. Your UAC output file should be present on the host, and not in the container (which is the default scenario), you\u2019ll have to set up a bridge between the two. For example, if you store your current UAC output file to analyze in /data/uac-testvm-linux-20220204120054.tar.gz , you could tell log2timeline to generate the Plaso storage file as /data/uac-testvm-linux-20220204120054.plaso this way: docker run -v /data:/data log2timeline/plaso:latest log2timeline --storage-file /data/uac-testvm-linux-20220204120054.plaso /data/uac-testvm-linux-20220204120054.tar.gz This way your Plaso file will also be stored on the host filesystem. Run analysis with psort The /data/uac-testvm-linux-20220204120054.plaso file is the database file created by log2timeline, which can be exported to a CSV file (which can be read using ie. Eric Zimmermans timeline explorer ). You need to run psort to create a complete timeline of everything. docker run -v /data:/data log2timeline/plaso:latest psort.py -o l2tcsv /data/uac-testvm-linux-20220204120054.plaso -w /data/uac-testvm-linux-20220204120054.csv Using Magnet AXIOM You can also use Magnet AXIOM to extract timestamps and forensic artifacts from UAC's output file to create Super Timelines. Bodyfile custom artifact It is strongly recommended that you download and install the Bodyfile custom artifact before processing UAC's output file in Magnet AXIOM. This custom artifact parses the bodyfile.txt file generated by UAC. The custom artifact can be downloaded from Magnet Forensics Artifact Exchange page or from here . Parsing UAC output file using Magnet AXIOM In the EVIDENCE SOURCES, load the UAC output file (tar.gz or zip) as a Linux or macOS disk image. In the ARTIFACT DETAILS, click CUSTOMIZE COMPUTER ARTIFACTS. Make sure to select the Bodyfile custom artifact in the CUSTOM ARTIFACTS category. In the PARSE AND CARVE ARTIFACTS, make sure \"Parse and carve selected artifacts\" is selected. Using Cyber Triage Please check the blog post Collecting Linux DFIR Artifacts with UAC .","title":"Parsing UAC output"},{"location":"parsing_uac_output/#parsing-uac-output","text":"","title":"Parsing UAC output"},{"location":"parsing_uac_output/#using-plaso","text":"Plaso is a Python-based backend engine that powers log2timeline. Log2timeline is a tool designed to extract timestamps and forensic artifacts from a computer system to facilitate analysis. It creates what we refer to as a \"Super Timeline\". If you haven't watched it already, there is a great YouTube video by Richard Davis of 13cubed that I suggest you start with. For more information about Plaso please refer to the official documentation page .","title":"Using Plaso"},{"location":"parsing_uac_output/#plaso-in-a-docker-container","text":"","title":"Plaso in a docker container"},{"location":"parsing_uac_output/#obtaining-a-plaso-docker-image","text":"docker pull log2timeline/plaso","title":"Obtaining a Plaso docker image"},{"location":"parsing_uac_output/#parsing-uac-output-file-using-plaso","text":"First start the extraction with log2timeline. Your UAC output file should be present on the host, and not in the container (which is the default scenario), you\u2019ll have to set up a bridge between the two. For example, if you store your current UAC output file to analyze in /data/uac-testvm-linux-20220204120054.tar.gz , you could tell log2timeline to generate the Plaso storage file as /data/uac-testvm-linux-20220204120054.plaso this way: docker run -v /data:/data log2timeline/plaso:latest log2timeline --storage-file /data/uac-testvm-linux-20220204120054.plaso /data/uac-testvm-linux-20220204120054.tar.gz This way your Plaso file will also be stored on the host filesystem.","title":"Parsing UAC output file using Plaso"},{"location":"parsing_uac_output/#run-analysis-with-psort","text":"The /data/uac-testvm-linux-20220204120054.plaso file is the database file created by log2timeline, which can be exported to a CSV file (which can be read using ie. Eric Zimmermans timeline explorer ). You need to run psort to create a complete timeline of everything. docker run -v /data:/data log2timeline/plaso:latest psort.py -o l2tcsv /data/uac-testvm-linux-20220204120054.plaso -w /data/uac-testvm-linux-20220204120054.csv","title":"Run analysis with psort"},{"location":"parsing_uac_output/#using-magnet-axiom","text":"You can also use Magnet AXIOM to extract timestamps and forensic artifacts from UAC's output file to create Super Timelines.","title":"Using Magnet AXIOM"},{"location":"parsing_uac_output/#bodyfile-custom-artifact","text":"It is strongly recommended that you download and install the Bodyfile custom artifact before processing UAC's output file in Magnet AXIOM. This custom artifact parses the bodyfile.txt file generated by UAC. The custom artifact can be downloaded from Magnet Forensics Artifact Exchange page or from here .","title":"Bodyfile custom artifact"},{"location":"parsing_uac_output/#parsing-uac-output-file-using-magnet-axiom","text":"In the EVIDENCE SOURCES, load the UAC output file (tar.gz or zip) as a Linux or macOS disk image. In the ARTIFACT DETAILS, click CUSTOMIZE COMPUTER ARTIFACTS. Make sure to select the Bodyfile custom artifact in the CUSTOM ARTIFACTS category. In the PARSE AND CARVE ARTIFACTS, make sure \"Parse and carve selected artifacts\" is selected.","title":"Parsing UAC output file using Magnet AXIOM"},{"location":"parsing_uac_output/#using-cyber-triage","text":"Please check the blog post Collecting Linux DFIR Artifacts with UAC .","title":"Using Cyber Triage"},{"location":"profiles/","text":"Profiles definition Profiles are used to define the list of artifacts that will be collected during the execution. A profile has two mandatory fields at the top of the file, followed by a set of artifacts that will be used during the collection. Example: name: myprofile description: My profile. artifacts: - live_response/process/ps.yaml - live_response/process/lsof.yaml - bodyfile/bodyfile.yaml - hash_executables/hash_executables.yaml name Required The profile name. This is the name UAC uses to find the correct profile during the script execution. description Required Describes the purpose of the profile as a whole. It should contain all the details about what kind of collection will be performed. No line breaks are supported. artifacts Required This is the set of artifacts that will be used during the collection. All available artifacts are located in the artifacts directory. Artifacts will be executed in the order they are listed in the profile file. The example below shows a profile that will collect the live_response/process/ps.yaml artifact first, followed by the live_response/process/lsof.yaml artifact. name: myprofile description: My profile. artifacts: - live_response/process/ps.yaml - live_response/process/lsof.yaml Wildcards and regex patterns (globbing) are also supported for referring to artifacts. The example below shows a profile that will collect all artifacts located in the live_response/process directory (including subdirectories). In this case, the artifacts will be processed in alphabetical order. name: myprofile description: My profile. artifacts: - live_response/process/* Artifacts can be excluded from the collection by prefixing the artifact path with an exclamation mark (!). The example below shows a profile that will collect all artifacts in the files directory (including subdirectories), except for files/logs/additional_logs.yaml and all artifacts in the files/applications directory. name: myprofile description: My profile. artifacts: - files/* - !files/logs/additional_logs.yaml - !files/applications/* Artifacts located outside the artifacts directory can also be used by specifying their full path. The example below shows a profile that will first collect all artifacts in the live_response/process directory (including subdirectories), followed by a custom artifact located in the /my_artifacts_dir directory. Remember to use the full path for artifacts outside the artifacts directory. name: myprofile description: My profile. artifacts: - live_response/process/* - /my_artifacts_dir/my_artifact.yaml","title":"Profiles"},{"location":"profiles/#profiles-definition","text":"Profiles are used to define the list of artifacts that will be collected during the execution. A profile has two mandatory fields at the top of the file, followed by a set of artifacts that will be used during the collection. Example: name: myprofile description: My profile. artifacts: - live_response/process/ps.yaml - live_response/process/lsof.yaml - bodyfile/bodyfile.yaml - hash_executables/hash_executables.yaml","title":"Profiles definition"},{"location":"profiles/#name","text":"Required The profile name. This is the name UAC uses to find the correct profile during the script execution.","title":"name"},{"location":"profiles/#description","text":"Required Describes the purpose of the profile as a whole. It should contain all the details about what kind of collection will be performed. No line breaks are supported.","title":"description"},{"location":"profiles/#artifacts","text":"Required This is the set of artifacts that will be used during the collection. All available artifacts are located in the artifacts directory. Artifacts will be executed in the order they are listed in the profile file. The example below shows a profile that will collect the live_response/process/ps.yaml artifact first, followed by the live_response/process/lsof.yaml artifact. name: myprofile description: My profile. artifacts: - live_response/process/ps.yaml - live_response/process/lsof.yaml Wildcards and regex patterns (globbing) are also supported for referring to artifacts. The example below shows a profile that will collect all artifacts located in the live_response/process directory (including subdirectories). In this case, the artifacts will be processed in alphabetical order. name: myprofile description: My profile. artifacts: - live_response/process/* Artifacts can be excluded from the collection by prefixing the artifact path with an exclamation mark (!). The example below shows a profile that will collect all artifacts in the files directory (including subdirectories), except for files/logs/additional_logs.yaml and all artifacts in the files/applications directory. name: myprofile description: My profile. artifacts: - files/* - !files/logs/additional_logs.yaml - !files/applications/* Artifacts located outside the artifacts directory can also be used by specifying their full path. The example below shows a profile that will first collect all artifacts in the live_response/process directory (including subdirectories), followed by a custom artifact located in the /my_artifacts_dir directory. Remember to use the full path for artifacts outside the artifacts directory. name: myprofile description: My profile. artifacts: - live_response/process/* - /my_artifacts_dir/my_artifact.yaml","title":"artifacts"},{"location":"using_uac_with_cs_falcon_rtr/","text":"Using UAC with CrowdStrike Falcon Real Time Response With CrowdStrike Falcon Real Time Response (RTR), analysts can remotely access and interact with endpoints in real-time, gaining instant visibility into the system and collecting valuable forensic data by deploying files and running custom scripts. In the instructions below the UAC package (i.e. uac-3.0.0.tar.gz) was stored in the CrowdStrike cloud. This way it can be deployed even if an endpoint is isolated via Network Containment feature. 1. Start by creating a temporary working directory on the live endpoint, then change the working directory to it. /> mkdir /tmp/uac /> cd /tmp/uac 2. Deploy and uncompress the UAC package. /tmp/uac> put \"uac-3.0.0.tar.gz\" /tmp/uac> runscript -Raw=```tar -zxf uac-3.0.0.tar.gz``` -Timeout=60 3. Change the working directory and run the collection. Note that CrowdStrike Falcon RTR session times out after 10 minutes. Make sure to keep the Falcon RTR session active. /tmp/uac> cd uac-3.0.0 /tmp/uac/uac-3.0.0> runscript -Raw=```./uac -p ir_triage /tmp/uac``` -Timeout=9999 4. Upload the output and log files to the CrowdStrike cloud using the get command. /tmp/uac/uac-3.0.0> get \"/tmp/uac/uac-hostname-os-20240707120101.tar.gz\" /tmp/uac/uac-3.0.0> get \"/tmp/uac/uac-hostname-os-20240707120101.log\" Note: The maximum file size for get is 4 GB. When needed, split the files using the split command.","title":"Using UAC with CrowdStrike Falcon Real Time Response"},{"location":"using_uac_with_cs_falcon_rtr/#using-uac-with-crowdstrike-falcon-real-time-response","text":"With CrowdStrike Falcon Real Time Response (RTR), analysts can remotely access and interact with endpoints in real-time, gaining instant visibility into the system and collecting valuable forensic data by deploying files and running custom scripts. In the instructions below the UAC package (i.e. uac-3.0.0.tar.gz) was stored in the CrowdStrike cloud. This way it can be deployed even if an endpoint is isolated via Network Containment feature. 1. Start by creating a temporary working directory on the live endpoint, then change the working directory to it. /> mkdir /tmp/uac /> cd /tmp/uac 2. Deploy and uncompress the UAC package. /tmp/uac> put \"uac-3.0.0.tar.gz\" /tmp/uac> runscript -Raw=```tar -zxf uac-3.0.0.tar.gz``` -Timeout=60 3. Change the working directory and run the collection. Note that CrowdStrike Falcon RTR session times out after 10 minutes. Make sure to keep the Falcon RTR session active. /tmp/uac> cd uac-3.0.0 /tmp/uac/uac-3.0.0> runscript -Raw=```./uac -p ir_triage /tmp/uac``` -Timeout=9999 4. Upload the output and log files to the CrowdStrike cloud using the get command. /tmp/uac/uac-3.0.0> get \"/tmp/uac/uac-hostname-os-20240707120101.tar.gz\" /tmp/uac/uac-3.0.0> get \"/tmp/uac/uac-hostname-os-20240707120101.log\" Note: The maximum file size for get is 4 GB. When needed, split the files using the split command.","title":"Using UAC with CrowdStrike Falcon Real Time Response"}]}