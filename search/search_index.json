{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Unix-like Artifacts Collector documentation UAC is a Live Response collection script for Incident Response that makes use of native binaries and tools to automate the collection of AIX, Android, ESXi, FreeBSD, Linux, macOS, NetBSD, NetScaler, OpenBSD and Solaris systems artifacts. It was created to facilitate and speed up data collection, and depend less on remote support during incident response engagements. UAC reads artifact files on the fly and, based on their contents, collects relevant artifacts. This makes UAC very customizable and extensible. The source code is available from the project page . Main features Run everywhere with no dependencies (no installation required). Customizable and extensible collections and artifacts. Respect the order of volatility during artifact collection. Collect information from processes running without a binary on disk. Hash running processes and executable files. Extract information from files and directories to create a bodyfile (including enhanced file attributes for ext4). Collect user and system configuration files and logs. Collect artifacts from applications. Acquire volatile memory from Linux systems using different methods and tools. Supported operating systems UAC runs on any Unix-like system (regardless of the processor architecture). All UAC needs is shell :) Note that UAC even runs on systems like Network Attached Storage (NAS) devices, Network devices such as OpenWrt, and IoT devices. Command line options UAC is a command line tool, and as such, has several options that can be used to interact with it. It is recommended to run UAC from an external device/usb/network share to avoid overwriting evidence. Usage: ./uac {-p PROFILE | -a ARTIFACTS} DESTINATION [OPTIONS] or: ./uac --validate-artifacts-file FILE Optional Arguments: -h, --help Display this help and exit. -V, --version Output version information and exit. --debug Enable debug mode. Profiling Arguments: -p, --profile PROFILE Specify the collection profile name. Use '--profile list' to list available profiles. -a, --artifacts ARTIFACTS Specify the artifacts to be collected during the collection. The expression is a comma-separated string where each element is an artifact file. Each element can be prepended with an exclamation mark to exclude the artifact. Special characters such as ! and * must be escaped with a backslash. Examples: --artifacts files/logs/\\*,\\!files/logs/var_log.yaml Use '--artifacts list' to list available artifacts. Positional Arguments: DESTINATION Specify the directory the output file should be copied to. Collection Arguments: -m, --mount-point MOUNT_POINT Specify the mount point (default: /). -s, --operating-system OPERATING_SYSTEM Specify the operating system. Options: aix, android, esxi, freebsd, linux, macos, netbsd netscaler, openbsd, solaris -u, --run-as-non-root Disable root user check. Note that data collection may be limited. --hostname HOSTNAME Specify the target system hostname. --temp-dir PATH Write all temporary data to this directory. Filter Arguments: --date-range-start YYYY-MM-DD Only collects files that were last modified/accessed/changed after the given date. --date-range-end YYYY-MM-DD Only collects files that were last modified/accessed/changed before the given date. Informational Arguments: --case-number CASE_NUMBER Specify the case number. --description DESCRIPTION Specify the description. --evidence-number EVIDENCE_NUMBER Specify the evidence number. --examiner EXAMINER Specify the examiner name. --notes NOTES Specify the notes. Remote Transfer Arguments: --sftp SERVER Transfer output file to remote SFTP server. SERVER must be specified in the form [user@]host:[path] --sftp-port PORT Remote SFTP server port (default: 22). --sftp-identity-file FILE File from which the identity (private key) for public key authentication is read. --s3-presigned-url URL Transfer output file to AWS S3 using a pre-signed URL. --s3-presigned-url-log-file URL Transfer log file to AWS S3 using a pre-signed URL. --azure-storage-sas-url URL Transfer output file to Azure Storage using a SAS URL. --azure-storage-sas-url-log-file URL Transfer log file to Azure Storage using a SAS URL. --ibm-cos-url URL Transfer output file to IBM Cloud Object Storage. --ibm-cos-url-log-file URL Transfer log file to IBM Cloud Object Storage. --ibm-cloud-api-key KEY IBM Cloud API key / Bearer token. --delete-local-on-successful-transfer Delete local output and log files on successful transfer. Validation Arguments: --validate-artifacts-file FILE Validate artifacts file. Using UAC UAC does not need to be installed on the target system. You only need to download the latest version from the releases page , uncompress and run it. As simple as that! A profile name and/or a list of artifacts , and the destination directory need to be provided to run a collection. The remaining parameters are optional. You can use as many --artifacts (-a) and --profile (-p) as you want to build an even more customized collection. Artifacts will be collected in the order they were provided in the command line. Note that duplicated artifacts will be collected only once. Full Disk Access permission is a privacy feature introduced in macOS Mojave (10.14) that prevents some applications from accessing important data, such as Mail, Messages, and Safari files. So it is strongly recommended that you manually grant permission for Terminal application before running UAC from the terminal, or grant permission for remote users before running UAC via ssh. Command line options -p, --profile Specify the collection profile name. Profiles are used to define the list of artifacts that will be collected during the execution. They are YAML files located in the profiles directory. Use '--profile list' to list available profiles. Examples: -p ir_triage -p ir_triage -p my_custom_profile -a, --artifacts Specify the artifacts to be collected during the collection. Artifacts are used to define parameters that will be used by a collector to collect data. They are YAML files located in the artifacts directory. You can specify multiple artifacts at once by separating them with a comma (no spaces). Each element can be prepended with an exclamation mark to exclude the artifact. Special characters such as ! and * must be escaped with a backslash. Use '--artifacts list' to list available artifacts. Examples: -a files/logs/\\*,\\!files/logs/var_log.yaml -a artifacts/live_response/\\* -a ./artifacts/files/logs/\\* -a \\!artifacts/files/logs/var_log.yaml DESTINATION The directory where the output and acquisition log files should be copied to. Collection Arguments -m, --mount-point The mount point where the files will be collected from. Default is /. -s, --operating-system This option can be used to force UAC to collect artifacts for a given operating system. By default, UAC will always try to identify the target operating system automatically. Accepted values: aix, android, esxi, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris -u, --run-as-non-root Disable root user check. Note that artifact collection may be limited. --hostname The target system hostname to be used as part of the output file name. By default, UAC will always try to identify the target system's hostname. --temp-dir The directory UAC will use to store temporary data. Filter Arguments --date-range-start Only collects files that were last modified/accessed/changed after the given date. Value needs to be in YYYY-MM-DD format. --date-range-end Only collects files that were last modified/accessed/changed before the given date. Value needs to be in YYYY-MM-DD format. Case information Arguments --case-number The case number. --description The case description. --evidence-number The evidence number. --examiner The examiner's name. --notes The case notes. SFTP Arguments --sftp SFTP server host/IP for transferring the output and acquisition log files. It must be specified in the form [user@]host:[path] --sftp-port SFTP server port. Default is 22. --sftp-identity-file File from which the identity (private key) for public-key authentication is read. S3 Arguments --s3-presigned-url This allows for using a pre-signed URL to upload the output file to S3 (if curl is available). Make sure you generate a PUT URL for this to work. It is strongly recommended to use single quotes to enclose the URL. Example: https://uac-test.s3.amazonaws.com/uac-output.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795 Please refer to AWS documentation page for more information. --s3-presigned-url-log-file This allows for using a pre-signed URL to upload the acquisition log file to S3 (if curl is available). Make sure you generate a PUT URL for this to work. It is strongly recommended to use single quotes to enclose the URL. Example: https://uac-test.s3.amazonaws.com/uac-output.log?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795 Azure Storage Arguments --azure-storage-sas-url This allows for using a shared access signature (SAS) URL to upload the output file to Azure Storage (if curl is available). It is strongly recommended to use single quotes to enclose the URL. Example: https://uac-test.blob.core.windows.net/uac-container/uac-output.tar.gz?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D Please refer to Azure documentation page for more information. --azure-storage-sas-url-log-file This allows for using a shared access signature (SAS) URL to upload the acquisition log file to Azure Storage (if curl is available). It is strongly recommended to use single quotes to enclose the URL. Example: https://uac-test.blob.core.windows.net/uac-container/uac-output.log?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D IBM Cloud Object Storage Arguments --ibm-cos-url This allows uploading the output file to IBM Cloud Object Storage (if curl is available). It is strongly recommended to use single quotes to enclose the URL. Example: https://s3.us-south.cloud-object-storage.appdomain.cloud/uac-test/uac-output.tar.gz Please refer to IBM Cloud documentation page for more information. --ibm-cos-url-log-file This allows uploading the acquisition log file to IBM Cloud Object Storage (if curl is available). It is strongly recommended to use single quotes to enclose the URL. Example: https://s3.us-south.cloud-object-storage.appdomain.cloud/uac-test/uac-output.log --ibm-cloud-api-key IBM Cloud API key / Bearer token required to access the object storage. Example: eyJraWQiOiIyMDIyMDkxMzA4MjciLCJhbGciOiJSUzI1NiJ9.eyJpYW1faWQiOiJJQk1pZC0wNjAwMDFLVVJDIiwiaWQiOiJJQk1pZC0wNjAwMDFLVVJDIiwicmVhbG1pZCI6IklCTWlkIiwianRpIjoiYWVhMDE0MGYtZGM2Ni00MzE0LWJhMjMtZTIxOTAzZmQ3Y2ZhIiwiaWRlbnRpZmllciI6IjA2MDAwMUtVUkMiLCJnaXZlbl9uYW1lIjoiVGhpYWdvIiwiZmFtaWx5X25hbWUiOiJDYW5ve (truncated) Diagnostic Arguments --debug Enable debug mode. This will result in more details as to what UAC is doing in the background as it runs. The messages will be stored in the uac.log.stderr file. Other Arguments --delete-local-on-successful-transfer Delete the local output and acquisition log files if they were successfully transferred to a remote destination such as an SFTP server or S3. Examples Common usage scenarios may include the following: Collect all artifacts based on the full profile, and create the output file in /tmp . ./uac -p full /tmp Collect all live_response , and the bodyfile/bodyfile.yaml artifact, and create the output file in the current directory. ./uac -a live_response/\\*,bodyfile/bodyfile.yaml . Collect all artifacts based on the full profile, but excludes the bodyfile/bodyfile.yaml artifact, and create the output file in /tmp . ./uac -p full -a \\!bodyfile/bodyfile.yaml /tmp Collect the memory dump, then all artifacts based on the full profile. ./uac -a artifacts/memory_dump/avml.yaml -p full /tmp Collect the memory dump, then all artifacts based on the ir_triage profile excluding the bodyfile/bodyfile.yaml artifact. ./uac -a ./artifacts/memory_dump/avml.yaml -p ir_triage -a \\!artifacts/bodyfile/bodyfile.yaml /tmp Collect all artifacts based on the full profile, but limit the data collection based on the date range provided. ./uac -p full /tmp --date-range-start 2021-05-01 --date-range-end 2021-08-31 Collect all but live response artifacts from a Linux disk image mounted in /mnt/ewf . ./uac -p full -a \\!live_response/\\* /tmp --mount-point /mnt/ewf --operating-system linux Validating custom artifacts files It is recommended that you validate your custom artifacts files before running a collection. You can do it using the --validate-artifacts-file option as shown below. ./uac --validate-artifacts-file ./artifacts/files/my_custom_artifact.yaml Using your binary files Place your validated binary files in the [uac_directory]\\bin directory if you want them to be executed instead of the built-in ones provided by the target operating system. UAC will detect and run CPU architecture-specific executable files, so they need to be placed within the following directory structure: [uac_directory]\\bin\\[operating_system]\\[architecture] . Operating system must be one of the following options (in lowercase): android, aix, freebsd, linux, macos, netbsd, netscaler, openbsd or solaris. Architecture is the kernel architecture (in lowercase). It can be retrieved using uname tool. For example: if you have a ss binary for Linux x86_64, it needs to be placed in the [uac_directory]\\bin\\linux\\x86_64 directory. if you have a lsof binary for AIX powerpc, it needs to be placed in the [uac_directory]\\bin\\aix\\powerpc directory. if you have a netstat binary for Android aarch64, it needs to be placed in the [uac_directory]\\bin\\android\\aarch64 directory. Troubleshooting and support Debug mode Debug mode --debug may be useful if you are trying to find the source for an error. When debug mode is on, UAC will use set -x to generate debugging messages and store them in uac.log.stderr file. File an issue on Github If you are a user and you find a bug, please submit an issue . Please try to provide sufficient information for someone else to reproduce the issue. One of the project's maintainers should respond to your issue soon. Please search within our already reported bugs before raising a new one to make sure you're not raising a duplicate. See our Contributing Guide for more information. Community support For additional help, you can use one of the channels to ask a question: Discord (For live discussion with the community and UAC team) GitHub (Bug reports and contributions) Twitter (Get the news fast) Contributing Have you created any artifact files? Please share them with us! You can contribute with new artifacts, profiles, bug fixes or even propose new features. Please read our Contributing Guide before submitting a Pull Request to the project. License The UAC project uses the Apache License Version 2.0 software license.","title":"Getting started"},{"location":"#welcome-to-the-unix-like-artifacts-collector-documentation","text":"UAC is a Live Response collection script for Incident Response that makes use of native binaries and tools to automate the collection of AIX, Android, ESXi, FreeBSD, Linux, macOS, NetBSD, NetScaler, OpenBSD and Solaris systems artifacts. It was created to facilitate and speed up data collection, and depend less on remote support during incident response engagements. UAC reads artifact files on the fly and, based on their contents, collects relevant artifacts. This makes UAC very customizable and extensible. The source code is available from the project page .","title":"Welcome to the Unix-like Artifacts Collector documentation"},{"location":"#main-features","text":"Run everywhere with no dependencies (no installation required). Customizable and extensible collections and artifacts. Respect the order of volatility during artifact collection. Collect information from processes running without a binary on disk. Hash running processes and executable files. Extract information from files and directories to create a bodyfile (including enhanced file attributes for ext4). Collect user and system configuration files and logs. Collect artifacts from applications. Acquire volatile memory from Linux systems using different methods and tools.","title":"Main features"},{"location":"#supported-operating-systems","text":"UAC runs on any Unix-like system (regardless of the processor architecture). All UAC needs is shell :) Note that UAC even runs on systems like Network Attached Storage (NAS) devices, Network devices such as OpenWrt, and IoT devices.","title":"Supported operating systems"},{"location":"#command-line-options","text":"UAC is a command line tool, and as such, has several options that can be used to interact with it. It is recommended to run UAC from an external device/usb/network share to avoid overwriting evidence. Usage: ./uac {-p PROFILE | -a ARTIFACTS} DESTINATION [OPTIONS] or: ./uac --validate-artifacts-file FILE Optional Arguments: -h, --help Display this help and exit. -V, --version Output version information and exit. --debug Enable debug mode. Profiling Arguments: -p, --profile PROFILE Specify the collection profile name. Use '--profile list' to list available profiles. -a, --artifacts ARTIFACTS Specify the artifacts to be collected during the collection. The expression is a comma-separated string where each element is an artifact file. Each element can be prepended with an exclamation mark to exclude the artifact. Special characters such as ! and * must be escaped with a backslash. Examples: --artifacts files/logs/\\*,\\!files/logs/var_log.yaml Use '--artifacts list' to list available artifacts. Positional Arguments: DESTINATION Specify the directory the output file should be copied to. Collection Arguments: -m, --mount-point MOUNT_POINT Specify the mount point (default: /). -s, --operating-system OPERATING_SYSTEM Specify the operating system. Options: aix, android, esxi, freebsd, linux, macos, netbsd netscaler, openbsd, solaris -u, --run-as-non-root Disable root user check. Note that data collection may be limited. --hostname HOSTNAME Specify the target system hostname. --temp-dir PATH Write all temporary data to this directory. Filter Arguments: --date-range-start YYYY-MM-DD Only collects files that were last modified/accessed/changed after the given date. --date-range-end YYYY-MM-DD Only collects files that were last modified/accessed/changed before the given date. Informational Arguments: --case-number CASE_NUMBER Specify the case number. --description DESCRIPTION Specify the description. --evidence-number EVIDENCE_NUMBER Specify the evidence number. --examiner EXAMINER Specify the examiner name. --notes NOTES Specify the notes. Remote Transfer Arguments: --sftp SERVER Transfer output file to remote SFTP server. SERVER must be specified in the form [user@]host:[path] --sftp-port PORT Remote SFTP server port (default: 22). --sftp-identity-file FILE File from which the identity (private key) for public key authentication is read. --s3-presigned-url URL Transfer output file to AWS S3 using a pre-signed URL. --s3-presigned-url-log-file URL Transfer log file to AWS S3 using a pre-signed URL. --azure-storage-sas-url URL Transfer output file to Azure Storage using a SAS URL. --azure-storage-sas-url-log-file URL Transfer log file to Azure Storage using a SAS URL. --ibm-cos-url URL Transfer output file to IBM Cloud Object Storage. --ibm-cos-url-log-file URL Transfer log file to IBM Cloud Object Storage. --ibm-cloud-api-key KEY IBM Cloud API key / Bearer token. --delete-local-on-successful-transfer Delete local output and log files on successful transfer. Validation Arguments: --validate-artifacts-file FILE Validate artifacts file.","title":"Command line options"},{"location":"#using-uac","text":"UAC does not need to be installed on the target system. You only need to download the latest version from the releases page , uncompress and run it. As simple as that! A profile name and/or a list of artifacts , and the destination directory need to be provided to run a collection. The remaining parameters are optional. You can use as many --artifacts (-a) and --profile (-p) as you want to build an even more customized collection. Artifacts will be collected in the order they were provided in the command line. Note that duplicated artifacts will be collected only once. Full Disk Access permission is a privacy feature introduced in macOS Mojave (10.14) that prevents some applications from accessing important data, such as Mail, Messages, and Safari files. So it is strongly recommended that you manually grant permission for Terminal application before running UAC from the terminal, or grant permission for remote users before running UAC via ssh.","title":"Using UAC"},{"location":"#command-line-options_1","text":"-p, --profile Specify the collection profile name. Profiles are used to define the list of artifacts that will be collected during the execution. They are YAML files located in the profiles directory. Use '--profile list' to list available profiles. Examples: -p ir_triage -p ir_triage -p my_custom_profile -a, --artifacts Specify the artifacts to be collected during the collection. Artifacts are used to define parameters that will be used by a collector to collect data. They are YAML files located in the artifacts directory. You can specify multiple artifacts at once by separating them with a comma (no spaces). Each element can be prepended with an exclamation mark to exclude the artifact. Special characters such as ! and * must be escaped with a backslash. Use '--artifacts list' to list available artifacts. Examples: -a files/logs/\\*,\\!files/logs/var_log.yaml -a artifacts/live_response/\\* -a ./artifacts/files/logs/\\* -a \\!artifacts/files/logs/var_log.yaml DESTINATION The directory where the output and acquisition log files should be copied to.","title":"Command line options"},{"location":"#collection-arguments","text":"-m, --mount-point The mount point where the files will be collected from. Default is /. -s, --operating-system This option can be used to force UAC to collect artifacts for a given operating system. By default, UAC will always try to identify the target operating system automatically. Accepted values: aix, android, esxi, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris -u, --run-as-non-root Disable root user check. Note that artifact collection may be limited. --hostname The target system hostname to be used as part of the output file name. By default, UAC will always try to identify the target system's hostname. --temp-dir The directory UAC will use to store temporary data.","title":"Collection Arguments"},{"location":"#filter-arguments","text":"--date-range-start Only collects files that were last modified/accessed/changed after the given date. Value needs to be in YYYY-MM-DD format. --date-range-end Only collects files that were last modified/accessed/changed before the given date. Value needs to be in YYYY-MM-DD format.","title":"Filter Arguments"},{"location":"#case-information-arguments","text":"--case-number The case number. --description The case description. --evidence-number The evidence number. --examiner The examiner's name. --notes The case notes.","title":"Case information Arguments"},{"location":"#sftp-arguments","text":"--sftp SFTP server host/IP for transferring the output and acquisition log files. It must be specified in the form [user@]host:[path] --sftp-port SFTP server port. Default is 22. --sftp-identity-file File from which the identity (private key) for public-key authentication is read.","title":"SFTP Arguments"},{"location":"#s3-arguments","text":"--s3-presigned-url This allows for using a pre-signed URL to upload the output file to S3 (if curl is available). Make sure you generate a PUT URL for this to work. It is strongly recommended to use single quotes to enclose the URL. Example: https://uac-test.s3.amazonaws.com/uac-output.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795 Please refer to AWS documentation page for more information. --s3-presigned-url-log-file This allows for using a pre-signed URL to upload the acquisition log file to S3 (if curl is available). Make sure you generate a PUT URL for this to work. It is strongly recommended to use single quotes to enclose the URL. Example: https://uac-test.s3.amazonaws.com/uac-output.log?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795","title":"S3 Arguments"},{"location":"#azure-storage-arguments","text":"--azure-storage-sas-url This allows for using a shared access signature (SAS) URL to upload the output file to Azure Storage (if curl is available). It is strongly recommended to use single quotes to enclose the URL. Example: https://uac-test.blob.core.windows.net/uac-container/uac-output.tar.gz?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D Please refer to Azure documentation page for more information. --azure-storage-sas-url-log-file This allows for using a shared access signature (SAS) URL to upload the acquisition log file to Azure Storage (if curl is available). It is strongly recommended to use single quotes to enclose the URL. Example: https://uac-test.blob.core.windows.net/uac-container/uac-output.log?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D","title":"Azure Storage Arguments"},{"location":"#ibm-cloud-object-storage-arguments","text":"--ibm-cos-url This allows uploading the output file to IBM Cloud Object Storage (if curl is available). It is strongly recommended to use single quotes to enclose the URL. Example: https://s3.us-south.cloud-object-storage.appdomain.cloud/uac-test/uac-output.tar.gz Please refer to IBM Cloud documentation page for more information. --ibm-cos-url-log-file This allows uploading the acquisition log file to IBM Cloud Object Storage (if curl is available). It is strongly recommended to use single quotes to enclose the URL. Example: https://s3.us-south.cloud-object-storage.appdomain.cloud/uac-test/uac-output.log --ibm-cloud-api-key IBM Cloud API key / Bearer token required to access the object storage. Example: eyJraWQiOiIyMDIyMDkxMzA4MjciLCJhbGciOiJSUzI1NiJ9.eyJpYW1faWQiOiJJQk1pZC0wNjAwMDFLVVJDIiwiaWQiOiJJQk1pZC0wNjAwMDFLVVJDIiwicmVhbG1pZCI6IklCTWlkIiwianRpIjoiYWVhMDE0MGYtZGM2Ni00MzE0LWJhMjMtZTIxOTAzZmQ3Y2ZhIiwiaWRlbnRpZmllciI6IjA2MDAwMUtVUkMiLCJnaXZlbl9uYW1lIjoiVGhpYWdvIiwiZmFtaWx5X25hbWUiOiJDYW5ve (truncated)","title":"IBM Cloud Object Storage Arguments"},{"location":"#diagnostic-arguments","text":"--debug Enable debug mode. This will result in more details as to what UAC is doing in the background as it runs. The messages will be stored in the uac.log.stderr file.","title":"Diagnostic Arguments"},{"location":"#other-arguments","text":"--delete-local-on-successful-transfer Delete the local output and acquisition log files if they were successfully transferred to a remote destination such as an SFTP server or S3.","title":"Other Arguments"},{"location":"#examples","text":"Common usage scenarios may include the following: Collect all artifacts based on the full profile, and create the output file in /tmp . ./uac -p full /tmp Collect all live_response , and the bodyfile/bodyfile.yaml artifact, and create the output file in the current directory. ./uac -a live_response/\\*,bodyfile/bodyfile.yaml . Collect all artifacts based on the full profile, but excludes the bodyfile/bodyfile.yaml artifact, and create the output file in /tmp . ./uac -p full -a \\!bodyfile/bodyfile.yaml /tmp Collect the memory dump, then all artifacts based on the full profile. ./uac -a artifacts/memory_dump/avml.yaml -p full /tmp Collect the memory dump, then all artifacts based on the ir_triage profile excluding the bodyfile/bodyfile.yaml artifact. ./uac -a ./artifacts/memory_dump/avml.yaml -p ir_triage -a \\!artifacts/bodyfile/bodyfile.yaml /tmp Collect all artifacts based on the full profile, but limit the data collection based on the date range provided. ./uac -p full /tmp --date-range-start 2021-05-01 --date-range-end 2021-08-31 Collect all but live response artifacts from a Linux disk image mounted in /mnt/ewf . ./uac -p full -a \\!live_response/\\* /tmp --mount-point /mnt/ewf --operating-system linux","title":"Examples"},{"location":"#validating-custom-artifacts-files","text":"It is recommended that you validate your custom artifacts files before running a collection. You can do it using the --validate-artifacts-file option as shown below. ./uac --validate-artifacts-file ./artifacts/files/my_custom_artifact.yaml","title":"Validating custom artifacts files"},{"location":"#using-your-binary-files","text":"Place your validated binary files in the [uac_directory]\\bin directory if you want them to be executed instead of the built-in ones provided by the target operating system. UAC will detect and run CPU architecture-specific executable files, so they need to be placed within the following directory structure: [uac_directory]\\bin\\[operating_system]\\[architecture] . Operating system must be one of the following options (in lowercase): android, aix, freebsd, linux, macos, netbsd, netscaler, openbsd or solaris. Architecture is the kernel architecture (in lowercase). It can be retrieved using uname tool. For example: if you have a ss binary for Linux x86_64, it needs to be placed in the [uac_directory]\\bin\\linux\\x86_64 directory. if you have a lsof binary for AIX powerpc, it needs to be placed in the [uac_directory]\\bin\\aix\\powerpc directory. if you have a netstat binary for Android aarch64, it needs to be placed in the [uac_directory]\\bin\\android\\aarch64 directory.","title":"Using your binary files"},{"location":"#troubleshooting-and-support","text":"","title":"Troubleshooting and support"},{"location":"#debug-mode","text":"Debug mode --debug may be useful if you are trying to find the source for an error. When debug mode is on, UAC will use set -x to generate debugging messages and store them in uac.log.stderr file.","title":"Debug mode"},{"location":"#file-an-issue-on-github","text":"If you are a user and you find a bug, please submit an issue . Please try to provide sufficient information for someone else to reproduce the issue. One of the project's maintainers should respond to your issue soon. Please search within our already reported bugs before raising a new one to make sure you're not raising a duplicate. See our Contributing Guide for more information.","title":"File an issue on Github"},{"location":"#community-support","text":"For additional help, you can use one of the channels to ask a question: Discord (For live discussion with the community and UAC team) GitHub (Bug reports and contributions) Twitter (Get the news fast)","title":"Community support"},{"location":"#contributing","text":"Have you created any artifact files? Please share them with us! You can contribute with new artifacts, profiles, bug fixes or even propose new features. Please read our Contributing Guide before submitting a Pull Request to the project.","title":"Contributing"},{"location":"#license","text":"The UAC project uses the Apache License Version 2.0 software license.","title":"License"},{"location":"artifacts_file/","text":"Artifacts file definition Artifacts are used to define parameters that will be used by a collector to collect data. They are YAML files located in the artifacts directory. Artifacts files should always be created for artifacts that can be grouped together. For instance, artifacts related to ps command should be put all in the same file. This makes artifacts collection to be more granular depending on the case you are working on. UAC reads artifacts files on the fly and, based on their contents, collects relevant artifacts using one of the 5 available collectors . The example below contains 2 sets of rules, the first one uses the hash collector, and the second one uses the command collector to collect the artifacts. version: 1.0 artifacts: - description: Hash running processes. supported_os: [aix] collector: hash path: /proc/[0-9]*/object/a.out output_file: hash_running_processes - description: Collect running processes executable path. supported_os: [freebsd, macos, openbsd] collector: command command: ps -eo args | grep ^/ | awk '{print $1}' | sort -u output_file: hash_running_processes_full_paths.txt An artifact file has one required field at the top of the file version , followed by a set of rules artifacts that will be used by one of the collectors to collect the desired data. version Required The artifact file version. It needs to be updated every time a new artifact is added or changed. artifacts Required Set of rules (sequence of mappings) that define what artifact will be collected. An artifact rule has three mandatory fields description , supported_os and collector , followed by additional fields depending on the collector chosen. artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command ... # additional options depending on the collector - description: Hash files that contain at least +x flag set for owner. supported_os: [all] collector: hash ... # additional options depending on the collector - description: Collect /var/log logs. supported_os: [all] collector: file ... # additional options depending on the collector description Required One-line description of what will be collected. No line breaks supported. supported_os Required List of operating systems that the artifact applies to. Use all if the artifact applies to all operating systems. The currently supported operating systems are (case sensitive): Value Description aix Artifact applies to AIX systems. android Artifact applies to Android systems. esxi Artifact applies to ESXi systems. freebsd Artifact applies to FreeBSD systems. linux Artifact applies to Linux systems. macos Artifact applies to macOS systems. netbsd Artifact applies to NetBSD systems. netscaler Artifact applies to NetScaler systems. openbsd Artifact applies to OpenBSD systems. solaris Artifact applies to Solaris systems. Examples: Artifact applies to all supported operating systems: artifacts: - description: Artifact description. supported_os: [all] collector: hash ... # additional options depending on the collector Artifact applies to Aix, FreeBSD and Solaris systems only: artifacts: - description: Artifact description. supported_os: [aix, freebsd, solaris] collector: stat ... # additional options depending on the collector collector Required UAC uses collectors to collect artifacts. Each collector is used for a specific function and requires its own options. Please check the collectors page for more details. Value Description command Use this collector to run commands and store the output into an output file. find Use this collector to find files and directories using either find or find.pl tool, and store the output into a text file. hash Use this collector to hash files and store the output into a text file. stat Use this collector to extract information from files and directories using either stat or stat.pl tool to create a body file. file Use this collector to collect files and directories.","title":"Artifacts file"},{"location":"artifacts_file/#artifacts-file-definition","text":"Artifacts are used to define parameters that will be used by a collector to collect data. They are YAML files located in the artifacts directory. Artifacts files should always be created for artifacts that can be grouped together. For instance, artifacts related to ps command should be put all in the same file. This makes artifacts collection to be more granular depending on the case you are working on. UAC reads artifacts files on the fly and, based on their contents, collects relevant artifacts using one of the 5 available collectors . The example below contains 2 sets of rules, the first one uses the hash collector, and the second one uses the command collector to collect the artifacts. version: 1.0 artifacts: - description: Hash running processes. supported_os: [aix] collector: hash path: /proc/[0-9]*/object/a.out output_file: hash_running_processes - description: Collect running processes executable path. supported_os: [freebsd, macos, openbsd] collector: command command: ps -eo args | grep ^/ | awk '{print $1}' | sort -u output_file: hash_running_processes_full_paths.txt An artifact file has one required field at the top of the file version , followed by a set of rules artifacts that will be used by one of the collectors to collect the desired data.","title":"Artifacts file definition"},{"location":"artifacts_file/#version","text":"Required The artifact file version. It needs to be updated every time a new artifact is added or changed.","title":"version"},{"location":"artifacts_file/#artifacts","text":"Required Set of rules (sequence of mappings) that define what artifact will be collected. An artifact rule has three mandatory fields description , supported_os and collector , followed by additional fields depending on the collector chosen. artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command ... # additional options depending on the collector - description: Hash files that contain at least +x flag set for owner. supported_os: [all] collector: hash ... # additional options depending on the collector - description: Collect /var/log logs. supported_os: [all] collector: file ... # additional options depending on the collector","title":"artifacts"},{"location":"artifacts_file/#description","text":"Required One-line description of what will be collected. No line breaks supported.","title":"description"},{"location":"artifacts_file/#supported_os","text":"Required List of operating systems that the artifact applies to. Use all if the artifact applies to all operating systems. The currently supported operating systems are (case sensitive): Value Description aix Artifact applies to AIX systems. android Artifact applies to Android systems. esxi Artifact applies to ESXi systems. freebsd Artifact applies to FreeBSD systems. linux Artifact applies to Linux systems. macos Artifact applies to macOS systems. netbsd Artifact applies to NetBSD systems. netscaler Artifact applies to NetScaler systems. openbsd Artifact applies to OpenBSD systems. solaris Artifact applies to Solaris systems. Examples: Artifact applies to all supported operating systems: artifacts: - description: Artifact description. supported_os: [all] collector: hash ... # additional options depending on the collector Artifact applies to Aix, FreeBSD and Solaris systems only: artifacts: - description: Artifact description. supported_os: [aix, freebsd, solaris] collector: stat ... # additional options depending on the collector","title":"supported_os"},{"location":"artifacts_file/#collector","text":"Required UAC uses collectors to collect artifacts. Each collector is used for a specific function and requires its own options. Please check the collectors page for more details. Value Description command Use this collector to run commands and store the output into an output file. find Use this collector to find files and directories using either find or find.pl tool, and store the output into a text file. hash Use this collector to hash files and store the output into a text file. stat Use this collector to extract information from files and directories using either stat or stat.pl tool to create a body file. file Use this collector to collect files and directories.","title":"collector"},{"location":"collectors/","text":"Collectors command collector Use this collector to run commands and store the output into an output file. artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_file: ps.txt - description: Report a snapshot of the current processes. supported_os: [aix, freebsd, linux, macos, netbsd, openbsd, solaris] collector: command command: ps auxwww output_file: ps_auxwww.txt - description: Extract strings from running processes. supported_os: [aix] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: strings -a /proc/%line%/object/a.out output_directory: proc/%line% output_file: strings.txt compress_output_file: true command Required The command will be run in the target system and the output will be collected from it. The path to the executable is not required. Only the name of the executable and the parameters should be given. UAC can also run executables located in the bin directory. Even in this case, the path to the executable is not required. The bin directory is always added to PATH when UAC starts. Please refer to bin/README.md file for more information. The example below shows how to collect the output from ps -ef command: artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps -ef output_file: ps_-ef.txt foreach Optional The command that will be run and the output lines will be used as the input for the command option. The logic behind it is: for (each line returned by foreach); do command done There is one variable that can be used that will be replaced by UAC at runtime: VARIABLE NAME DESCRIPTION %line% Replaced with each line returned by the execution of the foreach command Let's suppose you need to collect container logs, and you don't know the container IDs. First, you need to retrieve all the IDs: docker container ps -all | sed 1d | awk '{print $1}' The %line% variable will be replaced by each output line resulting from that command (which are container IDs in the example above). This means if you have 10 containers, the command docker container logs %line% will be run 10 times, one for each container ID. Example: artifacts: - description: Fetch the logs of all containers. supported_os: [linux] collector: command foreach: docker container ps -all | sed 1d | awk '{print $1}' command: docker container logs %line% output_file: docker_container_logs_%line%.txt output_file Required Output file name where collected data will be stored in. UAC never overwrites output files. Data will be appended to the file if the same file name is set for a different artifact rule within the same artifact directory. Both ps and ps auxwww outputs will be stored in the same ps.txt file in the example below. Note that any standard error message (coming from stderr stream) will be stored in ps.txt.stderr file. artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_file: ps.txt - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps auxwww output_file: ps.txt output_directory Optional Defines the subdirectory name the output file will be stored in. By default, collected artifacts will always be stored in a directory whose path follows the same structure defined in the artifacts directory. In the example below, the output file created by bodyfile.yaml will be stored into bodyfile directory, and the output files created by docker.yaml will be stored into live_response/containers directory. But in some cases, it is preferred to have the output file stored in subdirectories. Let's use the live_response/process/string_running_processes.yaml as an example where the output file is stored into live_response/process/proc/%line% subdirectory. artifacts: - description: Extract strings from running processes. supported_os: [android, linux, netbsd] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: strings -a /proc/%line%/exe output_directory: proc/%line% output_file: strings.txt compress_output_file: true stderr_output_file Optional Use this option to define a custom stderr file name. Standard error messages (coming from stderr stream) will be stored in the custom.txt.stderr file in the example below. artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_file: ps.txt stderr_output_file: custom.txt.stderr compressed_output_file Optional The output file will be compressed by gzip if this option is set to true . The following artifact will have its output stored into the compressed output file ps_-ef.txt.gz in the example below. artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps -ef output_file: ps_-ef.txt compress_output_file: true exclude_nologin_users Optional Use this option to search artifacts from users that have a valid shell only. Any user that has no shell or a shell set as false, halt, nologin, shutdown or sync will be skipped from the collection. artifacts: - description: Run 'ls -lRa' on all home directories for users that have a valid shell only. supported_os: [all] collector: command command: ls -lRa /%user_home%/ exclude_nologin_users: true output_file: ls_-lRa_%user%.txt find collector Use this collector to find files and directories using either find or find.pl tool, and store the output into a text file. artifacts: - description: Find files that contain at least +x flag set for other. supported_os: [all] collector: find path: / exclude_file_system: [proc, procfs] file_type: f max_depth: 4 max_file_size: 3072000 permissions: -001 output_file: list_of_executable_files.txt path Required The starting point from where the artifact will be searched for. UAC will recurse into subdirectories unless otherwise prevented by max_depth option. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. Every artifact should be treated like it originates on the / (root) mount point. The root mount point will be replaced by UAC if a new mount point is set with --mount-point command line option. artifacts: - description: Search all cmdline files within /proc/*/ supported_os: [all] collector: find path: /proc/*/cmdline output_file: cmdline.txt Search all files and directories within /etc . Note the use of a * at the end of the path. artifacts: - description: Search all files and directories within /etc. supported_os: [all] collector: find path: /etc output_file: etc.txt Note that you need to use quotation marks when specifying paths with spaces. artifacts: - description: Search for TCC.db file. supported_os: [all] collector: find path: /Library/\"Application Support\"/com.apple.TCC/TCC.db output_file: path_with_spaces.txt path_pattern Optional Return the full file path if one of the path_pattern values matches the file path. This option works the same way as find's -path option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. The example below searches for Discord's Cache directory anywhere within the user's home directory. Hits would be as follows: /home/user/.config /discord/Cache/ 00bcecbd2455cb22_0 /home/user/.var/app/com.discordapp.Discord/config /discord/Cache/ index /home/user/snap/discord/current/.config /discord/Cache/ ac0fa118bdaaa62e_0 artifacts: - description: Find Discord cache files. supported_os: [all] collector: find path: /%user_home% path_pattern: [\"*/discord/Cache/*\"] output_file: discord_cache.txt name_pattern Optional Return the full file path if one of the name_pattern values matches the file name. This option works the same way as find's -name option. Because the leading directories are removed, the file names considered for a match with name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. artifacts: - description: Search all wtmp and utmp files. supported_os: [all] collector: find path: /var name_pattern: [\"wtmp\", \"btmp\"] output_file: wtmp_btmp.txt As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Search all HTML and TXT files. supported_os: [all] collector: find path: / name_pattern: [\"*.html\", \"*.txt\"] output_file: all_html_txt.txt artifacts: - description: Search all .log and .Log (capital L) files. supported_os: [all] collector: find path: /var/log name_pattern: [\"*.[Ll]og\"] output_file: all_log_files.txt exclude_path_pattern Optional Use this option to exclude paths from the collection. This option works the same way as find's -path -prune option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Search all excluding /etc and /var. supported_os: [all] collector: find path: / exclude_path_pattern: [\"/dev\", \"/var\"] output_file: all_excluding_etc_var.txt exclude_name_pattern Optional Use this option to exclude files from the collection. This option works the same way as find's -name -prune option. Because the leading directories are removed, the file names considered for a match with exclude_name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Search /etc excluding passwd and shadow* files. supported_os: [all] collector: find path: /etc exclude_name_pattern: [\"passwd\", \"shadow*\"] output_file: etc_excluding_passwd_shadow.txt exclude_file_system Optional Use this option to exclude file systems from the collection. UAC will retrieve the list of existing mountpoints (paths) and exclude them from the collection. The file system types which are supported depend on the target computer's running kernel. artifacts: - description: Search all files excluding any files located in procfs, nfs and devfs file systems. supported_os: [all] collector: find path: / exclude_file_system: [procfs, nfs, devfs] output_file: exclude_procfs_nfs_devfs.txt max_depth Optional Descend at most levels (a non-negative integer) levels of directories below the starting-point. Using 0 means only applying the tests and actions to the starting-points themselves. This option works the same way as find's -maxdepth option. artifacts: - description: Descend at most 5 levels of directories below /. supported_os: [all] collector: find path: / max_depth: 5 output_file: max_5_levels.txt file_type Optional This option works the same way as find's -type option. File is of type: Value Description f regular file d directory l symbolic link p named pipe (FIFO) s socket b block special c character special artifacts: - description: Search files only. supported_os: [all] collector: find path: / file_type: f output_file: files_only.txt artifacts: - description: Search directories only. supported_os: [all] collector: find path: / file_type: d output_file: directories_only.txt min_file_size Optional The minimum size of a file to search in bytes. Any files smaller than this will be ignored. artifacts: - description: Search all files bigger than 1048576 bytes. supported_os: [all] collector: find path: / file_type: f min_file_size: 1048576 output_file: bigger_than.txt max_file_size Optional The maximum size of a file to search in bytes. Any files bigger than this will be ignored. artifacts: - description: Search all files smaller than 1048576 bytes. supported_os: [all] collector: find path: / file_type: f max_file_size: 1048576 output_file: smaller_than.txt permissions Optional Use this option to search for files and directories based on their permissions. This option works the same way as find's -perm option. Please note that symbolic mode is not supported (e.g: -g=w). Permissions can be used as follows: File's permission bits are exactly mode (octal). artifacts: - description: Search files that have permissions set to 755. supported_os: [all] collector: find path: / file_type: f permissions: 755 output_file: all_755_permissions.txt All of the permission bits mode (octal) are set for the file. artifacts: - description: Search for files that have SUID bit set. supported_os: [all] collector: find path: / file_type: f permissions: -4000 output_file: suid_files.txt ignore_date_range Optional Use this option to collect files ignoring the date set using both --date-range-start and --date-range-end command line options. This is useful when you want to set a date range for your collection, but want to collect some files regardless of their last accessed, modified and changed dates. For example, search for all files and subdirectories from /etc regardless of their last accessed, modified and changed dates, even if a date range was set using --date-range-start and --date-range-end command line options. artifacts: - description: Search /etc regardless date range set by --date-range-start and --date-range-end. supported_os: [all] collector: find path: /etc ignore_date_range: true output_file: ignore_date_range.txt exclude_nologin_users Optional Use this option to search artifacts from users that have a valid shell only. Any user that has no shell or a shell set as false, halt, nologin, shutdown or sync will be skipped from the collection. artifacts: - description: Collect .bash_history file from users that have a valid shell only. supported_os: [all] collector: find path: /%user_home%/.bash_history exclude_nologin_users: true output_file: exclude_nologin_users.txt output_file Required Output file name where the list of files will be stored in. UAC never overwrites output files. Data will be appended to the file if the same file name is set for a different artifact rule within the same artifact directory. Note that in the example below, any standard error message (coming from stderr stream) will be stored in same_output_file.txt.stderr file. artifacts: - description: Search all files and directories from /etc. supported_os: [all] collector: find path: /etc output_file: same_output_file.txt - description: Search all files and directories from /var/log. supported_os: [all] collector: find path: /var/log output_file: same_output_file.txt output_directory Optional Defines the subdirectory name the output file will be stored in. By default, collected artifacts will always be stored in a directory whose path follows the same structure defined in the artifacts directory. In the example below, the output file created by bodyfile.yaml will be stored in bodyfile directory, and the output files created by docker.yaml will be stored in live_response/containers directory. But in some cases, it is preferred to have the output file stored in subdirectories. Let's use the live_response/process/string_running_processes.yaml as an example where the output file is stored into live_response/process/proc/%line% subdirectory. artifacts: - description: Extract strings from running processes. supported_os: [android, linux, netbsd] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: strings -a /proc/%line%/exe output_directory: proc/%line% output_file: strings.txt compress_output_file: true stderr_output_file Optional Use this option to define a custom stderr file name. Standard error messages (coming from stderr stream) will be stored in the custom.txt.stderr file in the example below. artifacts: - description: List all socket files. supported_os: [all] collector: find path: / file_type: s exclude_file_system: [proc, procfs] output_file: socket_files.txt stderr_output_file: custom.txt.stderr hash collector Use this collector to hash files and store the output into a text file. Hash algorithms that will be used during collection are defined in config/uac.conf file. artifacts: - description: Hash all files smaller than 3072000 bytes. supported_os: [all] collector: hash path: / exclude_file_system: [proc, procfs] file_type: f max_depth: 4 max_file_size: 3072000 output_file: hash.txt path Required The starting point from where the files will be searched for. UAC will recurse into subdirectories unless otherwise prevented by max_depth option. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. Every file should be treated like it originates on the / (root) mount point. The root mount point will be replaced by UAC if a new mount point is set with --mount-point command line option. artifacts: - description: Hash /bin/sh file. supported_os: [all] collector: hash path: /bin/sh output_file: hash_bin_sh.txt Hash all files within /etc . Note the use of a * at the end of the path. artifacts: - description: Hash all files and directories within /etc. supported_os: [all] collector: hash path: /etc output_file: hashes_etc.txt Note that you need to use quotation marks when specifying paths with spaces. artifacts: - description: Hash TCC.db file. supported_os: [all] collector: hash path: /Library/\"Application Support\"/com.apple.TCC/TCC.db output_file: path_with_spaces.txt is_file_list Optional If set to true, the path option will refer to a file list containing one path per line. This is useful when you need to hash files based on a file list. artifacts: - description: Hash files based on a file list located in /%uac_directory%/my_file_list.txt. supported_os: [all] collector: hash path: /%uac_directory%/my_file_list.txt is_file_list: true output_file: hash_my_file_list.txt path_pattern Optional Return the full file path if one of the path_pattern values matches the file path. This option works the same way as find's -path option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. The example below searches for Discord's Cache directory anywhere within the user's home directory. Hits would be as follows: /home/user/.config /discord/Cache/ 00bcecbd2455cb22_0 /home/user/.var/app/com.discordapp.Discord/config /discord/Cache/ index /home/user/snap/discord/current/.config /discord/Cache/ ac0fa118bdaaa62e_0 artifacts: - description: Find Discord cache files. supported_os: [all] collector: hash path: /%user_home% path_pattern: [\"*/discord/Cache/*\"] output_file: discord_cache name_pattern Optional Return the full file path if one of the values of name_pattern matches the file name. This option works the same way as find's -name option. Because the leading directories are removed, the file names considered for a match with name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. artifacts: - description: Hash all wtmp and utmp files. supported_os: [all] collector: hash path: /var name_pattern: [\"wtmp\", \"btmp\"] output_file: hash_wtmp_btmp.txt As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Hash all HTML and TXT files. supported_os: [all] collector: hash path: / name_pattern: [\"*.html\", \"*.txt\"] output_file: hash_all_html_txt artifacts: - description: Hash all .log and .Log (capital L) files. supported_os: [all] collector: hash path: /var/log name_pattern: [\"*.[Ll]og\"] output_file: hash_all_log_files exclude_path_pattern Optional Use this option to exclude paths from the collection. This option works the same way as find's -path -prune option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Hash all files excluding /etc and /var. supported_os: [all] collector: hash path: / exclude_path_pattern: [\"/dev\", \"/var\"] output_file: all_excluding_etc_var.txt exclude_name_pattern Optional Use this option to exclude files from the collection. This option works the same way as find's -name -prune option. Because the leading directories are removed, the file names considered for a match with exclude_name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Hash all from /etc excluding passwd and shadow* files. supported_os: [all] collector: hash path: /etc exclude_name_pattern: [\"passwd\", \"shadow*\"] output_file: hash_etc_excluding_passwd_shadow.txt exclude_file_system Optional Use this option to exclude file systems from the collection. UAC will retrieve the list of existing mountpoints (paths) and exclude them from the collection. The file system types which are supported depend on the target computer's running kernel. artifacts: - description: Hash all files excluding any files located in procfs, nfs and devfs file systems. supported_os: [all] collector: hash path: / exclude_file_system: [procfs, nfs, devfs] file_type: f output_file: hash_all_exclude_procfs_nfs_devfs.txt max_depth Optional Descend at most levels (a non-negative integer) levels of directories below the starting-point. Using 0 means only applying the tests and actions to the starting-points themselves. This option works the same way as find's -maxdepth option. artifacts: - description: Descend at most 5 levels of directories below /. supported_os: [all] collector: hash path: / max_depth: 5 output_file: hash_max_5_levels.txt file_type Optional This option works the same way as find's -type option. File is of type: Value Description f regular file d directory l symbolic link p named pipe (FIFO) s socket b block special c character special artifacts: - description: Hash files only supported_os: [all] collector: find path: / file_type: f output_file: files_only.txt min_file_size Optional The minimum size of a file to hash in bytes. Any files smaller than this will be ignored. artifacts: - description: Hash all files bigger than 1048576 bytes supported_os: [all] collector: hash path: / file_type: f min_file_size: 1048576 output_file: hash_bigger_than.txt max_file_size Optional The maximum size of a file to hash in bytes. Any files bigger than this will be ignored. artifacts: - description: Hash all files smaller than 1048576 bytes supported_os: [all] collector: hash path: / file_type: f max_file_size: 1048576 output_file: hash_smaller_than.txt permissions Optional Use this option to hash files based on their permissions. This option works the same way as find's -perm option. Please note that symbolic mode is not supported (e.g: -g=w). Permissions can be used as follows: File's permission bits are exactly mode (octal). artifacts: - description: Hash files that have permissions set to 755. supported_os: [all] collector: hash path: / file_type: f permissions: 755 output_file: hash_all_755_permissions.txt All of the permission bits mode (octal) are set for the file. artifacts: - description: Hash all files that have SUID bit set. supported_os: [all] collector: hash path: / file_type: f permissions: -4000 output_file: hash_suid_files.txt ignore_date_range Optional Use this option to hash files ignoring the date set using both --date-range-start and --date-range-end command line options. This is useful when you want to set a date range for your collection, but want to hash some files regardless of their last accessed, modified and changed dates. For example, hash for all files and subdirectories from /etc regardless of their last accessed, modified and changed dates, even if a date range was set using --date-range-start and --date-range-end command line options. artifacts: - description: Hash all files from /etc regardless date range set by --date-range-start and --date-range-end. supported_os: [all] collector: hash path: /etc ignore_date_range: true output_file: hash_ignore_date_range.txt exclude_nologin_users Optional Use this option to hash files from users that have a valid shell only. Any user that has no shell or a shell set as false, halt, nologin, shutdown or sync will be skipped from the collection. artifacts: - description: Hash .bash_history file from users that have a valid shell only. supported_os: [all] collector: hash path: /%user_home%/.bash_history exclude_nologin_users: true output_file: hash_exclude_nologin_users.txt output_file Required Output file name where the hashes will be stored in. UAC never overwrites output files. Data will be appended to file if the same file name is set for a different artifact rule within the same artifact directory. The proper file extension (.md5, .sha1 or .sha256) will be added automatically to the output file according to the hash algorithm used to hash the files. In the example below, the output file will be same_output_file.txt.md5 and same_output_file.txt.sha256 if MD5 and SHA256 algorithms were set in config/uac.conf file. Note that in the example below, any standard error message (coming from stderr stream) will be stored in same_output_file.txt.stderr file. artifacts: - description: Hash all files and directories from /etc. supported_os: [all] collector: hash path: /etc output_file: same_output_file.txt - description: Hash all files and directories from /var/log. supported_os: [all] collector: hash path: /var/log output_file: same_output_file.txt output_directory Optional Defines the subdirectory name the output file will be stored in. By default, collected artifacts will always be stored into a directory which its path follows the same structure defined in the artifacts directory. In the example below, the output file created by bodyfile.yaml will be stored into bodyfile directory, and the output files created by docker.yaml will be stored into live_response/containers directory. But in some cases it is preferred to have the output file stored into subdirectories. Let's use the live_response/process/string_running_processes.yaml as an example where the output file is stored into live_response/process/proc/%line% subdirectory. artifacts: - description: Extract strings from running processes. supported_os: [android, linux, netbsd] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: strings -a /proc/%line%/exe output_directory: proc/%line% output_file: strings.txt compress_output_file: true stderr_output_file Optional Use this option to define a custom stderr file name. Standard error messages (coming from stderr stream) will be stored in the custom.txt.stderr file in the example below. artifacts: - description: Hash running processes. supported_os: [aix] collector: hash path: /proc/[0-9]*/object/a.out output_file: hash_running_processes stderr_output_file: custom.stderr.txt stat collector Use this collector to extract information from files and directories using either stat or stat.pl tool to create a body file. The body file is an intermediate file when creating a timeline of file activity. It is a pipe (\"|\") delimited text file that contains one line for each file. Plaso and mactime tools can be used to read this file and sorts the contents. artifacts: - description: Stat all files. supported_os: [all] collector: stat path: / file_type: f output_file: stat.txt path Required The starting point from where the files will be searched for. UAC will recurse into subdirectories unless otherwise prevented by max_depth option. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. Every file should be treated like it originates on the / (root) mount point. The root mount point will be replaced by UAC if a new mount point is set with --mount-point command line option. artifacts: - description: Stat /bin/sh file. supported_os: [all] collector: stat path: /bin/sh output_file: stat_bin_sh.txt Stat all files within /etc . Note the use of a * at the end of the path. artifacts: - description: Stat all files and directories within /etc. supported_os: [all] collector: stat path: /etc output_file: stat_etc.txt Note that you need to use quotation marks when specifying paths with spaces. artifacts: - description: Stat TCC.db file. supported_os: [all] collector: stat path: /Library/\"Application Support\"/com.apple.TCC/TCC.db output_file: path_with_spaces.txt is_file_list Optional If set to true, the path option will refer to a file list containing one path per line. This is useful when you need to stat files based on a file list. artifacts: - description: Stat files based on a file list located in /%uac_directory%/my_file_list.txt. supported_os: [all] collector: stat path: /%uac_directory%/my_file_list.txt is_file_list: true output_file: stat_my_file_list.txt path_pattern Optional Return the full file path if one of path_pattern values matches the file path. This option works the same way as find's -path option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. The example below searches for Discord's Cache directory anywhere within the user's home directory. Hits would be as follows: /home/user/.config /discord/Cache/ 00bcecbd2455cb22_0 /home/user/.var/app/com.discordapp.Discord/config /discord/Cache/ index /home/user/snap/discord/current/.config /discord/Cache/ ac0fa118bdaaa62e_0 artifacts: - description: Find Discord cache files. supported_os: [all] collector: stat path: /%user_home% path_pattern: [\"*/discord/Cache/*\"] output_file: discord_cache.txt name_pattern Optional Return the full file path if one of the values of name_pattern matches the file name. This option works the same way as find's -name option. Because the leading directories are removed, the file names considered for a match with name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. artifacts: - description: Stat all wtmp and utmp files. supported_os: [all] collector: stat path: /var name_pattern: [\"wtmp\", \"btmp\"] output_file: stat_wtmp_btmp.txt As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Stat all HTML and TXT files. supported_os: [all] collector: stat path: / name_pattern: [\"*.html\", \"*.txt\"] output_file: stat_all_html_txt artifacts: - description: Stat all .log and .Log (capital L) files. supported_os: [all] collector: stat path: /var/log name_pattern: [\"*.[Ll]og\"] output_file: stat_all_log_files exclude_path_pattern Optional Use this option to exclude paths from the collection. This option works the same way as find's -path -prune option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Stat all files excluding /etc and /var. supported_os: [all] collector: stat path: / exclude_path_pattern: [\"/dev\", \"/var\"] output_file: stat_all_excluding_etc_var.txt exclude_name_pattern Optional Use this option to exclude files from the collection. This option works the same way as find's -name -prune option. Because the leading directories are removed, the file names considered for a match with exclude_name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Stat all from /etc excluding passwd and shadow* files. supported_os: [all] collector: stat path: /etc exclude_name_pattern: [\"passwd\", \"shadow*\"] output_file: stat_etc_excluding_passwd_shadow.txt exclude_file_system Optional Use this option to exclude file systems from the collection. UAC will retrieve the list of existing mountpoints (paths) and exclude them from the collection. The file system types which are supported depend on the target computer's running kernel. artifacts: - description: Stat all files excluding any files located in procfs, nfs and devfs file systems. supported_os: [all] collector: stat path: / exclude_file_system: [procfs, nfs, devfs] file_type: f output_file: stat_all_exclude_procfs_nfs_devfs.txt max_depth Optional Descend at most levels (a non-negative integer) levels of directories below the starting-point. Using 0 means only applying the tests and actions to the starting-points themselves. This option works the same way as find's -maxdepth option. artifacts: - description: Descend at most 5 levels of directories below /. supported_os: [all] collector: stat path: / max_depth: 5 output_file: stat_max_5_levels.txt file_type Optional This option works the same way as find's -type option. File is of type: Value Description f regular file d directory l symbolic link p named pipe (FIFO) s socket b block special c character special artifacts: - description: Stat files only. supported_os: [all] collector: stat path: / file_type: f output_file: stat_files_only.txt artifacts: - description: Stat directories only. supported_os: [all] collector: stat path: / file_type: d output_file: stat_directories_only.txt min_file_size Optional The minimum size of a file to stat, in bytes. Any files smaller than this will be ignored. artifacts: - description: Stat all files bigger than 1048576 bytes. supported_os: [all] collector: stat path: / file_type: f min_file_size: 1048576 output_file: stat_bigger_than.txt max_file_size Optional The maximum size of a file to stat, in bytes. Any files bigger than this will be ignored. artifacts: - description: Stat all files smaller than 1048576 bytes. supported_os: [all] collector: stat path: / file_type: f max_file_size: 1048576 output_file: stat_smaller_than.txt permissions Optional Use this option to stat files based on their permissions. This option works the same way as find's -perm option. Please note that symbolic mode is not supported (e.g: -g=w). Permissions can be used as follows: File's permission bits are exactly mode (octal). artifacts: - description: Stat files that have permissions set to 755. supported_os: [all] collector: stat path: / file_type: f permissions: 755 output_file: stat_all_755_permissions.txt All of the permission bits mode (octal) are set for the file. artifacts: - description: Stat all files that have SUID bit set. supported_os: [all] collector: stat path: / file_type: f permissions: -4000 output_file: stat_suid_files.txt ignore_date_range Optional Use this option to stat files ignoring the date set using both --date-range-start and --date-range-end command line options. This is useful when you want to set a date range for your collection, but want to stat some files regardless of their last accessed, modified and changed dates. For example, stat for all files and subdirectories from /etc regardless of their last accessed, modified and changed dates, even if a date range was set using --date-range-start and --date-range-end command line options. artifacts: - description: Stat all files from /etc regardless date range set by --date-range-start and --date-range-end. supported_os: [all] collector: stat path: /etc ignore_date_range: true output_file: stat_ignore_date_range.txt exclude_nologin_users Optional Use this option to stat files from users that have a valid shell only. Any user that has no shell or a shell set as false, halt, nologin, shutdown or sync will be skipped from the collection. artifacts: - description: Stat .bash_history file from users that have a valid shell only. supported_os: [all] collector: stat path: /%user_home%/.bash_history exclude_nologin_users: true output_file: stat_exclude_nologin_users.txt output_file Required Output file name where the stat information will be stored in. UAC never overwrites output files. Data will be appended to file if the same file name is set for a different artifact rule within the same artifact directory. Note that in the example below, any standard error message (coming from stderr stream) will be stored in same_output_file.txt.stderr file. artifacts: - description: Stat all files and directories from /etc. supported_os: [all] collector: stat path: /etc output_file: same_output_file.txt - description: Stat all files and directories from /var/log. supported_os: [all] collector: stat path: /var/log output_file: same_output_file.txt output_directory Optional Defines the subdirectory name the output file will be stored in. By default, collected artifacts will always be stored in a directory whose path follows the same structure defined in the artifacts directory. In the example below, the output file created by bodyfile.yaml will be stored in bodyfile directory, and the output files created by docker.yaml will be stored in live_response/containers directory. But in some cases, it is preferred to have the output file stored in subdirectories. Let's use the live_response/process/string_running_processes.yaml as an example where the output file is stored into live_response/process/proc/%line% subdirectory. artifacts: - description: Extract strings from running processes. supported_os: [android, linux, netbsd] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: strings -a /proc/%line%/exe output_directory: proc/%line% output_file: strings.txt compress_output_file: true stderr_output_file Optional Use this option to define a custom stderr file name. Standard error messages (coming from stderr stream) will be stored in the custom.txt.stderr file in the example below. artifacts: - description: Collect file stat information to create a bodyfile. supported_os: [all] collector: stat path: / exclude_file_system: [proc, procfs] max_depth: 6 output_file: bodyfile.txt stderr_output_file: custom.txt.stderr file collector Use this collector to collect files and directories. artifacts: - description: Collect all files within /var/log (recursive). supported_os: [all] collector: file path: /var/log file_type: f path Required The starting point from where the files will be searched for. UAC will recurse into subdirectories unless otherwise prevented by max_depth option. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. Every file should be treated like it originates on the / (root) mount point. The root mount point will be replaced by UAC if a new mount point is set with --mount-point command line option. artifacts: - description: Collect /bin/sh file. supported_os: [all] collector: file path: /bin/sh Collect all files from /etc . Note the use of a * at the end of the path. artifacts: - description: Collect all files and directories within /etc. supported_os: [all] collector: file path: /etc Note that you need to use quotation marks when specifying paths with spaces. artifacts: - description: Collect TCC.db file. supported_os: [all] collector: file path: /Library/\"Application Support\"/com.apple.TCC/TCC.db is_file_list Optional If set to true, the path option will refer to a file list containing one path per line. This is useful when you need to collect files based on a file list. artifacts: - description: Collect files based on a file list located in /%uac_directory%/my_file_list.txt. supported_os: [all] collector: file path: /%uac_directory%/my_file_list.txt is_file_list: true path_pattern Optional Return the full file path if one of the path_pattern values matches the file path. This option works the same way as find's -path option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. The example below searches for Discord's Cache directory anywhere within the user's home directory. Hits would be as follows: /home/user/.config /discord/Cache/ 00bcecbd2455cb22_0 /home/user/.var/app/com.discordapp.Discord/config /discord/Cache/ index /home/user/snap/discord/current/.config /discord/Cache/ ac0fa118bdaaa62e_0 artifacts: - description: Find Discord cache files. supported_os: [all] collector: file path: /%user_home% path_pattern: [\"*/discord/Cache/*\"] name_pattern Optional Return the full file path if one of the values of name_pattern matches the file name. This option works the same way as find's -name option. Because the leading directories are removed, the file names considered for a match with name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. artifacts: - description: Collect all wtmp and utmp files. supported_os: [all] collector: file path: /var name_pattern: [\"wtmp\", \"btmp\"] As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Collect all HTML and TXT files. supported_os: [all] collector: file path: / name_pattern: [\"*.html\", \"*.txt\"] artifacts: - description: Collect all .log and .Log (capital L) files. supported_os: [all] collector: file path: /var/log name_pattern: [\"*.[Ll]og\"] exclude_path_pattern Optional Use this option to exclude paths from the collection. This option works the same way as find's -path -prune option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Collect all files excluding /etc and /var. supported_os: [all] collector: file path: / exclude_path_pattern: [\"/dev\", \"/var\"] exclude_name_pattern Optional Use this option to exclude files from the collection. This option works the same way as find's -name -prune option. Because the leading directories are removed, the file names considered for a match with exclude_name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Collect all from /etc excluding passwd and shadow* files. supported_os: [all] collector: file path: /etc exclude_name_pattern: [\"passwd\", \"shadow*\"] exclude_file_system Optional Use this option to exclude file systems from the collection. UAC will retrieve the list of existing mountpoints (paths) and exclude them from the collection. The file system types which are supported depend on the target computer's running kernel. artifacts: - description: Collect all files excluding any files located in procfs, nfs and devfs file systems. supported_os: [all] collector: file path: / exclude_file_system: [procfs, nfs, devfs] file_type: f max_depth Optional Descend at most levels (a non-negative integer) levels of directories below the starting-point. Using 0 means only applying the tests and actions to the starting-points themselves. This option works the same way as find's -maxdepth option. artifacts: - description: Descend at most 5 levels of directories below /. supported_os: [all] collector: file path: / max_depth: 5 file_type Optional This option works the same way as find's -type option. File is of type: Value Description f regular file d directory l symbolic link p named pipe (FIFO) s socket b block special c character special artifacts: - description: Collect files only. supported_os: [all] collector: file path: /var/log file_type: f min_file_size Optional The minimum size of a file to stat in bytes. Any files smaller than this will be ignored. artifacts: - description: Collect all files bigger than 1048576 bytes. supported_os: [all] collector: file path: / file_type: f min_file_size: 1048576 max_file_size Optional The maximum size of a file to stat in bytes. Any files bigger than this will be ignored. artifacts: - description: Collect all files smaller than 1048576 bytes. supported_os: [all] collector: file path: / file_type: f max_file_size: 1048576 permissions Optional Use this option to collect files based on their permissions. This option works the same way as find's -perm option. Please note that symbolic mode is not supported (e.g: -g=w). Permissions can be used as follows: File's permission bits are exactly mode (octal). artifacts: - description: Collect files that have permissions set to 755. supported_os: [all] collector: file path: / file_type: f permissions: 755 All of the permission bits mode (octal) are set for the file. artifacts: - description: Collect all files that have SUID bit set. supported_os: [all] collector: file path: / file_type: f permissions: -4000 ignore_date_range Optional Use this option to collect files ignoring the date set using both --date-range-start and --date-range-end command line options. This is useful when you want to set a date range for your collection, but want to collect some files regardless of their last accessed, modified and changed dates. For example, collect all files and subdirectories from /etc regardless of their last accessed, modified and changed dates, even if a date range was set using --date-range-start and --date-range-end command line options. artifacts: - description: Collect all files from /etc regardless date range set by --date-range-start and --date-range-end. supported_os: [all] collector: file path: /etc ignore_date_range: true exclude_nologin_users Optional Use this option to collect files from users that have a valid shell only. Any user that has no shell or a shell set as false, halt, nologin, shutdown or sync will be skipped from the collection. artifacts: - description: Collect .bash_history file from users that have a valid shell only. supported_os: [all] collector: file path: /%user_home%/.bash_history exclude_nologin_users: true","title":"Collectors"},{"location":"collectors/#collectors","text":"","title":"Collectors"},{"location":"collectors/#command-collector","text":"Use this collector to run commands and store the output into an output file. artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_file: ps.txt - description: Report a snapshot of the current processes. supported_os: [aix, freebsd, linux, macos, netbsd, openbsd, solaris] collector: command command: ps auxwww output_file: ps_auxwww.txt - description: Extract strings from running processes. supported_os: [aix] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: strings -a /proc/%line%/object/a.out output_directory: proc/%line% output_file: strings.txt compress_output_file: true","title":"command collector"},{"location":"collectors/#command","text":"Required The command will be run in the target system and the output will be collected from it. The path to the executable is not required. Only the name of the executable and the parameters should be given. UAC can also run executables located in the bin directory. Even in this case, the path to the executable is not required. The bin directory is always added to PATH when UAC starts. Please refer to bin/README.md file for more information. The example below shows how to collect the output from ps -ef command: artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps -ef output_file: ps_-ef.txt","title":"command"},{"location":"collectors/#foreach","text":"Optional The command that will be run and the output lines will be used as the input for the command option. The logic behind it is: for (each line returned by foreach); do command done There is one variable that can be used that will be replaced by UAC at runtime: VARIABLE NAME DESCRIPTION %line% Replaced with each line returned by the execution of the foreach command Let's suppose you need to collect container logs, and you don't know the container IDs. First, you need to retrieve all the IDs: docker container ps -all | sed 1d | awk '{print $1}' The %line% variable will be replaced by each output line resulting from that command (which are container IDs in the example above). This means if you have 10 containers, the command docker container logs %line% will be run 10 times, one for each container ID. Example: artifacts: - description: Fetch the logs of all containers. supported_os: [linux] collector: command foreach: docker container ps -all | sed 1d | awk '{print $1}' command: docker container logs %line% output_file: docker_container_logs_%line%.txt","title":"foreach"},{"location":"collectors/#output_file","text":"Required Output file name where collected data will be stored in. UAC never overwrites output files. Data will be appended to the file if the same file name is set for a different artifact rule within the same artifact directory. Both ps and ps auxwww outputs will be stored in the same ps.txt file in the example below. Note that any standard error message (coming from stderr stream) will be stored in ps.txt.stderr file. artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_file: ps.txt - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps auxwww output_file: ps.txt","title":"output_file"},{"location":"collectors/#output_directory","text":"Optional Defines the subdirectory name the output file will be stored in. By default, collected artifacts will always be stored in a directory whose path follows the same structure defined in the artifacts directory. In the example below, the output file created by bodyfile.yaml will be stored into bodyfile directory, and the output files created by docker.yaml will be stored into live_response/containers directory. But in some cases, it is preferred to have the output file stored in subdirectories. Let's use the live_response/process/string_running_processes.yaml as an example where the output file is stored into live_response/process/proc/%line% subdirectory. artifacts: - description: Extract strings from running processes. supported_os: [android, linux, netbsd] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: strings -a /proc/%line%/exe output_directory: proc/%line% output_file: strings.txt compress_output_file: true","title":"output_directory"},{"location":"collectors/#stderr_output_file","text":"Optional Use this option to define a custom stderr file name. Standard error messages (coming from stderr stream) will be stored in the custom.txt.stderr file in the example below. artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_file: ps.txt stderr_output_file: custom.txt.stderr","title":"stderr_output_file"},{"location":"collectors/#compressed_output_file","text":"Optional The output file will be compressed by gzip if this option is set to true . The following artifact will have its output stored into the compressed output file ps_-ef.txt.gz in the example below. artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps -ef output_file: ps_-ef.txt compress_output_file: true","title":"compressed_output_file"},{"location":"collectors/#exclude_nologin_users","text":"Optional Use this option to search artifacts from users that have a valid shell only. Any user that has no shell or a shell set as false, halt, nologin, shutdown or sync will be skipped from the collection. artifacts: - description: Run 'ls -lRa' on all home directories for users that have a valid shell only. supported_os: [all] collector: command command: ls -lRa /%user_home%/ exclude_nologin_users: true output_file: ls_-lRa_%user%.txt","title":"exclude_nologin_users"},{"location":"collectors/#find-collector","text":"Use this collector to find files and directories using either find or find.pl tool, and store the output into a text file. artifacts: - description: Find files that contain at least +x flag set for other. supported_os: [all] collector: find path: / exclude_file_system: [proc, procfs] file_type: f max_depth: 4 max_file_size: 3072000 permissions: -001 output_file: list_of_executable_files.txt","title":"find collector"},{"location":"collectors/#path","text":"Required The starting point from where the artifact will be searched for. UAC will recurse into subdirectories unless otherwise prevented by max_depth option. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. Every artifact should be treated like it originates on the / (root) mount point. The root mount point will be replaced by UAC if a new mount point is set with --mount-point command line option. artifacts: - description: Search all cmdline files within /proc/*/ supported_os: [all] collector: find path: /proc/*/cmdline output_file: cmdline.txt Search all files and directories within /etc . Note the use of a * at the end of the path. artifacts: - description: Search all files and directories within /etc. supported_os: [all] collector: find path: /etc output_file: etc.txt Note that you need to use quotation marks when specifying paths with spaces. artifacts: - description: Search for TCC.db file. supported_os: [all] collector: find path: /Library/\"Application Support\"/com.apple.TCC/TCC.db output_file: path_with_spaces.txt","title":"path"},{"location":"collectors/#path_pattern","text":"Optional Return the full file path if one of the path_pattern values matches the file path. This option works the same way as find's -path option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. The example below searches for Discord's Cache directory anywhere within the user's home directory. Hits would be as follows: /home/user/.config /discord/Cache/ 00bcecbd2455cb22_0 /home/user/.var/app/com.discordapp.Discord/config /discord/Cache/ index /home/user/snap/discord/current/.config /discord/Cache/ ac0fa118bdaaa62e_0 artifacts: - description: Find Discord cache files. supported_os: [all] collector: find path: /%user_home% path_pattern: [\"*/discord/Cache/*\"] output_file: discord_cache.txt","title":"path_pattern"},{"location":"collectors/#name_pattern","text":"Optional Return the full file path if one of the name_pattern values matches the file name. This option works the same way as find's -name option. Because the leading directories are removed, the file names considered for a match with name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. artifacts: - description: Search all wtmp and utmp files. supported_os: [all] collector: find path: /var name_pattern: [\"wtmp\", \"btmp\"] output_file: wtmp_btmp.txt As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Search all HTML and TXT files. supported_os: [all] collector: find path: / name_pattern: [\"*.html\", \"*.txt\"] output_file: all_html_txt.txt artifacts: - description: Search all .log and .Log (capital L) files. supported_os: [all] collector: find path: /var/log name_pattern: [\"*.[Ll]og\"] output_file: all_log_files.txt","title":"name_pattern"},{"location":"collectors/#exclude_path_pattern","text":"Optional Use this option to exclude paths from the collection. This option works the same way as find's -path -prune option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Search all excluding /etc and /var. supported_os: [all] collector: find path: / exclude_path_pattern: [\"/dev\", \"/var\"] output_file: all_excluding_etc_var.txt","title":"exclude_path_pattern"},{"location":"collectors/#exclude_name_pattern","text":"Optional Use this option to exclude files from the collection. This option works the same way as find's -name -prune option. Because the leading directories are removed, the file names considered for a match with exclude_name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Search /etc excluding passwd and shadow* files. supported_os: [all] collector: find path: /etc exclude_name_pattern: [\"passwd\", \"shadow*\"] output_file: etc_excluding_passwd_shadow.txt","title":"exclude_name_pattern"},{"location":"collectors/#exclude_file_system","text":"Optional Use this option to exclude file systems from the collection. UAC will retrieve the list of existing mountpoints (paths) and exclude them from the collection. The file system types which are supported depend on the target computer's running kernel. artifacts: - description: Search all files excluding any files located in procfs, nfs and devfs file systems. supported_os: [all] collector: find path: / exclude_file_system: [procfs, nfs, devfs] output_file: exclude_procfs_nfs_devfs.txt","title":"exclude_file_system"},{"location":"collectors/#max_depth","text":"Optional Descend at most levels (a non-negative integer) levels of directories below the starting-point. Using 0 means only applying the tests and actions to the starting-points themselves. This option works the same way as find's -maxdepth option. artifacts: - description: Descend at most 5 levels of directories below /. supported_os: [all] collector: find path: / max_depth: 5 output_file: max_5_levels.txt","title":"max_depth"},{"location":"collectors/#file_type","text":"Optional This option works the same way as find's -type option. File is of type: Value Description f regular file d directory l symbolic link p named pipe (FIFO) s socket b block special c character special artifacts: - description: Search files only. supported_os: [all] collector: find path: / file_type: f output_file: files_only.txt artifacts: - description: Search directories only. supported_os: [all] collector: find path: / file_type: d output_file: directories_only.txt","title":"file_type"},{"location":"collectors/#min_file_size","text":"Optional The minimum size of a file to search in bytes. Any files smaller than this will be ignored. artifacts: - description: Search all files bigger than 1048576 bytes. supported_os: [all] collector: find path: / file_type: f min_file_size: 1048576 output_file: bigger_than.txt","title":"min_file_size"},{"location":"collectors/#max_file_size","text":"Optional The maximum size of a file to search in bytes. Any files bigger than this will be ignored. artifacts: - description: Search all files smaller than 1048576 bytes. supported_os: [all] collector: find path: / file_type: f max_file_size: 1048576 output_file: smaller_than.txt","title":"max_file_size"},{"location":"collectors/#permissions","text":"Optional Use this option to search for files and directories based on their permissions. This option works the same way as find's -perm option. Please note that symbolic mode is not supported (e.g: -g=w). Permissions can be used as follows: File's permission bits are exactly mode (octal). artifacts: - description: Search files that have permissions set to 755. supported_os: [all] collector: find path: / file_type: f permissions: 755 output_file: all_755_permissions.txt All of the permission bits mode (octal) are set for the file. artifacts: - description: Search for files that have SUID bit set. supported_os: [all] collector: find path: / file_type: f permissions: -4000 output_file: suid_files.txt","title":"permissions"},{"location":"collectors/#ignore_date_range","text":"Optional Use this option to collect files ignoring the date set using both --date-range-start and --date-range-end command line options. This is useful when you want to set a date range for your collection, but want to collect some files regardless of their last accessed, modified and changed dates. For example, search for all files and subdirectories from /etc regardless of their last accessed, modified and changed dates, even if a date range was set using --date-range-start and --date-range-end command line options. artifacts: - description: Search /etc regardless date range set by --date-range-start and --date-range-end. supported_os: [all] collector: find path: /etc ignore_date_range: true output_file: ignore_date_range.txt","title":"ignore_date_range"},{"location":"collectors/#exclude_nologin_users_1","text":"Optional Use this option to search artifacts from users that have a valid shell only. Any user that has no shell or a shell set as false, halt, nologin, shutdown or sync will be skipped from the collection. artifacts: - description: Collect .bash_history file from users that have a valid shell only. supported_os: [all] collector: find path: /%user_home%/.bash_history exclude_nologin_users: true output_file: exclude_nologin_users.txt","title":"exclude_nologin_users"},{"location":"collectors/#output_file_1","text":"Required Output file name where the list of files will be stored in. UAC never overwrites output files. Data will be appended to the file if the same file name is set for a different artifact rule within the same artifact directory. Note that in the example below, any standard error message (coming from stderr stream) will be stored in same_output_file.txt.stderr file. artifacts: - description: Search all files and directories from /etc. supported_os: [all] collector: find path: /etc output_file: same_output_file.txt - description: Search all files and directories from /var/log. supported_os: [all] collector: find path: /var/log output_file: same_output_file.txt","title":"output_file"},{"location":"collectors/#output_directory_1","text":"Optional Defines the subdirectory name the output file will be stored in. By default, collected artifacts will always be stored in a directory whose path follows the same structure defined in the artifacts directory. In the example below, the output file created by bodyfile.yaml will be stored in bodyfile directory, and the output files created by docker.yaml will be stored in live_response/containers directory. But in some cases, it is preferred to have the output file stored in subdirectories. Let's use the live_response/process/string_running_processes.yaml as an example where the output file is stored into live_response/process/proc/%line% subdirectory. artifacts: - description: Extract strings from running processes. supported_os: [android, linux, netbsd] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: strings -a /proc/%line%/exe output_directory: proc/%line% output_file: strings.txt compress_output_file: true","title":"output_directory"},{"location":"collectors/#stderr_output_file_1","text":"Optional Use this option to define a custom stderr file name. Standard error messages (coming from stderr stream) will be stored in the custom.txt.stderr file in the example below. artifacts: - description: List all socket files. supported_os: [all] collector: find path: / file_type: s exclude_file_system: [proc, procfs] output_file: socket_files.txt stderr_output_file: custom.txt.stderr","title":"stderr_output_file"},{"location":"collectors/#hash-collector","text":"Use this collector to hash files and store the output into a text file. Hash algorithms that will be used during collection are defined in config/uac.conf file. artifacts: - description: Hash all files smaller than 3072000 bytes. supported_os: [all] collector: hash path: / exclude_file_system: [proc, procfs] file_type: f max_depth: 4 max_file_size: 3072000 output_file: hash.txt","title":"hash collector"},{"location":"collectors/#path_1","text":"Required The starting point from where the files will be searched for. UAC will recurse into subdirectories unless otherwise prevented by max_depth option. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. Every file should be treated like it originates on the / (root) mount point. The root mount point will be replaced by UAC if a new mount point is set with --mount-point command line option. artifacts: - description: Hash /bin/sh file. supported_os: [all] collector: hash path: /bin/sh output_file: hash_bin_sh.txt Hash all files within /etc . Note the use of a * at the end of the path. artifacts: - description: Hash all files and directories within /etc. supported_os: [all] collector: hash path: /etc output_file: hashes_etc.txt Note that you need to use quotation marks when specifying paths with spaces. artifacts: - description: Hash TCC.db file. supported_os: [all] collector: hash path: /Library/\"Application Support\"/com.apple.TCC/TCC.db output_file: path_with_spaces.txt","title":"path"},{"location":"collectors/#is_file_list","text":"Optional If set to true, the path option will refer to a file list containing one path per line. This is useful when you need to hash files based on a file list. artifacts: - description: Hash files based on a file list located in /%uac_directory%/my_file_list.txt. supported_os: [all] collector: hash path: /%uac_directory%/my_file_list.txt is_file_list: true output_file: hash_my_file_list.txt","title":"is_file_list"},{"location":"collectors/#path_pattern_1","text":"Optional Return the full file path if one of the path_pattern values matches the file path. This option works the same way as find's -path option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. The example below searches for Discord's Cache directory anywhere within the user's home directory. Hits would be as follows: /home/user/.config /discord/Cache/ 00bcecbd2455cb22_0 /home/user/.var/app/com.discordapp.Discord/config /discord/Cache/ index /home/user/snap/discord/current/.config /discord/Cache/ ac0fa118bdaaa62e_0 artifacts: - description: Find Discord cache files. supported_os: [all] collector: hash path: /%user_home% path_pattern: [\"*/discord/Cache/*\"] output_file: discord_cache","title":"path_pattern"},{"location":"collectors/#name_pattern_1","text":"Optional Return the full file path if one of the values of name_pattern matches the file name. This option works the same way as find's -name option. Because the leading directories are removed, the file names considered for a match with name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. artifacts: - description: Hash all wtmp and utmp files. supported_os: [all] collector: hash path: /var name_pattern: [\"wtmp\", \"btmp\"] output_file: hash_wtmp_btmp.txt As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Hash all HTML and TXT files. supported_os: [all] collector: hash path: / name_pattern: [\"*.html\", \"*.txt\"] output_file: hash_all_html_txt artifacts: - description: Hash all .log and .Log (capital L) files. supported_os: [all] collector: hash path: /var/log name_pattern: [\"*.[Ll]og\"] output_file: hash_all_log_files","title":"name_pattern"},{"location":"collectors/#exclude_path_pattern_1","text":"Optional Use this option to exclude paths from the collection. This option works the same way as find's -path -prune option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Hash all files excluding /etc and /var. supported_os: [all] collector: hash path: / exclude_path_pattern: [\"/dev\", \"/var\"] output_file: all_excluding_etc_var.txt","title":"exclude_path_pattern"},{"location":"collectors/#exclude_name_pattern_1","text":"Optional Use this option to exclude files from the collection. This option works the same way as find's -name -prune option. Because the leading directories are removed, the file names considered for a match with exclude_name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Hash all from /etc excluding passwd and shadow* files. supported_os: [all] collector: hash path: /etc exclude_name_pattern: [\"passwd\", \"shadow*\"] output_file: hash_etc_excluding_passwd_shadow.txt","title":"exclude_name_pattern"},{"location":"collectors/#exclude_file_system_1","text":"Optional Use this option to exclude file systems from the collection. UAC will retrieve the list of existing mountpoints (paths) and exclude them from the collection. The file system types which are supported depend on the target computer's running kernel. artifacts: - description: Hash all files excluding any files located in procfs, nfs and devfs file systems. supported_os: [all] collector: hash path: / exclude_file_system: [procfs, nfs, devfs] file_type: f output_file: hash_all_exclude_procfs_nfs_devfs.txt","title":"exclude_file_system"},{"location":"collectors/#max_depth_1","text":"Optional Descend at most levels (a non-negative integer) levels of directories below the starting-point. Using 0 means only applying the tests and actions to the starting-points themselves. This option works the same way as find's -maxdepth option. artifacts: - description: Descend at most 5 levels of directories below /. supported_os: [all] collector: hash path: / max_depth: 5 output_file: hash_max_5_levels.txt","title":"max_depth"},{"location":"collectors/#file_type_1","text":"Optional This option works the same way as find's -type option. File is of type: Value Description f regular file d directory l symbolic link p named pipe (FIFO) s socket b block special c character special artifacts: - description: Hash files only supported_os: [all] collector: find path: / file_type: f output_file: files_only.txt","title":"file_type"},{"location":"collectors/#min_file_size_1","text":"Optional The minimum size of a file to hash in bytes. Any files smaller than this will be ignored. artifacts: - description: Hash all files bigger than 1048576 bytes supported_os: [all] collector: hash path: / file_type: f min_file_size: 1048576 output_file: hash_bigger_than.txt","title":"min_file_size"},{"location":"collectors/#max_file_size_1","text":"Optional The maximum size of a file to hash in bytes. Any files bigger than this will be ignored. artifacts: - description: Hash all files smaller than 1048576 bytes supported_os: [all] collector: hash path: / file_type: f max_file_size: 1048576 output_file: hash_smaller_than.txt","title":"max_file_size"},{"location":"collectors/#permissions_1","text":"Optional Use this option to hash files based on their permissions. This option works the same way as find's -perm option. Please note that symbolic mode is not supported (e.g: -g=w). Permissions can be used as follows: File's permission bits are exactly mode (octal). artifacts: - description: Hash files that have permissions set to 755. supported_os: [all] collector: hash path: / file_type: f permissions: 755 output_file: hash_all_755_permissions.txt All of the permission bits mode (octal) are set for the file. artifacts: - description: Hash all files that have SUID bit set. supported_os: [all] collector: hash path: / file_type: f permissions: -4000 output_file: hash_suid_files.txt","title":"permissions"},{"location":"collectors/#ignore_date_range_1","text":"Optional Use this option to hash files ignoring the date set using both --date-range-start and --date-range-end command line options. This is useful when you want to set a date range for your collection, but want to hash some files regardless of their last accessed, modified and changed dates. For example, hash for all files and subdirectories from /etc regardless of their last accessed, modified and changed dates, even if a date range was set using --date-range-start and --date-range-end command line options. artifacts: - description: Hash all files from /etc regardless date range set by --date-range-start and --date-range-end. supported_os: [all] collector: hash path: /etc ignore_date_range: true output_file: hash_ignore_date_range.txt","title":"ignore_date_range"},{"location":"collectors/#exclude_nologin_users_2","text":"Optional Use this option to hash files from users that have a valid shell only. Any user that has no shell or a shell set as false, halt, nologin, shutdown or sync will be skipped from the collection. artifacts: - description: Hash .bash_history file from users that have a valid shell only. supported_os: [all] collector: hash path: /%user_home%/.bash_history exclude_nologin_users: true output_file: hash_exclude_nologin_users.txt","title":"exclude_nologin_users"},{"location":"collectors/#output_file_2","text":"Required Output file name where the hashes will be stored in. UAC never overwrites output files. Data will be appended to file if the same file name is set for a different artifact rule within the same artifact directory. The proper file extension (.md5, .sha1 or .sha256) will be added automatically to the output file according to the hash algorithm used to hash the files. In the example below, the output file will be same_output_file.txt.md5 and same_output_file.txt.sha256 if MD5 and SHA256 algorithms were set in config/uac.conf file. Note that in the example below, any standard error message (coming from stderr stream) will be stored in same_output_file.txt.stderr file. artifacts: - description: Hash all files and directories from /etc. supported_os: [all] collector: hash path: /etc output_file: same_output_file.txt - description: Hash all files and directories from /var/log. supported_os: [all] collector: hash path: /var/log output_file: same_output_file.txt","title":"output_file"},{"location":"collectors/#output_directory_2","text":"Optional Defines the subdirectory name the output file will be stored in. By default, collected artifacts will always be stored into a directory which its path follows the same structure defined in the artifacts directory. In the example below, the output file created by bodyfile.yaml will be stored into bodyfile directory, and the output files created by docker.yaml will be stored into live_response/containers directory. But in some cases it is preferred to have the output file stored into subdirectories. Let's use the live_response/process/string_running_processes.yaml as an example where the output file is stored into live_response/process/proc/%line% subdirectory. artifacts: - description: Extract strings from running processes. supported_os: [android, linux, netbsd] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: strings -a /proc/%line%/exe output_directory: proc/%line% output_file: strings.txt compress_output_file: true","title":"output_directory"},{"location":"collectors/#stderr_output_file_2","text":"Optional Use this option to define a custom stderr file name. Standard error messages (coming from stderr stream) will be stored in the custom.txt.stderr file in the example below. artifacts: - description: Hash running processes. supported_os: [aix] collector: hash path: /proc/[0-9]*/object/a.out output_file: hash_running_processes stderr_output_file: custom.stderr.txt","title":"stderr_output_file"},{"location":"collectors/#stat-collector","text":"Use this collector to extract information from files and directories using either stat or stat.pl tool to create a body file. The body file is an intermediate file when creating a timeline of file activity. It is a pipe (\"|\") delimited text file that contains one line for each file. Plaso and mactime tools can be used to read this file and sorts the contents. artifacts: - description: Stat all files. supported_os: [all] collector: stat path: / file_type: f output_file: stat.txt","title":"stat collector"},{"location":"collectors/#path_2","text":"Required The starting point from where the files will be searched for. UAC will recurse into subdirectories unless otherwise prevented by max_depth option. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. Every file should be treated like it originates on the / (root) mount point. The root mount point will be replaced by UAC if a new mount point is set with --mount-point command line option. artifacts: - description: Stat /bin/sh file. supported_os: [all] collector: stat path: /bin/sh output_file: stat_bin_sh.txt Stat all files within /etc . Note the use of a * at the end of the path. artifacts: - description: Stat all files and directories within /etc. supported_os: [all] collector: stat path: /etc output_file: stat_etc.txt Note that you need to use quotation marks when specifying paths with spaces. artifacts: - description: Stat TCC.db file. supported_os: [all] collector: stat path: /Library/\"Application Support\"/com.apple.TCC/TCC.db output_file: path_with_spaces.txt","title":"path"},{"location":"collectors/#is_file_list_1","text":"Optional If set to true, the path option will refer to a file list containing one path per line. This is useful when you need to stat files based on a file list. artifacts: - description: Stat files based on a file list located in /%uac_directory%/my_file_list.txt. supported_os: [all] collector: stat path: /%uac_directory%/my_file_list.txt is_file_list: true output_file: stat_my_file_list.txt","title":"is_file_list"},{"location":"collectors/#path_pattern_2","text":"Optional Return the full file path if one of path_pattern values matches the file path. This option works the same way as find's -path option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. The example below searches for Discord's Cache directory anywhere within the user's home directory. Hits would be as follows: /home/user/.config /discord/Cache/ 00bcecbd2455cb22_0 /home/user/.var/app/com.discordapp.Discord/config /discord/Cache/ index /home/user/snap/discord/current/.config /discord/Cache/ ac0fa118bdaaa62e_0 artifacts: - description: Find Discord cache files. supported_os: [all] collector: stat path: /%user_home% path_pattern: [\"*/discord/Cache/*\"] output_file: discord_cache.txt","title":"path_pattern"},{"location":"collectors/#name_pattern_2","text":"Optional Return the full file path if one of the values of name_pattern matches the file name. This option works the same way as find's -name option. Because the leading directories are removed, the file names considered for a match with name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. artifacts: - description: Stat all wtmp and utmp files. supported_os: [all] collector: stat path: /var name_pattern: [\"wtmp\", \"btmp\"] output_file: stat_wtmp_btmp.txt As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Stat all HTML and TXT files. supported_os: [all] collector: stat path: / name_pattern: [\"*.html\", \"*.txt\"] output_file: stat_all_html_txt artifacts: - description: Stat all .log and .Log (capital L) files. supported_os: [all] collector: stat path: /var/log name_pattern: [\"*.[Ll]og\"] output_file: stat_all_log_files","title":"name_pattern"},{"location":"collectors/#exclude_path_pattern_2","text":"Optional Use this option to exclude paths from the collection. This option works the same way as find's -path -prune option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Stat all files excluding /etc and /var. supported_os: [all] collector: stat path: / exclude_path_pattern: [\"/dev\", \"/var\"] output_file: stat_all_excluding_etc_var.txt","title":"exclude_path_pattern"},{"location":"collectors/#exclude_name_pattern_2","text":"Optional Use this option to exclude files from the collection. This option works the same way as find's -name -prune option. Because the leading directories are removed, the file names considered for a match with exclude_name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Stat all from /etc excluding passwd and shadow* files. supported_os: [all] collector: stat path: /etc exclude_name_pattern: [\"passwd\", \"shadow*\"] output_file: stat_etc_excluding_passwd_shadow.txt","title":"exclude_name_pattern"},{"location":"collectors/#exclude_file_system_2","text":"Optional Use this option to exclude file systems from the collection. UAC will retrieve the list of existing mountpoints (paths) and exclude them from the collection. The file system types which are supported depend on the target computer's running kernel. artifacts: - description: Stat all files excluding any files located in procfs, nfs and devfs file systems. supported_os: [all] collector: stat path: / exclude_file_system: [procfs, nfs, devfs] file_type: f output_file: stat_all_exclude_procfs_nfs_devfs.txt","title":"exclude_file_system"},{"location":"collectors/#max_depth_2","text":"Optional Descend at most levels (a non-negative integer) levels of directories below the starting-point. Using 0 means only applying the tests and actions to the starting-points themselves. This option works the same way as find's -maxdepth option. artifacts: - description: Descend at most 5 levels of directories below /. supported_os: [all] collector: stat path: / max_depth: 5 output_file: stat_max_5_levels.txt","title":"max_depth"},{"location":"collectors/#file_type_2","text":"Optional This option works the same way as find's -type option. File is of type: Value Description f regular file d directory l symbolic link p named pipe (FIFO) s socket b block special c character special artifacts: - description: Stat files only. supported_os: [all] collector: stat path: / file_type: f output_file: stat_files_only.txt artifacts: - description: Stat directories only. supported_os: [all] collector: stat path: / file_type: d output_file: stat_directories_only.txt","title":"file_type"},{"location":"collectors/#min_file_size_2","text":"Optional The minimum size of a file to stat, in bytes. Any files smaller than this will be ignored. artifacts: - description: Stat all files bigger than 1048576 bytes. supported_os: [all] collector: stat path: / file_type: f min_file_size: 1048576 output_file: stat_bigger_than.txt","title":"min_file_size"},{"location":"collectors/#max_file_size_2","text":"Optional The maximum size of a file to stat, in bytes. Any files bigger than this will be ignored. artifacts: - description: Stat all files smaller than 1048576 bytes. supported_os: [all] collector: stat path: / file_type: f max_file_size: 1048576 output_file: stat_smaller_than.txt","title":"max_file_size"},{"location":"collectors/#permissions_2","text":"Optional Use this option to stat files based on their permissions. This option works the same way as find's -perm option. Please note that symbolic mode is not supported (e.g: -g=w). Permissions can be used as follows: File's permission bits are exactly mode (octal). artifacts: - description: Stat files that have permissions set to 755. supported_os: [all] collector: stat path: / file_type: f permissions: 755 output_file: stat_all_755_permissions.txt All of the permission bits mode (octal) are set for the file. artifacts: - description: Stat all files that have SUID bit set. supported_os: [all] collector: stat path: / file_type: f permissions: -4000 output_file: stat_suid_files.txt","title":"permissions"},{"location":"collectors/#ignore_date_range_2","text":"Optional Use this option to stat files ignoring the date set using both --date-range-start and --date-range-end command line options. This is useful when you want to set a date range for your collection, but want to stat some files regardless of their last accessed, modified and changed dates. For example, stat for all files and subdirectories from /etc regardless of their last accessed, modified and changed dates, even if a date range was set using --date-range-start and --date-range-end command line options. artifacts: - description: Stat all files from /etc regardless date range set by --date-range-start and --date-range-end. supported_os: [all] collector: stat path: /etc ignore_date_range: true output_file: stat_ignore_date_range.txt","title":"ignore_date_range"},{"location":"collectors/#exclude_nologin_users_3","text":"Optional Use this option to stat files from users that have a valid shell only. Any user that has no shell or a shell set as false, halt, nologin, shutdown or sync will be skipped from the collection. artifacts: - description: Stat .bash_history file from users that have a valid shell only. supported_os: [all] collector: stat path: /%user_home%/.bash_history exclude_nologin_users: true output_file: stat_exclude_nologin_users.txt","title":"exclude_nologin_users"},{"location":"collectors/#output_file_3","text":"Required Output file name where the stat information will be stored in. UAC never overwrites output files. Data will be appended to file if the same file name is set for a different artifact rule within the same artifact directory. Note that in the example below, any standard error message (coming from stderr stream) will be stored in same_output_file.txt.stderr file. artifacts: - description: Stat all files and directories from /etc. supported_os: [all] collector: stat path: /etc output_file: same_output_file.txt - description: Stat all files and directories from /var/log. supported_os: [all] collector: stat path: /var/log output_file: same_output_file.txt","title":"output_file"},{"location":"collectors/#output_directory_3","text":"Optional Defines the subdirectory name the output file will be stored in. By default, collected artifacts will always be stored in a directory whose path follows the same structure defined in the artifacts directory. In the example below, the output file created by bodyfile.yaml will be stored in bodyfile directory, and the output files created by docker.yaml will be stored in live_response/containers directory. But in some cases, it is preferred to have the output file stored in subdirectories. Let's use the live_response/process/string_running_processes.yaml as an example where the output file is stored into live_response/process/proc/%line% subdirectory. artifacts: - description: Extract strings from running processes. supported_os: [android, linux, netbsd] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: strings -a /proc/%line%/exe output_directory: proc/%line% output_file: strings.txt compress_output_file: true","title":"output_directory"},{"location":"collectors/#stderr_output_file_3","text":"Optional Use this option to define a custom stderr file name. Standard error messages (coming from stderr stream) will be stored in the custom.txt.stderr file in the example below. artifacts: - description: Collect file stat information to create a bodyfile. supported_os: [all] collector: stat path: / exclude_file_system: [proc, procfs] max_depth: 6 output_file: bodyfile.txt stderr_output_file: custom.txt.stderr","title":"stderr_output_file"},{"location":"collectors/#file-collector","text":"Use this collector to collect files and directories. artifacts: - description: Collect all files within /var/log (recursive). supported_os: [all] collector: file path: /var/log file_type: f","title":"file collector"},{"location":"collectors/#path_3","text":"Required The starting point from where the files will be searched for. UAC will recurse into subdirectories unless otherwise prevented by max_depth option. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. Every file should be treated like it originates on the / (root) mount point. The root mount point will be replaced by UAC if a new mount point is set with --mount-point command line option. artifacts: - description: Collect /bin/sh file. supported_os: [all] collector: file path: /bin/sh Collect all files from /etc . Note the use of a * at the end of the path. artifacts: - description: Collect all files and directories within /etc. supported_os: [all] collector: file path: /etc Note that you need to use quotation marks when specifying paths with spaces. artifacts: - description: Collect TCC.db file. supported_os: [all] collector: file path: /Library/\"Application Support\"/com.apple.TCC/TCC.db","title":"path"},{"location":"collectors/#is_file_list_2","text":"Optional If set to true, the path option will refer to a file list containing one path per line. This is useful when you need to collect files based on a file list. artifacts: - description: Collect files based on a file list located in /%uac_directory%/my_file_list.txt. supported_os: [all] collector: file path: /%uac_directory%/my_file_list.txt is_file_list: true","title":"is_file_list"},{"location":"collectors/#path_pattern_3","text":"Optional Return the full file path if one of the path_pattern values matches the file path. This option works the same way as find's -path option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. The example below searches for Discord's Cache directory anywhere within the user's home directory. Hits would be as follows: /home/user/.config /discord/Cache/ 00bcecbd2455cb22_0 /home/user/.var/app/com.discordapp.Discord/config /discord/Cache/ index /home/user/snap/discord/current/.config /discord/Cache/ ac0fa118bdaaa62e_0 artifacts: - description: Find Discord cache files. supported_os: [all] collector: file path: /%user_home% path_pattern: [\"*/discord/Cache/*\"]","title":"path_pattern"},{"location":"collectors/#name_pattern_3","text":"Optional Return the full file path if one of the values of name_pattern matches the file name. This option works the same way as find's -name option. Because the leading directories are removed, the file names considered for a match with name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. artifacts: - description: Collect all wtmp and utmp files. supported_os: [all] collector: file path: /var name_pattern: [\"wtmp\", \"btmp\"] As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Collect all HTML and TXT files. supported_os: [all] collector: file path: / name_pattern: [\"*.html\", \"*.txt\"] artifacts: - description: Collect all .log and .Log (capital L) files. supported_os: [all] collector: file path: /var/log name_pattern: [\"*.[Ll]og\"]","title":"name_pattern"},{"location":"collectors/#exclude_path_pattern_3","text":"Optional Use this option to exclude paths from the collection. This option works the same way as find's -path -prune option. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Collect all files excluding /etc and /var. supported_os: [all] collector: file path: / exclude_path_pattern: [\"/dev\", \"/var\"]","title":"exclude_path_pattern"},{"location":"collectors/#exclude_name_pattern_3","text":"Optional Use this option to exclude files from the collection. This option works the same way as find's -name -prune option. Because the leading directories are removed, the file names considered for a match with exclude_name_pattern will never include a slash, so \"a/b\" will never match anything. Don't forget to enclose the pattern in double quotes. Use a backslash (\\) to escape double quotes and commas. As UAC uses find tool to search for artifacts, wildcards and regex patterns are also supported here. artifacts: - description: Collect all from /etc excluding passwd and shadow* files. supported_os: [all] collector: file path: /etc exclude_name_pattern: [\"passwd\", \"shadow*\"]","title":"exclude_name_pattern"},{"location":"collectors/#exclude_file_system_3","text":"Optional Use this option to exclude file systems from the collection. UAC will retrieve the list of existing mountpoints (paths) and exclude them from the collection. The file system types which are supported depend on the target computer's running kernel. artifacts: - description: Collect all files excluding any files located in procfs, nfs and devfs file systems. supported_os: [all] collector: file path: / exclude_file_system: [procfs, nfs, devfs] file_type: f","title":"exclude_file_system"},{"location":"collectors/#max_depth_3","text":"Optional Descend at most levels (a non-negative integer) levels of directories below the starting-point. Using 0 means only applying the tests and actions to the starting-points themselves. This option works the same way as find's -maxdepth option. artifacts: - description: Descend at most 5 levels of directories below /. supported_os: [all] collector: file path: / max_depth: 5","title":"max_depth"},{"location":"collectors/#file_type_3","text":"Optional This option works the same way as find's -type option. File is of type: Value Description f regular file d directory l symbolic link p named pipe (FIFO) s socket b block special c character special artifacts: - description: Collect files only. supported_os: [all] collector: file path: /var/log file_type: f","title":"file_type"},{"location":"collectors/#min_file_size_3","text":"Optional The minimum size of a file to stat in bytes. Any files smaller than this will be ignored. artifacts: - description: Collect all files bigger than 1048576 bytes. supported_os: [all] collector: file path: / file_type: f min_file_size: 1048576","title":"min_file_size"},{"location":"collectors/#max_file_size_3","text":"Optional The maximum size of a file to stat in bytes. Any files bigger than this will be ignored. artifacts: - description: Collect all files smaller than 1048576 bytes. supported_os: [all] collector: file path: / file_type: f max_file_size: 1048576","title":"max_file_size"},{"location":"collectors/#permissions_3","text":"Optional Use this option to collect files based on their permissions. This option works the same way as find's -perm option. Please note that symbolic mode is not supported (e.g: -g=w). Permissions can be used as follows: File's permission bits are exactly mode (octal). artifacts: - description: Collect files that have permissions set to 755. supported_os: [all] collector: file path: / file_type: f permissions: 755 All of the permission bits mode (octal) are set for the file. artifacts: - description: Collect all files that have SUID bit set. supported_os: [all] collector: file path: / file_type: f permissions: -4000","title":"permissions"},{"location":"collectors/#ignore_date_range_3","text":"Optional Use this option to collect files ignoring the date set using both --date-range-start and --date-range-end command line options. This is useful when you want to set a date range for your collection, but want to collect some files regardless of their last accessed, modified and changed dates. For example, collect all files and subdirectories from /etc regardless of their last accessed, modified and changed dates, even if a date range was set using --date-range-start and --date-range-end command line options. artifacts: - description: Collect all files from /etc regardless date range set by --date-range-start and --date-range-end. supported_os: [all] collector: file path: /etc ignore_date_range: true","title":"ignore_date_range"},{"location":"collectors/#exclude_nologin_users_4","text":"Optional Use this option to collect files from users that have a valid shell only. Any user that has no shell or a shell set as false, halt, nologin, shutdown or sync will be skipped from the collection. artifacts: - description: Collect .bash_history file from users that have a valid shell only. supported_os: [all] collector: file path: /%user_home%/.bash_history exclude_nologin_users: true","title":"exclude_nologin_users"},{"location":"exposed_vars/","text":"Exposed variables Some variables can be used and will be replaced by UAC at runtime: Variable Replacement %uac_directory% Full path to where uac was run from %destination_directory% Full path to the destination directory along with the path to the artifact appended to it %mount_point% Full path of the target mount point %start_date% Date specified by --date-range-start %start_date_epoch% Epoch converted date specified by --date-range-start %end_date% Date specified by --date-range-end %end_date_epoch% Epoch converted date specified by --date-range-end The following two variables will trigger a loop in which UAC will run the command across all users. Variable Replacement %user% Username of each user %user_home% User's home directory path Examples: artifacts: - description: Hash all files based on a file list located in the UAC directory. supported_os: [all] collector: hash path: /%uac_directory%/my_file_list.txt is_file_list: true output_file: my_hash_list.txt artifacts: - description: Capture a RAM dump using AVML tool and store the acquired data into avml.raw file. supported_os: [all] collector: command command: avml %output_file% output_file: avml.raw artifacts: - description: Collect shell history files. supported_os: [all] collector: file path: /%user_home%/ name_pattern: [\".*_history\", \".*history\", \".lesshst\", \".zhistory\"]","title":"Exposed variables"},{"location":"exposed_vars/#exposed-variables","text":"Some variables can be used and will be replaced by UAC at runtime: Variable Replacement %uac_directory% Full path to where uac was run from %destination_directory% Full path to the destination directory along with the path to the artifact appended to it %mount_point% Full path of the target mount point %start_date% Date specified by --date-range-start %start_date_epoch% Epoch converted date specified by --date-range-start %end_date% Date specified by --date-range-end %end_date_epoch% Epoch converted date specified by --date-range-end The following two variables will trigger a loop in which UAC will run the command across all users. Variable Replacement %user% Username of each user %user_home% User's home directory path Examples: artifacts: - description: Hash all files based on a file list located in the UAC directory. supported_os: [all] collector: hash path: /%uac_directory%/my_file_list.txt is_file_list: true output_file: my_hash_list.txt artifacts: - description: Capture a RAM dump using AVML tool and store the acquired data into avml.raw file. supported_os: [all] collector: command command: avml %output_file% output_file: avml.raw artifacts: - description: Collect shell history files. supported_os: [all] collector: file path: /%user_home%/ name_pattern: [\".*_history\", \".*history\", \".lesshst\", \".zhistory\"]","title":"Exposed variables"},{"location":"output_file/","text":"Output file format A compressed archive file is created in the destination directory when the collection is finished. The default output file name will be (without extension): uac-%hostname%-%os%-%timestamp% The compressed archive file is hashed and the value is stored in the acquisition log file. Each artifact will be stored in its directory. Files collected by file collector will be placed into the [root] directory.","title":"Output file format"},{"location":"output_file/#output-file-format","text":"A compressed archive file is created in the destination directory when the collection is finished. The default output file name will be (without extension): uac-%hostname%-%os%-%timestamp% The compressed archive file is hashed and the value is stored in the acquisition log file. Each artifact will be stored in its directory. Files collected by file collector will be placed into the [root] directory.","title":"Output file format"},{"location":"profile_file/","text":"Profile file definition Profiles are used to define the list of artifacts that will be collected during the execution. They are YAML files located in the profiles directory. A profile file has two mandatory fields at the top of the file, followed by a set of artifacts files that will be used during the collection. Example: name: myprofile description: My profile. artifacts: - live_response/process/ps.yaml - live_response/process/lsof.yaml - bodyfile/bodyfile.yaml - hash_executables/hash_executables.yaml name Required The profile name. This is the name UAC uses to find the correct profile file during the script execution. description Required Describes the purpose of the profile as a whole. It should contain all the details about what kind of collection will be performed. No line breaks are supported. artifacts Required Set of artifacts files that will be used during the collection. All available artifacts files are located in the artifacts directory. Artifacts files will be executed in the same order they were added to the profile file. The example below shows a profile file that will collect `ps `, and then lsof``` artifacts. name: myprofile description: My profile. artifacts: - live_response/process/ps.yaml - live_response/process/lsof.yaml Wildcards and regex patterns (globbing) are also supported to refer to artifacts files. The example below shows a profile that will collect all artifacts located in the live_response/process directory. Note that the artifacts files will be parsed in alphabetical order in this case. name: myprofile description: My profile. artifacts: - live_response/process/* Artifacts files can also be skipped from the collection using the exclamation mark (!) before the artifacts file path. The example below shows a profile that will collect all artifacts located in the files directory (and subdirectories), excluding files/logs/additional_logs.yaml and all artifacts files located in files/applications directory. name: myprofile description: My profile. artifacts: - files/* - !files/logs/additional_logs.yaml - !files/applications/*","title":"Profile file"},{"location":"profile_file/#profile-file-definition","text":"Profiles are used to define the list of artifacts that will be collected during the execution. They are YAML files located in the profiles directory. A profile file has two mandatory fields at the top of the file, followed by a set of artifacts files that will be used during the collection. Example: name: myprofile description: My profile. artifacts: - live_response/process/ps.yaml - live_response/process/lsof.yaml - bodyfile/bodyfile.yaml - hash_executables/hash_executables.yaml","title":"Profile file definition"},{"location":"profile_file/#name","text":"Required The profile name. This is the name UAC uses to find the correct profile file during the script execution.","title":"name"},{"location":"profile_file/#description","text":"Required Describes the purpose of the profile as a whole. It should contain all the details about what kind of collection will be performed. No line breaks are supported.","title":"description"},{"location":"profile_file/#artifacts","text":"Required Set of artifacts files that will be used during the collection. All available artifacts files are located in the artifacts directory. Artifacts files will be executed in the same order they were added to the profile file. The example below shows a profile file that will collect `ps `, and then lsof``` artifacts. name: myprofile description: My profile. artifacts: - live_response/process/ps.yaml - live_response/process/lsof.yaml Wildcards and regex patterns (globbing) are also supported to refer to artifacts files. The example below shows a profile that will collect all artifacts located in the live_response/process directory. Note that the artifacts files will be parsed in alphabetical order in this case. name: myprofile description: My profile. artifacts: - live_response/process/* Artifacts files can also be skipped from the collection using the exclamation mark (!) before the artifacts file path. The example below shows a profile that will collect all artifacts located in the files directory (and subdirectories), excluding files/logs/additional_logs.yaml and all artifacts files located in files/applications directory. name: myprofile description: My profile. artifacts: - files/* - !files/logs/additional_logs.yaml - !files/applications/*","title":"artifacts"},{"location":"super_timeline/","text":"Super Timeline creation Using Plaso Plaso is a python-based backend engine that powers log2timeline. Log2timeline is a tool designed to extract timestamps and forensic artifacts from a computer system to facilitate analysis. It creates what we refer to as a \"Super Timeline\". If you haven't watched it already, there is a great YouTube video by Richard Davis of 13cubed that I suggest you start with. For more information about Plaso please refer to the official documentation page . Plaso in a docker container Obtaining a Plaso docker image docker pull log2timeline/plaso Parsing UAC output file First start the extraction with log2timeline. Your UAC output file should be present on the host, and not in the container (which is the default scenario), you\u2019ll have to set up a bridge between the two. For example, if you store your current UAC output file to analyze in /data/uac-testvm-linux-20220204120054.tar.gz , you could tell log2timeline to generate the Plaso storage file as /data/uac-testvm-linux-20220204120054.plaso this way: docker run -v /data:/data log2timeline/plaso:latest log2timeline --process_archives --storage-file /data/uac-testvm-linux-20220204120054.plaso /data/uac-testvm-linux-20220204120054.tar.gz This way your Plaso file will also be stored on the host filesystem. Run analysis with psort The /data/uac-testvm-linux-20220204120054.plaso file is the database file created by log2timeline, which can be exported to a CSV file (which can be read using ie. Eric Zimmermans timeline explorer ). You need to run psort to create a complete timeline of everything. docker run -v /data:/data log2timeline/plaso:latest psort.py -o l2tcsv /data/uac-testvm-linux-20220204120054.plaso -w /data/uac-testvm-linux-20220204120054.csv Using Magnet AXIOM You can also use Magnet AXIOM to extract timestamps and forensic artifacts from UAC's output file to create Super Timelines. Bodyfile custom artifact It is strongly recommended that you download and install the Bodyfile custom artifact before processing UAC's output file in Magnet AXIOM. This custom artifact parses the bodyfile.txt file generated by UAC. The custom artifact can be downloaded from Magnet Forensics Artifact Exchange page or from here . Parsing UAC output file Load the output file as a Linux or macOS disk image. Make sure the Bodyfle custom artifact is enabled. Analyzing the results with Magnet AXIOM Examine Parsed artifacts Timeline","title":"Super Timeline creation"},{"location":"super_timeline/#super-timeline-creation","text":"","title":"Super Timeline creation"},{"location":"super_timeline/#using-plaso","text":"Plaso is a python-based backend engine that powers log2timeline. Log2timeline is a tool designed to extract timestamps and forensic artifacts from a computer system to facilitate analysis. It creates what we refer to as a \"Super Timeline\". If you haven't watched it already, there is a great YouTube video by Richard Davis of 13cubed that I suggest you start with. For more information about Plaso please refer to the official documentation page .","title":"Using Plaso"},{"location":"super_timeline/#plaso-in-a-docker-container","text":"","title":"Plaso in a docker container"},{"location":"super_timeline/#obtaining-a-plaso-docker-image","text":"docker pull log2timeline/plaso","title":"Obtaining a Plaso docker image"},{"location":"super_timeline/#parsing-uac-output-file","text":"First start the extraction with log2timeline. Your UAC output file should be present on the host, and not in the container (which is the default scenario), you\u2019ll have to set up a bridge between the two. For example, if you store your current UAC output file to analyze in /data/uac-testvm-linux-20220204120054.tar.gz , you could tell log2timeline to generate the Plaso storage file as /data/uac-testvm-linux-20220204120054.plaso this way: docker run -v /data:/data log2timeline/plaso:latest log2timeline --process_archives --storage-file /data/uac-testvm-linux-20220204120054.plaso /data/uac-testvm-linux-20220204120054.tar.gz This way your Plaso file will also be stored on the host filesystem.","title":"Parsing UAC output file"},{"location":"super_timeline/#run-analysis-with-psort","text":"The /data/uac-testvm-linux-20220204120054.plaso file is the database file created by log2timeline, which can be exported to a CSV file (which can be read using ie. Eric Zimmermans timeline explorer ). You need to run psort to create a complete timeline of everything. docker run -v /data:/data log2timeline/plaso:latest psort.py -o l2tcsv /data/uac-testvm-linux-20220204120054.plaso -w /data/uac-testvm-linux-20220204120054.csv","title":"Run analysis with psort"},{"location":"super_timeline/#using-magnet-axiom","text":"You can also use Magnet AXIOM to extract timestamps and forensic artifacts from UAC's output file to create Super Timelines.","title":"Using Magnet AXIOM"},{"location":"super_timeline/#bodyfile-custom-artifact","text":"It is strongly recommended that you download and install the Bodyfile custom artifact before processing UAC's output file in Magnet AXIOM. This custom artifact parses the bodyfile.txt file generated by UAC. The custom artifact can be downloaded from Magnet Forensics Artifact Exchange page or from here .","title":"Bodyfile custom artifact"},{"location":"super_timeline/#parsing-uac-output-file_1","text":"Load the output file as a Linux or macOS disk image. Make sure the Bodyfle custom artifact is enabled.","title":"Parsing UAC output file"},{"location":"super_timeline/#analyzing-the-results-with-magnet-axiom-examine","text":"","title":"Analyzing the results with Magnet AXIOM Examine"},{"location":"super_timeline/#parsed-artifacts","text":"","title":"Parsed artifacts"},{"location":"super_timeline/#timeline","text":"","title":"Timeline"},{"location":"using_uac_with_cs_falcon_rtr/","text":"Using UAC with CrowdStrike Falcon Real Time Response With CrowdStrike Falcon Real Time Response (RTR), analysts can remotely access and interact with endpoints in real time, gaining instant visibility into the system and collecting valuable forensic data by deploying files and running custom scripts. In the instructions below the UAC package (i.e. uac-2.6.0.tar.gz) was stored in the CrowdStrike cloud. This way it can be deployed even if an endpoint is isolated via Network Containment feature. 1. Start by creating a temporary working directory on the live endpoint, then change the working directory to it. /> mkdir /tmp/uac /> cd /tmp/uac 2. Deploy and uncompress the UAC package. /tmp/uac> put \"uac-2.6.0.tar.gz\" /tmp/uac> runscript -Raw=```tar -zxf uac-2.6.0.tar.gz``` -Timeout=60 3. Change the working directory and run the collection. Note that CrowdStrike Falcon RTR session times out after 10 minutes. Make sure to keep the Falcon RTR session active. /tmp/uac> cd uac-2.6.0 /tmp/uac/uac-2.6.0> runscript -Raw=```./uac -p ir_triage /tmp/uac``` -Timeout=9999 4. Upload the output and log files to the CrowdStrike cloud using the get command. /tmp/uac/uac-2.6.0> get \"/tmp/uac/uac-hostname-os-20230101120101.tar.gz\" /tmp/uac/uac-2.6.0> get \"/tmp/uac/uac-hostname-os-20230101120101.log\" Note: The maximum file size for get is 4 GB. When needed, split the files using the split command.","title":"Using UAC with CrowdStrike Falcon Real Time Response"},{"location":"using_uac_with_cs_falcon_rtr/#using-uac-with-crowdstrike-falcon-real-time-response","text":"With CrowdStrike Falcon Real Time Response (RTR), analysts can remotely access and interact with endpoints in real time, gaining instant visibility into the system and collecting valuable forensic data by deploying files and running custom scripts. In the instructions below the UAC package (i.e. uac-2.6.0.tar.gz) was stored in the CrowdStrike cloud. This way it can be deployed even if an endpoint is isolated via Network Containment feature. 1. Start by creating a temporary working directory on the live endpoint, then change the working directory to it. /> mkdir /tmp/uac /> cd /tmp/uac 2. Deploy and uncompress the UAC package. /tmp/uac> put \"uac-2.6.0.tar.gz\" /tmp/uac> runscript -Raw=```tar -zxf uac-2.6.0.tar.gz``` -Timeout=60 3. Change the working directory and run the collection. Note that CrowdStrike Falcon RTR session times out after 10 minutes. Make sure to keep the Falcon RTR session active. /tmp/uac> cd uac-2.6.0 /tmp/uac/uac-2.6.0> runscript -Raw=```./uac -p ir_triage /tmp/uac``` -Timeout=9999 4. Upload the output and log files to the CrowdStrike cloud using the get command. /tmp/uac/uac-2.6.0> get \"/tmp/uac/uac-hostname-os-20230101120101.tar.gz\" /tmp/uac/uac-2.6.0> get \"/tmp/uac/uac-hostname-os-20230101120101.log\" Note: The maximum file size for get is 4 GB. When needed, split the files using the split command.","title":"Using UAC with CrowdStrike Falcon Real Time Response"}]}