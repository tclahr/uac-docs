{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Unix-like Artifacts Collector documentation UAC (Unix-like Artifacts Collector) is a powerful and extensible incident response tool designed for forensic investigators, security analysts, and IT professionals. It automates the collection of artifacts from a wide range of Unix-like systems, including AIX, ESXi, FreeBSD, Linux, macOS, NetBSD, NetScaler, OpenBSD and Solaris. Whether you're handling an intrusion, conducting forensic investigations, or performing compliance checks, UAC simplifies and accelerates data collection while minimizing reliance on external support during critical incidents. UAC reads YAML files on the fly and, based on their contents, collects relevant artifacts. This makes UAC very customizable and extensible. Key Highlights \ud83d\udcc2 Fully customizable via YAML profiles for tailored data collection. \u26a1 Lightweight, portable, and requires no installation or dependencies. \ud83d\udd12 Adheres to the order of volatility to ensure reliable data acquisition. \ud83d\udee0 Designed for diverse environments, including IoT devices and NAS systems. The source code is available on the project page. Main features Run everywhere with no dependencies (no installation required). Customizable and extensible collections and artifacts. Respect the order of volatility during artifact collection. Collect information about current running processes (including processes without a binary on disk). Hash running processes and executable files. Extract files and directories status to create a bodyfile. Collect system and user-specific data, configuration files and logs. Acquire volatile memory from Linux systems using different methods and tools. Support to write output to various cloud platforms. Supported operating systems UAC runs on any Unix-like system, regardless of the processor architecture. All UAC needs is shell :) AIX ESXi FreeBSD Linux macOS NetBSD NetScaler OpenBSD Solaris Note that UAC even runs on systems like Network Attached Storage (NAS) devices, Network devices such as OpenWrt, and IoT devices. Using UAC UAC does not need to be installed on the target system. Simply download the latest version from the releases page , uncompress it, and launch. It's that simple! Full Disk Access permission is a privacy feature introduced in macOS Mojave (10.14) that prevents some applications from accessing important data, such as Mail, Messages, and Safari files. So it is strongly recommended that you manually grant permission for Terminal application before running UAC from the terminal, or grant permission for remote users before running UAC via ssh. To execute a collection, you must supply at least a profile and/or a list of artifacts , and specify the destination directory. Any additional parameters are optional. Examples: Collect all artifacts based on the ir_triage profile, and save the output file to /tmp. ./uac -p ir_triage /tmp Collect all artifacts located in the artifacts/live_response directory, and save the output file to /tmp. ./uac -a ./artifacts/live_response/\\* /tmp Collect all artifacts based on the ir_triage profile, along with all artifacts located in the /my_custom_artifacts directory, and save the output file to /mnt/sda1. ./uac -p ir_triage -a /my_custom_artifacts/\\* /mnt/sda1 Collect a memory dump and all artifacts based on the full profile. ./uac -a ./artifacts/memory_dump/avml.yaml -p full /tmp Collect all artifacts based on the ir_triage profile excluding the bodyfile.yaml artifact. ./uac -p ir_triage -a \\!artifacts/bodyfile/bodyfile.yaml /tmp Command line options UAC is a command line tool, and as such, has several options that can be used to interact with it. It is recommended to run UAC from an external device/usb/network share to avoid overwriting evidence. Usage: ./uac [-h] [-V] [--debug] {-p PROFILE | -a ARTIFACT} DESTINATION or: ./uac --validate-artifact FILE or: ./uac --validate-profile FILE Optional Arguments: -h, --help Display this help and exit. -v, --verbose Increases the verbosity level. --debug Enable debug mode. --trace Enable trace messages. -V, --version Output version information and exit. Profiling Arguments: -p, --profile PROFILE Specify the collection profile name or path. Use '--profile list' to list all available profiles. -a, --artifacts ARTIFACT Specify the artifact(s) to be collected during the collection. The expression is a comma separated string where each element is an artifact. You can exclude individual artifacts by prefixing them with an exclamation mark (!). Special characters such as ! and * must be escaped with a backslash. Examples: --artifacts files/logs/\\*,\\!files/logs/var_log.yaml Use '--artifacts list [OPERATING_SYSTEM]' to list available artifacts (default: all). Positional Arguments: DESTINATION Specify the directory the output file should be copied to. Output Arguments: -o, --output-base-name BASENAME Specify the base name of the output file (without extension). Default: uac-%hostname%-%os%-%timestamp% -f, --output-format FORMAT Specify the output format. Compression will be enabled if gzip is available. Options: none, tar, zip (default: tar) -P, --output-password PASSWORD Specify the password to be used to encrypt the contents of the archive file. Applies to zip output format only. Collection Arguments: -c, --config FILE Load config from a specific file. -m, --mount-point MOUNT_POINT Specify the mount point (default: /). -s, --operating-system OPERATING_SYSTEM Specify the operating system. Options: aix, esxi, freebsd, linux, macos, netbsd netscaler, openbsd, solaris -H, --hash-collected Hash all collected files. -u, --run-as-non-root Disable root user check. Note that data collection may be limited. --enable-modifiers Enable artifacts that change the system state. --hostname HOSTNAME Specify the target system hostname. --temp-dir PATH Write all temporary data to this directory. Filter Arguments: --start-date YYYY-MM-DD Only collects files that were last modified/accessed/changed after the given date. --end-date YYYY-MM-DD Only collects files that were last modified/accessed/changed before the given date. Informational Arguments: --case-number CASE_NUMBER Specify the case number. --description DESCRIPTION Specify the description. --evidence-number EVIDENCE_NUMBER Specify the evidence number. --examiner EXAMINER Specify the examiner name. --notes NOTES Specify the notes. Remote Transfer Arguments: --sftp SERVER Transfer the output file to remote SFTP server. SERVER must be specified in the form [user@]host:[path] --sftp-port PORT Remote SFTP server port (default: 22). --sftp-identity-file FILE File from which the identity (private key) for public key authentication is read. --sftp-ssh-option Allow setting SSH options as key=value pairs. Can be used multiple times to set multiple options. --s3-provider Transfer the output and log files to S3 service. Options: amazon, google, ibm --s3-region S3 region name (default: us-east-1 [amazon], us-south [ibm]). --s3-bucket S3 bucket/cloud object storage name. --s3-access-key The access key for the bucket/cloud object storage. --s3-secret-key The secret access key for the bucket/cloud object storage. --s3-token The session/bearer token for the bucket/cloud object storage. --aws-s3-presigned-url URL Transfer the output file to AWS S3 using a pre-signed URL. --aws-s3-presigned-url-log-file URL Transfer the log file to AWS S3 using a pre-signed URL. --azure-storage-sas-url URL Transfer the output file to Azure Storage using a SAS URL. --azure-storage-sas-url-log-file URL Transfer the log file to Azure Storage using a SAS URL. --delete-local-on-successful-transfer Delete local output and log files on successful transfer. Validation Arguments: --validate-artifact FILE Validate artifact. --validate-profile FILE Validate profile. Optional Arguments --help Display the help and exit. -v, --verbose Increases the verbosity level. Enabling a higher verbosity level will result in the display of all executed commands. --debug Enable debug mode. Enabling debug mode will prevent the removal of the uac-data.tmp directory in the destination directory. This directory stores collected, temporary and debugging data during execution. --trace Enable set -x . Using set -x in a shell script enables command tracing by printing each command before execution, which helps in debugging and understanding the script's flow. -V, --version Output version information and exit. Profiling Arguments -p, --profile Specify the collection profile name. Profiles are used to define the list of artifacts that will be used during the execution. They are YAML files located in the profiles directory. Feel free to utilize multiple profiles to craft a highly tailored collection. Profiles will be processed in the sequence they are listed in the command line. It's important to note that duplicate artifacts will be gathered just once. Use --profile list to list available profiles. Examples: ./uac -p ir_triage DESTINATION ./uac -p ir_triage -p offline DESTINATION You also have the option to supply a file path to a custom profile located outside the profiles directory. Example: ./uac -p /home/user/my_custom_profile.yaml DESTINATION_DIR -a, --artifacts Specify the artifacts to be used during the collection. Artifacts define the parameters used by UAC collectors to gather data from the target system. They are YAML files located in the artifacts directory. Feel free to utilize multiple artifacts to craft a highly tailored collection. Artifacts will be processed in the sequence they are listed in the command line. It's important to note that duplicate artifacts will be gathered just once. You have the option to specify multiple artifacts simultaneously by either separating them with a comma (without spaces) or by using -a / --artifacts multiple times. Wildcards and glob-style patterns are supported. Artifacts can be excluded using an exclamation mark ( ! ) prefix. Note that in many shells, special characters like ! and * require escaping with a backslash. Use --artifacts list to list all available artifacts. Use --artifacts list [OPERATING_SYSTEM] to list all available artifacts for a specific operating system. Examples: ./uac -a files/logs/\\*,\\!files/logs/var_log.yaml DESTINATION ./uac -a artifacts/live_response/\\* -a ./artifacts/files/logs/\\* -a \\!files/logs/var_log.yaml DESTINATION You also have the option to supply a file path to a custom artifact file located outside the artifacts directory. Examples: ./uac -a files/logs/\\* -a /home/user/my_artifact_file.yaml DESTINATION ./uac -a /home/user/my_artifacts/\\* DESTINATION Positional Arguments DESTINATION The directory where the output and acquisition log files should be copied to. Output Arguments -o, --output-base-name Specify the base name of the output file (without extension). Default is uac-%hostname%-%os%-%timestamp% Examples: ./uac -p ir_triage -o my_custom_output_file_name DESTINATION ./uac -a ./artifacts/files/browsers/chrome.yaml -o uac-chrome-only-%hostname%-%timestamp% DESTINATION -f, --output-format Specify the output format. none : Collected data will not be archived or compressed. Instead, it will be copied directly into the specified output directory. tar : Collected data will be archived and compressed into a .tar file. This is the default format used by UAC. Compression will be enabled if gzip is available in the target system. zip : Collected data will be archived and compressed into a .zip file. Examples: ./uac -p full --output-format none DESTINATION -P, --output-password Specify the password to be used to encrypt the contents of the archive file. Applies to the zip output format only. Examples: ./uac -p ir_triage --output-format zip --output-password \"infected\" DESTINATION Collection Arguments -c, --config Load config from a specific file to override the default and the operating system specific configuration. Examples: ./uac -p full -c /home/user/my_custom_uac_config.conf DESTINATION -m, --mount-point The mount point where the files will be collected from. Default is / . Examples: ./uac -p offline -m /mnt/sda1 DESTINATION -s, --operating-system This option allows you to force UAC to collect artifacts for a specific operating system. By default, UAC automatically attempts to identify the target operating system. Value Description aix IBM AIX esxi VMware ESXi freebsd FreeBSD linux Linux macos macOS netbsd NetBSD netscaler NetScaler openbsd OpenBSD solaris Solaris -H, --hash-collected Enabling this option will cause UAC to hash all collected files and save the results in a hash file. To accomplish this, all collected data must be copied to the destination directory first. Therefore, ensure you have twice the free space available on the system: once for the collected data and once for the output file. Additionally, note that this process will increase the collection running time. -u, --run-as-non-root Disable root user check. Note that artifact collection may be limited. --enable-modifiers Enabling this option will cause UAC to run artifacts that change the current system state. Please refer to the modifiers section for more information. --hostname Specify the hostname to be used as the runtime variable %hostname% . By default, UAC automatically attempts to identify the target system's hostname. --temp-dir The location where the uac-data.tmp directory will be created. This directory stores collected, temporary and debugging data during execution. By default, uac-data.tmp will be created within the DESTINATION directory. Filter Arguments --start-date Collect only the files that were last modified, accessed, or changed after a specific date. The date must be in the format: YYYY-MM-DD. --end-date Collect only the files that were last modified, accessed, or changed before a specific date. The date must be in the format: YYYY-MM-DD. Informational Arguments --case-number Specify the case number. --description Specify the case description. --evidence-number Specify the evidence number. --examiner Specify the examiner's name. --notes Specify the case notes. Remote Transfer Arguments --sftp SFTP server host/IP for transferring the output and acquisition log files. It also transfers collected data when none is used as the output format. It must be specified in the form [user@]host:[path] Examples: ./uac -p full --sftp \"user@host:/remote_dir\" DESTINATION --sftp-port SFTP server port. Default is 22 . --sftp-identity-file File from which the identity (private key) for public-key authentication is read. --sftp-ssh-option Allow setting SSH options as key=value pairs. Can be used multiple times to set multiple options. Examples: ./uac -p ir_triage --sftp \"user@host:/remote_dir\" --sftp-ssh-option \"StrictHostKeyChecking=no\" --sftp-ssh-option \"UserKnownHostsFile=/dev/null\" DESTINATION --s3-provider Transfer the output and log file to a S3 bucket/cloud object storage. Value Description amazon Amazon Cloud google Google Cloud ibm IBM Cloud --s3-region S3 region name. Default: us-east-1 (amazon), us-south (ibm) --s3-bucket S3 bucket/cloud object storage name --s3-access-key The access key for the bucket/cloud object storage. --s3-secret-key The secret access key for the bucket/cloud object storage. ./uac -p ir_triage --s3-provider amazon --s3-region us-east-1 --s3-bucket uac-test --s3-access-key \"AKIAXKDAGGVYYXDZKAGH1\" --s3-secret-key \"plJqM2mFAu2lVBhpi5UrL+X+8hL+LOYOJryhp2s2\" DESTINATION --s3-token The session/bearer token for the bucket/cloud object storage. Examples: ./uac -p ir_triage --s3-provider ibm --s3-region us-south --s3-bucket uac-test --s3-token \"eyJraWQiOiIyMDIyMDkxMzA4MjciLCJhbGciOiJSUzI1NiJ9.eyJpYW1faWQiOiJJQk1pZC0wNjAwMDFLVVJDIiwiaWQiOiJJQk1pZC0wNjAwMDFLVVJDIiwicmVhbG1pZCI6IklCTWlkIiwianRpIjoiYWVhMDE0MGYtZGM2Ni00MzE0LWJhMjMtZTIxOTAzZmQ3Y2ZhIiwiaWRlbnRpZmllciI6IjA2MDAwMUtVUkMiLCJnaXZlbl9uYW1lIjoiVGhpYWdvIiwiZmFtaWx5X25hbWUiOiJDYW5ve\" DESTINATION --aws-s3-presigned-url This allows for using a pre-signed URL to upload the output file to AWS S3. Make sure you generate a PUT URL for this to work. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p full --aws-s3-presigned-url 'https://uac-test.s3.amazonaws.com/uac-output.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795' DESTINATION --aws-s3-presigned-url-log-file This allows for using a pre-signed URL to upload the acquisition log file to AWS S3. Make sure you generate a PUT URL for this to work. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p full --aws-s3-presigned-url 'https://uac-test.s3.amazonaws.com/uac-output.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795' --aws-s3-presigned-url-log-file 'https://uac-test.s3.amazonaws.com/uac-output.log?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795' DESTINATION --azure-storage-sas-url This allows for using a shared access signature (SAS) URL to upload the output file to Azure Storage. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p ir_triage --azure-storage-sas-url 'https://uac-test.blob.core.windows.net/uac-container/uac-output.tar.gz?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' DESTINATION --azure-storage-sas-url-log-file This allows for using a shared access signature (SAS) URL to upload the acquisition log to Azure Storage. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p ir_triage --azure-storage-sas-url 'https://uac-test.blob.core.windows.net/uac-container/uac-output.tar.gz?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' --azure-storage-sas-url-log-file 'https://uac-test.blob.core.windows.net/uac-container/uac-output.log?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' DESTINATION --delete-local-on-successful-transfer Delete the local output and acquisition log files if they were successfully transferred to a remote destination such as an SFTP server or S3. Validation Arguments --validate-artifact Validate whether the artifact YAML file contains any errors. Examples: ./uac --validate-artifact my_custom_artifact.yaml --validate-profile Validate whether the profile YAML file contains any errors. Examples: ./uac --validate-profile my_custom_profile.yaml Validating custom artifacts It is recommended that you validate your custom artifacts before running a collection. You can do it using the --validate-artifact option as shown below. ./uac --validate-artifact /path_to/my_custom_artifact.yaml Validating custom profiles It is recommended that you validate your custom profiles before running a collection. You can do it using the --validate-profile option as shown below. ./uac --validate-profile /path_to/my_custom_profile.yaml Using your binary files In most cases, the executables should be placed in the [UAC_DIRECTORY]/bin directory, along with any additional support files it needs to run. For example, if you have an artifact that uses an executable named my_script.sh , you should place this binary in the [UAC_DIRECTORY]/bin directory. In the case where you have executables with the same name, but for multiple operating systems, they should be placed in the [UAC_DIRECTORY]/bin/[OS] directory. For example, if you have an artifact that uses an executable named lsof , but you have two binary files, one for Linux and one for FreeBSD, you should place the binaries in the [UAC_DIRECTORY]/bin/linux and [UAC_DIRECTORY]/bin/freebsd directories. Note that the operating system name must be in lowercase. In the case where you have executables that can be run on multiple operating systems, they should be placed in the [UAC_DIRECTORY]/bin/[OS1_OS2_OS3] directory. Note that you can have multiple operating systems separated by an underscore _ . For example, if you have an artifact that uses an executable named 'netstat' that runs on both Linux and ESXi systems, you should place the binary either in the [UAC_DIRECTORY]/bin/linux_esxi directory or place the binary in the [UAC_DIRECTORY]/bin/linux and [UAC_DIRECTORY]/bin/esxi directories. In the case where you have executables with the same name, but for multiple operating systems and multiple architectures, they should be placed in the [UAC_DIRECTORY]/bin/[OS]/[ARCH] directory. For example, if you have an artifact that uses an executable named ss , but you have binary files for Linux arm64 and ppc64, FreeBSD i386, and Solaris x86_64 and sparc64, you should place the binary files in the [UAC_DIRECTORY]/bin/linux/arm64 , [UAC_DIRECTORY]/bin/linux/ppc64 , [UAC_DIRECTORY]/bin/freebsd/i386 , [UAC_DIRECTORY]/bin/solaris/x86_64 and [UAC_DIRECTORY]/bin/solaris/sparc64 directories. Modifiers Modifiers are artifacts that include commands that will alter the current system state when executed on the target system. Please refer to the modifier property page for more information. Troubleshooting and support Debug mode Debug mode --debug may be useful if you are trying to find the source of an error. Enabling debug mode will prevent the removal of the uac-data.tmp directory from the destination directory. This directory stores collected, temporary and debugging data during execution. Trace messages Using --trace enables command tracing by printing each command before execution, which helps in debugging and understanding the script's flow. It is recommended to redirect the stderr (shell tracing messages) to a text file. Consider the following command to enable command tracing and storing them in /tmp/uac-tracing.log file. ./uac -p ir_triage --trace DESTINATION 2>/tmp/uac-tracing.log File an issue on Github If you are a user and find a bug, please submit an issue and provide enough information for others to reproduce it. One of the project's maintainers should respond to your issue soon. Before submitting, please check our list of already reported bugs to ensure you are not raising a duplicate. See our Contributing Guide for more information. Contributing Contributions make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated. Have you created any artifacts? Please share them with us! You can contribute with new artifacts, profiles, bug fixes, or propose new features. Please read our Contributing Guide before submitting a Pull Request to the project. Support For general help using UAC, please refer to the project documentation page . For additional help, you can use one of the following channels: Discord (For live discussion with the community and UAC team) GitHub (Bug reports and contributions) Twitter (Get the news fast) Support the Project If you find UAC helpful, please give us a \u2b50 on GitHub ! This helps others discover the project and motivates us to improve it further. License The UAC project uses the Apache License Version 2.0 software license.","title":"Getting Started"},{"location":"#welcome-to-the-unix-like-artifacts-collector-documentation","text":"UAC (Unix-like Artifacts Collector) is a powerful and extensible incident response tool designed for forensic investigators, security analysts, and IT professionals. It automates the collection of artifacts from a wide range of Unix-like systems, including AIX, ESXi, FreeBSD, Linux, macOS, NetBSD, NetScaler, OpenBSD and Solaris. Whether you're handling an intrusion, conducting forensic investigations, or performing compliance checks, UAC simplifies and accelerates data collection while minimizing reliance on external support during critical incidents. UAC reads YAML files on the fly and, based on their contents, collects relevant artifacts. This makes UAC very customizable and extensible.","title":"Welcome to the Unix-like Artifacts Collector documentation"},{"location":"#key-highlights","text":"\ud83d\udcc2 Fully customizable via YAML profiles for tailored data collection. \u26a1 Lightweight, portable, and requires no installation or dependencies. \ud83d\udd12 Adheres to the order of volatility to ensure reliable data acquisition. \ud83d\udee0 Designed for diverse environments, including IoT devices and NAS systems. The source code is available on the project page.","title":"Key Highlights"},{"location":"#main-features","text":"Run everywhere with no dependencies (no installation required). Customizable and extensible collections and artifacts. Respect the order of volatility during artifact collection. Collect information about current running processes (including processes without a binary on disk). Hash running processes and executable files. Extract files and directories status to create a bodyfile. Collect system and user-specific data, configuration files and logs. Acquire volatile memory from Linux systems using different methods and tools. Support to write output to various cloud platforms.","title":"Main features"},{"location":"#supported-operating-systems","text":"UAC runs on any Unix-like system, regardless of the processor architecture. All UAC needs is shell :) AIX ESXi FreeBSD Linux macOS NetBSD NetScaler OpenBSD Solaris Note that UAC even runs on systems like Network Attached Storage (NAS) devices, Network devices such as OpenWrt, and IoT devices.","title":"Supported operating systems"},{"location":"#using-uac","text":"UAC does not need to be installed on the target system. Simply download the latest version from the releases page , uncompress it, and launch. It's that simple! Full Disk Access permission is a privacy feature introduced in macOS Mojave (10.14) that prevents some applications from accessing important data, such as Mail, Messages, and Safari files. So it is strongly recommended that you manually grant permission for Terminal application before running UAC from the terminal, or grant permission for remote users before running UAC via ssh. To execute a collection, you must supply at least a profile and/or a list of artifacts , and specify the destination directory. Any additional parameters are optional. Examples: Collect all artifacts based on the ir_triage profile, and save the output file to /tmp. ./uac -p ir_triage /tmp Collect all artifacts located in the artifacts/live_response directory, and save the output file to /tmp. ./uac -a ./artifacts/live_response/\\* /tmp Collect all artifacts based on the ir_triage profile, along with all artifacts located in the /my_custom_artifacts directory, and save the output file to /mnt/sda1. ./uac -p ir_triage -a /my_custom_artifacts/\\* /mnt/sda1 Collect a memory dump and all artifacts based on the full profile. ./uac -a ./artifacts/memory_dump/avml.yaml -p full /tmp Collect all artifacts based on the ir_triage profile excluding the bodyfile.yaml artifact. ./uac -p ir_triage -a \\!artifacts/bodyfile/bodyfile.yaml /tmp","title":"Using UAC"},{"location":"#command-line-options","text":"UAC is a command line tool, and as such, has several options that can be used to interact with it. It is recommended to run UAC from an external device/usb/network share to avoid overwriting evidence. Usage: ./uac [-h] [-V] [--debug] {-p PROFILE | -a ARTIFACT} DESTINATION or: ./uac --validate-artifact FILE or: ./uac --validate-profile FILE Optional Arguments: -h, --help Display this help and exit. -v, --verbose Increases the verbosity level. --debug Enable debug mode. --trace Enable trace messages. -V, --version Output version information and exit. Profiling Arguments: -p, --profile PROFILE Specify the collection profile name or path. Use '--profile list' to list all available profiles. -a, --artifacts ARTIFACT Specify the artifact(s) to be collected during the collection. The expression is a comma separated string where each element is an artifact. You can exclude individual artifacts by prefixing them with an exclamation mark (!). Special characters such as ! and * must be escaped with a backslash. Examples: --artifacts files/logs/\\*,\\!files/logs/var_log.yaml Use '--artifacts list [OPERATING_SYSTEM]' to list available artifacts (default: all). Positional Arguments: DESTINATION Specify the directory the output file should be copied to. Output Arguments: -o, --output-base-name BASENAME Specify the base name of the output file (without extension). Default: uac-%hostname%-%os%-%timestamp% -f, --output-format FORMAT Specify the output format. Compression will be enabled if gzip is available. Options: none, tar, zip (default: tar) -P, --output-password PASSWORD Specify the password to be used to encrypt the contents of the archive file. Applies to zip output format only. Collection Arguments: -c, --config FILE Load config from a specific file. -m, --mount-point MOUNT_POINT Specify the mount point (default: /). -s, --operating-system OPERATING_SYSTEM Specify the operating system. Options: aix, esxi, freebsd, linux, macos, netbsd netscaler, openbsd, solaris -H, --hash-collected Hash all collected files. -u, --run-as-non-root Disable root user check. Note that data collection may be limited. --enable-modifiers Enable artifacts that change the system state. --hostname HOSTNAME Specify the target system hostname. --temp-dir PATH Write all temporary data to this directory. Filter Arguments: --start-date YYYY-MM-DD Only collects files that were last modified/accessed/changed after the given date. --end-date YYYY-MM-DD Only collects files that were last modified/accessed/changed before the given date. Informational Arguments: --case-number CASE_NUMBER Specify the case number. --description DESCRIPTION Specify the description. --evidence-number EVIDENCE_NUMBER Specify the evidence number. --examiner EXAMINER Specify the examiner name. --notes NOTES Specify the notes. Remote Transfer Arguments: --sftp SERVER Transfer the output file to remote SFTP server. SERVER must be specified in the form [user@]host:[path] --sftp-port PORT Remote SFTP server port (default: 22). --sftp-identity-file FILE File from which the identity (private key) for public key authentication is read. --sftp-ssh-option Allow setting SSH options as key=value pairs. Can be used multiple times to set multiple options. --s3-provider Transfer the output and log files to S3 service. Options: amazon, google, ibm --s3-region S3 region name (default: us-east-1 [amazon], us-south [ibm]). --s3-bucket S3 bucket/cloud object storage name. --s3-access-key The access key for the bucket/cloud object storage. --s3-secret-key The secret access key for the bucket/cloud object storage. --s3-token The session/bearer token for the bucket/cloud object storage. --aws-s3-presigned-url URL Transfer the output file to AWS S3 using a pre-signed URL. --aws-s3-presigned-url-log-file URL Transfer the log file to AWS S3 using a pre-signed URL. --azure-storage-sas-url URL Transfer the output file to Azure Storage using a SAS URL. --azure-storage-sas-url-log-file URL Transfer the log file to Azure Storage using a SAS URL. --delete-local-on-successful-transfer Delete local output and log files on successful transfer. Validation Arguments: --validate-artifact FILE Validate artifact. --validate-profile FILE Validate profile.","title":"Command line options"},{"location":"#optional-arguments","text":"","title":"Optional Arguments"},{"location":"#-help","text":"Display the help and exit.","title":"--help"},{"location":"#-v-verbose","text":"Increases the verbosity level. Enabling a higher verbosity level will result in the display of all executed commands.","title":"-v, --verbose"},{"location":"#-debug","text":"Enable debug mode. Enabling debug mode will prevent the removal of the uac-data.tmp directory in the destination directory. This directory stores collected, temporary and debugging data during execution.","title":"--debug"},{"location":"#-trace","text":"Enable set -x . Using set -x in a shell script enables command tracing by printing each command before execution, which helps in debugging and understanding the script's flow.","title":"--trace"},{"location":"#-v-version","text":"Output version information and exit.","title":"-V, --version"},{"location":"#profiling-arguments","text":"","title":"Profiling Arguments"},{"location":"#-p-profile","text":"Specify the collection profile name. Profiles are used to define the list of artifacts that will be used during the execution. They are YAML files located in the profiles directory. Feel free to utilize multiple profiles to craft a highly tailored collection. Profiles will be processed in the sequence they are listed in the command line. It's important to note that duplicate artifacts will be gathered just once. Use --profile list to list available profiles. Examples: ./uac -p ir_triage DESTINATION ./uac -p ir_triage -p offline DESTINATION You also have the option to supply a file path to a custom profile located outside the profiles directory. Example: ./uac -p /home/user/my_custom_profile.yaml DESTINATION_DIR","title":"-p, --profile"},{"location":"#-a-artifacts","text":"Specify the artifacts to be used during the collection. Artifacts define the parameters used by UAC collectors to gather data from the target system. They are YAML files located in the artifacts directory. Feel free to utilize multiple artifacts to craft a highly tailored collection. Artifacts will be processed in the sequence they are listed in the command line. It's important to note that duplicate artifacts will be gathered just once. You have the option to specify multiple artifacts simultaneously by either separating them with a comma (without spaces) or by using -a / --artifacts multiple times. Wildcards and glob-style patterns are supported. Artifacts can be excluded using an exclamation mark ( ! ) prefix. Note that in many shells, special characters like ! and * require escaping with a backslash. Use --artifacts list to list all available artifacts. Use --artifacts list [OPERATING_SYSTEM] to list all available artifacts for a specific operating system. Examples: ./uac -a files/logs/\\*,\\!files/logs/var_log.yaml DESTINATION ./uac -a artifacts/live_response/\\* -a ./artifacts/files/logs/\\* -a \\!files/logs/var_log.yaml DESTINATION You also have the option to supply a file path to a custom artifact file located outside the artifacts directory. Examples: ./uac -a files/logs/\\* -a /home/user/my_artifact_file.yaml DESTINATION ./uac -a /home/user/my_artifacts/\\* DESTINATION","title":"-a, --artifacts"},{"location":"#positional-arguments","text":"","title":"Positional Arguments"},{"location":"#destination","text":"The directory where the output and acquisition log files should be copied to.","title":"DESTINATION"},{"location":"#output-arguments","text":"","title":"Output Arguments"},{"location":"#-o-output-base-name","text":"Specify the base name of the output file (without extension). Default is uac-%hostname%-%os%-%timestamp% Examples: ./uac -p ir_triage -o my_custom_output_file_name DESTINATION ./uac -a ./artifacts/files/browsers/chrome.yaml -o uac-chrome-only-%hostname%-%timestamp% DESTINATION","title":"-o, --output-base-name"},{"location":"#-f-output-format","text":"Specify the output format. none : Collected data will not be archived or compressed. Instead, it will be copied directly into the specified output directory. tar : Collected data will be archived and compressed into a .tar file. This is the default format used by UAC. Compression will be enabled if gzip is available in the target system. zip : Collected data will be archived and compressed into a .zip file. Examples: ./uac -p full --output-format none DESTINATION","title":"-f, --output-format"},{"location":"#-p-output-password","text":"Specify the password to be used to encrypt the contents of the archive file. Applies to the zip output format only. Examples: ./uac -p ir_triage --output-format zip --output-password \"infected\" DESTINATION","title":"-P, --output-password"},{"location":"#collection-arguments","text":"","title":"Collection Arguments"},{"location":"#-c-config","text":"Load config from a specific file to override the default and the operating system specific configuration. Examples: ./uac -p full -c /home/user/my_custom_uac_config.conf DESTINATION","title":"-c, --config"},{"location":"#-m-mount-point","text":"The mount point where the files will be collected from. Default is / . Examples: ./uac -p offline -m /mnt/sda1 DESTINATION","title":"-m, --mount-point"},{"location":"#-s-operating-system","text":"This option allows you to force UAC to collect artifacts for a specific operating system. By default, UAC automatically attempts to identify the target operating system. Value Description aix IBM AIX esxi VMware ESXi freebsd FreeBSD linux Linux macos macOS netbsd NetBSD netscaler NetScaler openbsd OpenBSD solaris Solaris","title":"-s, --operating-system"},{"location":"#-h-hash-collected","text":"Enabling this option will cause UAC to hash all collected files and save the results in a hash file. To accomplish this, all collected data must be copied to the destination directory first. Therefore, ensure you have twice the free space available on the system: once for the collected data and once for the output file. Additionally, note that this process will increase the collection running time.","title":"-H, --hash-collected"},{"location":"#-u-run-as-non-root","text":"Disable root user check. Note that artifact collection may be limited.","title":"-u, --run-as-non-root"},{"location":"#-enable-modifiers","text":"Enabling this option will cause UAC to run artifacts that change the current system state. Please refer to the modifiers section for more information.","title":"--enable-modifiers"},{"location":"#-hostname","text":"Specify the hostname to be used as the runtime variable %hostname% . By default, UAC automatically attempts to identify the target system's hostname.","title":"--hostname"},{"location":"#-temp-dir","text":"The location where the uac-data.tmp directory will be created. This directory stores collected, temporary and debugging data during execution. By default, uac-data.tmp will be created within the DESTINATION directory.","title":"--temp-dir"},{"location":"#filter-arguments","text":"","title":"Filter Arguments"},{"location":"#-start-date","text":"Collect only the files that were last modified, accessed, or changed after a specific date. The date must be in the format: YYYY-MM-DD.","title":"--start-date"},{"location":"#-end-date","text":"Collect only the files that were last modified, accessed, or changed before a specific date. The date must be in the format: YYYY-MM-DD.","title":"--end-date"},{"location":"#informational-arguments","text":"","title":"Informational Arguments"},{"location":"#-case-number","text":"Specify the case number.","title":"--case-number"},{"location":"#-description","text":"Specify the case description.","title":"--description"},{"location":"#-evidence-number","text":"Specify the evidence number.","title":"--evidence-number"},{"location":"#-examiner","text":"Specify the examiner's name.","title":"--examiner"},{"location":"#-notes","text":"Specify the case notes.","title":"--notes"},{"location":"#remote-transfer-arguments","text":"","title":"Remote Transfer Arguments"},{"location":"#-sftp","text":"SFTP server host/IP for transferring the output and acquisition log files. It also transfers collected data when none is used as the output format. It must be specified in the form [user@]host:[path] Examples: ./uac -p full --sftp \"user@host:/remote_dir\" DESTINATION","title":"--sftp"},{"location":"#-sftp-port","text":"SFTP server port. Default is 22 .","title":"--sftp-port"},{"location":"#-sftp-identity-file","text":"File from which the identity (private key) for public-key authentication is read.","title":"--sftp-identity-file"},{"location":"#-sftp-ssh-option","text":"Allow setting SSH options as key=value pairs. Can be used multiple times to set multiple options. Examples: ./uac -p ir_triage --sftp \"user@host:/remote_dir\" --sftp-ssh-option \"StrictHostKeyChecking=no\" --sftp-ssh-option \"UserKnownHostsFile=/dev/null\" DESTINATION","title":"--sftp-ssh-option"},{"location":"#-s3-provider","text":"Transfer the output and log file to a S3 bucket/cloud object storage. Value Description amazon Amazon Cloud google Google Cloud ibm IBM Cloud","title":"--s3-provider"},{"location":"#-s3-region","text":"S3 region name. Default: us-east-1 (amazon), us-south (ibm)","title":"--s3-region"},{"location":"#-s3-bucket","text":"S3 bucket/cloud object storage name","title":"--s3-bucket"},{"location":"#-s3-access-key","text":"The access key for the bucket/cloud object storage.","title":"--s3-access-key"},{"location":"#-s3-secret-key","text":"The secret access key for the bucket/cloud object storage. ./uac -p ir_triage --s3-provider amazon --s3-region us-east-1 --s3-bucket uac-test --s3-access-key \"AKIAXKDAGGVYYXDZKAGH1\" --s3-secret-key \"plJqM2mFAu2lVBhpi5UrL+X+8hL+LOYOJryhp2s2\" DESTINATION","title":"--s3-secret-key"},{"location":"#-s3-token","text":"The session/bearer token for the bucket/cloud object storage. Examples: ./uac -p ir_triage --s3-provider ibm --s3-region us-south --s3-bucket uac-test --s3-token \"eyJraWQiOiIyMDIyMDkxMzA4MjciLCJhbGciOiJSUzI1NiJ9.eyJpYW1faWQiOiJJQk1pZC0wNjAwMDFLVVJDIiwiaWQiOiJJQk1pZC0wNjAwMDFLVVJDIiwicmVhbG1pZCI6IklCTWlkIiwianRpIjoiYWVhMDE0MGYtZGM2Ni00MzE0LWJhMjMtZTIxOTAzZmQ3Y2ZhIiwiaWRlbnRpZmllciI6IjA2MDAwMUtVUkMiLCJnaXZlbl9uYW1lIjoiVGhpYWdvIiwiZmFtaWx5X25hbWUiOiJDYW5ve\" DESTINATION","title":"--s3-token"},{"location":"#-aws-s3-presigned-url","text":"This allows for using a pre-signed URL to upload the output file to AWS S3. Make sure you generate a PUT URL for this to work. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p full --aws-s3-presigned-url 'https://uac-test.s3.amazonaws.com/uac-output.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795' DESTINATION","title":"--aws-s3-presigned-url"},{"location":"#-aws-s3-presigned-url-log-file","text":"This allows for using a pre-signed URL to upload the acquisition log file to AWS S3. Make sure you generate a PUT URL for this to work. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p full --aws-s3-presigned-url 'https://uac-test.s3.amazonaws.com/uac-output.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795' --aws-s3-presigned-url-log-file 'https://uac-test.s3.amazonaws.com/uac-output.log?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ALIATVL26RGHMZ23AUV6%2F20220924%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220924T135105Z&X-Amz-Expires=360000&X-Amz-SignedHeaders=host&X-Amz-Signature=74328833a872951ed54dc0dd57180b814a808ad53efc97b361487c10a87bc795' DESTINATION","title":"--aws-s3-presigned-url-log-file"},{"location":"#-azure-storage-sas-url","text":"This allows for using a shared access signature (SAS) URL to upload the output file to Azure Storage. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p ir_triage --azure-storage-sas-url 'https://uac-test.blob.core.windows.net/uac-container/uac-output.tar.gz?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' DESTINATION","title":"--azure-storage-sas-url"},{"location":"#-azure-storage-sas-url-log-file","text":"This allows for using a shared access signature (SAS) URL to upload the acquisition log to Azure Storage. It is strongly recommended to use single quotes to enclose the URL. Example: ./uac -p ir_triage --azure-storage-sas-url 'https://uac-test.blob.core.windows.net/uac-container/uac-output.tar.gz?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' --azure-storage-sas-url-log-file 'https://uac-test.blob.core.windows.net/uac-container/uac-output.log?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' DESTINATION","title":"--azure-storage-sas-url-log-file"},{"location":"#-delete-local-on-successful-transfer","text":"Delete the local output and acquisition log files if they were successfully transferred to a remote destination such as an SFTP server or S3.","title":"--delete-local-on-successful-transfer"},{"location":"#validation-arguments","text":"","title":"Validation Arguments"},{"location":"#-validate-artifact","text":"Validate whether the artifact YAML file contains any errors. Examples: ./uac --validate-artifact my_custom_artifact.yaml","title":"--validate-artifact"},{"location":"#-validate-profile","text":"Validate whether the profile YAML file contains any errors. Examples: ./uac --validate-profile my_custom_profile.yaml","title":"--validate-profile"},{"location":"#validating-custom-artifacts","text":"It is recommended that you validate your custom artifacts before running a collection. You can do it using the --validate-artifact option as shown below. ./uac --validate-artifact /path_to/my_custom_artifact.yaml","title":"Validating custom artifacts"},{"location":"#validating-custom-profiles","text":"It is recommended that you validate your custom profiles before running a collection. You can do it using the --validate-profile option as shown below. ./uac --validate-profile /path_to/my_custom_profile.yaml","title":"Validating custom profiles"},{"location":"#using-your-binary-files","text":"In most cases, the executables should be placed in the [UAC_DIRECTORY]/bin directory, along with any additional support files it needs to run. For example, if you have an artifact that uses an executable named my_script.sh , you should place this binary in the [UAC_DIRECTORY]/bin directory. In the case where you have executables with the same name, but for multiple operating systems, they should be placed in the [UAC_DIRECTORY]/bin/[OS] directory. For example, if you have an artifact that uses an executable named lsof , but you have two binary files, one for Linux and one for FreeBSD, you should place the binaries in the [UAC_DIRECTORY]/bin/linux and [UAC_DIRECTORY]/bin/freebsd directories. Note that the operating system name must be in lowercase. In the case where you have executables that can be run on multiple operating systems, they should be placed in the [UAC_DIRECTORY]/bin/[OS1_OS2_OS3] directory. Note that you can have multiple operating systems separated by an underscore _ . For example, if you have an artifact that uses an executable named 'netstat' that runs on both Linux and ESXi systems, you should place the binary either in the [UAC_DIRECTORY]/bin/linux_esxi directory or place the binary in the [UAC_DIRECTORY]/bin/linux and [UAC_DIRECTORY]/bin/esxi directories. In the case where you have executables with the same name, but for multiple operating systems and multiple architectures, they should be placed in the [UAC_DIRECTORY]/bin/[OS]/[ARCH] directory. For example, if you have an artifact that uses an executable named ss , but you have binary files for Linux arm64 and ppc64, FreeBSD i386, and Solaris x86_64 and sparc64, you should place the binary files in the [UAC_DIRECTORY]/bin/linux/arm64 , [UAC_DIRECTORY]/bin/linux/ppc64 , [UAC_DIRECTORY]/bin/freebsd/i386 , [UAC_DIRECTORY]/bin/solaris/x86_64 and [UAC_DIRECTORY]/bin/solaris/sparc64 directories.","title":"Using your binary files"},{"location":"#modifiers","text":"Modifiers are artifacts that include commands that will alter the current system state when executed on the target system. Please refer to the modifier property page for more information.","title":"Modifiers"},{"location":"#troubleshooting-and-support","text":"","title":"Troubleshooting and support"},{"location":"#debug-mode","text":"Debug mode --debug may be useful if you are trying to find the source of an error. Enabling debug mode will prevent the removal of the uac-data.tmp directory from the destination directory. This directory stores collected, temporary and debugging data during execution.","title":"Debug mode"},{"location":"#trace-messages","text":"Using --trace enables command tracing by printing each command before execution, which helps in debugging and understanding the script's flow. It is recommended to redirect the stderr (shell tracing messages) to a text file. Consider the following command to enable command tracing and storing them in /tmp/uac-tracing.log file. ./uac -p ir_triage --trace DESTINATION 2>/tmp/uac-tracing.log","title":"Trace messages"},{"location":"#file-an-issue-on-github","text":"If you are a user and find a bug, please submit an issue and provide enough information for others to reproduce it. One of the project's maintainers should respond to your issue soon. Before submitting, please check our list of already reported bugs to ensure you are not raising a duplicate. See our Contributing Guide for more information.","title":"File an issue on Github"},{"location":"#contributing","text":"Contributions make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated. Have you created any artifacts? Please share them with us! You can contribute with new artifacts, profiles, bug fixes, or propose new features. Please read our Contributing Guide before submitting a Pull Request to the project.","title":"Contributing"},{"location":"#support","text":"For general help using UAC, please refer to the project documentation page . For additional help, you can use one of the following channels: Discord (For live discussion with the community and UAC team) GitHub (Bug reports and contributions) Twitter (Get the news fast)","title":"Support"},{"location":"#support-the-project","text":"If you find UAC helpful, please give us a \u2b50 on GitHub ! This helps others discover the project and motivates us to improve it further.","title":"Support the Project"},{"location":"#license","text":"The UAC project uses the Apache License Version 2.0 software license.","title":"License"},{"location":"artifacts/","text":"Artifacts definition Artifacts define the parameters used by UAC collectors to gather data from the target system. UAC dynamically reads YAML artifact definition files and determines which of the five available collectors to use: command , file , find , hash , or stat . Based on the contents of each artifact, UAC collects the appropriate data and saves it to the specified output locations. Each artifact file must include a version field and a list of artifact rules. Every rule defines how data is collected, which platforms it supports, and what collector it uses. Here's an example containing two rules, each using a different collector: version: 1.0 artifacts: - description: Hash running processes. supported_os: [aix] collector: hash path: /proc/[0-9]*/object/a.out output_directory: /live_response/process output_file: hash_running_processes - description: Report a snapshot of the current processes. supported_os: [aix, freebsd, linux, macos, netbsd, openbsd, solaris] collector: command command: ps auxwww output_directory: /live_response/process output_file: ps_auxwww.txt It's a common practice to group artifacts by related topics within the same YAML file. This structure allows for more precise and efficient artifact collection tailored to your specific needs. YAML File Structure Overview version Required Indicates the version of the artifact file. Increment this value whenever you modify the file, such as by updating rules or adding new artifacts. version: 1.0 artifacts Required A list of rules specifying what to collect. Each rule must contain: description supported_os collector Other fields depend on the selected collector. version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command ... # additional options depending on the collector - description: Hash files that contain at least +x flag set for owner. supported_os: [all] collector: hash ... # additional options depending on the collector - description: Collect /var/log logs. supported_os: [all] collector: file ... # additional options depending on the collector Collectors Overview Each collector serves a specific function and comes with its own set of required and optional fields. The following sections provide a complete explanation of each collector along with practical examples. command Use the command collector to execute system commands and save their output to a specified file. UAC uses eval to run the command and captures standard output (stdout) into the defined file. Standard error (stderr) messages are written to uac.log , unless redirected explicitly. Required fields: command output_directory Optional fields: compress_output_file condition exclude_nologin_users foreach output_file redirect_stderr_to_stdout Example: version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps auxwww output_directory: /live_response/process output_file: ps_auxwww.txt find-based collectors These collectors rely on the find tool to locate files and directories. UAC builds the appropriate find command dynamically at runtime based on the platform\u2019s supported options. If unsupported options are detected or find is not available, UAC can use find.pl as a fallback. Example: version: 1.0 artifacts: - description: Collect nginx logs. supported_os: [aix, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris] collector: file path: /var/log exclude_path_pattern: [\"/sys\", \"/proc\"] name_pattern: [\"*access_log*\", \"*access.log*\", \"*error_log*\", \"*error.log*\"] max_depth: 5 file_type: [f] max_file_size: 1073741824 # 1GB Resulting command with standard find : find /var/log -maxdepth 5 \\( -path \"/sys\" -o -path \"/proc\" \\) -prune -o -size -1073741824c \\( -name \"*access_log*\" -o -name \"*access.log*\" -o -name \"*error_log*\" -o -name \"*error.log*\" \\) -print Fallback using Perl implementation: find.pl /var/log -maxdepth 5 \\( -path \"/sys\" -o -path \"/proc\" \\) -prune -o -size -1073741824c \\( -name \"*access_log*\" -o -name \"*access.log*\" -o -name \"*error_log*\" -o -name \"*error.log*\" \\) -print find Search for files and directories and save their paths to a text file. Required fields: path output_directory output_file Optional fields: Refer to the field reference section for a full list (e.g., exclude_path_pattern , name_pattern , etc.) hash Generate hash values of matching files and save the results to a text file. The hash algorithm is defined in the UAC configuration file ( uac.conf ). Required fields: path output_directory output_file Optional fields: Refer to the field reference section for a full list (e.g., exclude_path_pattern , name_pattern , etc.) stat Collect file and directory metadata to generate a body file, compatible with The Sleuth Kit (TSK). If the native stat tool is unavailable, UAC will use a Perl fallback stat.pl . Required fields: path output_directory output_file Optional fields: Refer to the field reference section for a full list (e.g., exclude_path_pattern , name_pattern , etc.) file Copy raw files and directories to the output archive. Files are stored in the [root] directory inside the output file structure. Required fields: path Optional fields: Refer to the field reference section for a full list (e.g., exclude_path_pattern , name_pattern , etc.) Example output layout: [root] \u2514\u2500\u2500 var \u2514\u2500\u2500 log \u2514\u2500\u2500 access.log Field Reference and Examples Each field used in artifact rules is described below, along with relevant examples. command Required by: command Defines the shell command to execute on the target system. The command is run using eval , and its stdout is captured in the output file. stderr is logged to uac.log unless redirected. version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps -ef output_directory: /live_response/process output_file: ps_-ef.txt Multi-line commands should be enclosed in triple quotes: command: \"\"\" for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done \"\"\" Use with timeout: command: timeout.sh 2 ps -ef compress_output_file Optional for: command If true , compresses the output file using gzip . version: 1.0 output_directory: /live_response/process artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps -ef output_file: ps_-ef.txt compress_output_file: true condition Optional for: all collectors Shell condition that must return success (exit 0) for the artifact to run. version: 1.0 output_directory: /live_response/process artifacts: - description: Collect running processes executable path. supported_os: [freebsd] condition: ls /proc/$$ collector: command command: ls -l /proc/[0-9]*/file output_file: running_processes_full_paths.txt Negation with ! : condition: ! ls /proc/$$ Global condition example. In this case, the collection will only proceed if the global condition returns true. condition: ls /proc/$$ artifacts: - description: Hash running processes supported_os: [linux] ... Multi-line example: condition: \"\"\" if ls /proc/$$ && ps; then true else false fi \"\"\" description Required Short text describing what the artifact does. Should not contain line breaks. description: List current processes exclude_file_system Optional for: file, find, hash, stat Exclude file systems by type. UAC retrieves the list of existing mountpoints (paths) at runtime and excludes them from the collection. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all files excluding any files located in procfs, nfs and devfs file systems. supported_os: [all] collector: find path: / exclude_file_system: [procfs, nfs, devfs] output_file: exclude_procfs_nfs_devfs.txt Note that exclude_file_system will be ignored when path_pattern is used. exclude_name_pattern Optional Exclude files by name pattern. No slashes allowed in patterns. version: 1.0 output_directory: /live_response/system artifacts: - description: Search /etc excluding passwd and shadow* files. supported_os: [all] collector: find path: /etc exclude_name_pattern: [\"passwd\", \"shadow*\"] output_file: etc_excluding_passwd_shadow.txt exclude_nologin_users Optional When true , artifacts are only collected for users with a valid login shell. version: 1.0 artifacts: - description: Run 'ls -lRa' on all home directories for users that have a valid shell only. supported_os: [all] collector: command command: ls -lRa /%user_home%/ exclude_nologin_users: true output_directory: /live_response/%user% output_file: ls_-lRa_%user%.txt exclude_path_pattern Optional Exclude specific paths using shell-style patterns. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all excluding /etc and /var. supported_os: [all] collector: find path: / exclude_path_pattern: [\"/dev\", \"/var\"] output_file: all_excluding_etc_var.txt file_type Required when max_file_size or min_file_size is specified Match files by type. Value Description f Regular file d Directory l Symbolic link p Named pipe (FIFO) s Socket b Block special file c Character special version: 1.0 output_directory: /live_response/system artifacts: - description: Search files only. supported_os: [all] collector: find path: / file_type: [f] output_file: files_only.txt - description: Search directories only. supported_os: [all] collector: find path: / file_type: [f, d, l] output_file: directories_only.txt foreach Optional for: command Run a command for each result returned by another command. Use %line% to substitute the line output. The logic behind it is: for (each line returned by foreach); do command done version: 1.0 artifacts: - description: Fetch the logs of all containers. supported_os: [linux] collector: command foreach: docker container ps -all | sed 1d | awk '{print $1}' command: docker container logs %line% output_directory: /live_response/containers/%line% output_file: docker_container_logs_%line%.txt Multi-line: foreach: \"\"\" for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::' done \"\"\" ignore_date_range Optional Ignore --start-date and --end-date arguments if true . version: 1.0 output_directory: /live_response/system artifacts: - description: Search /etc regardless date range set by --start-date and --end-date. supported_os: [all] collector: find path: /etc ignore_date_range: true output_file: ignore_date_range.txt is_file_list Optional for: file, hash, stat Interpret path as a file that contains a list of file paths. artifacts: - description: Hash files based on a file list located in /%uac_directory%/my_file_list.txt. supported_os: [all] collector: hash path: /%uac_directory%/my_file_list.txt is_file_list: true output_file: hash_my_file_list.txt max_depth Optional Limit recursion depth in directories. version: 1.0 output_directory: /live_response/system artifacts: - description: Descend at most 5 levels of directories below /. supported_os: [all] collector: find path: / max_depth: 5 output_file: max_5_levels.txt max_file_size Optional Only include files within the specified size limits (in bytes). version: 1.0 output_directory: /live_response/system artifacts: - description: Search all files smaller than 1048576 bytes. supported_os: [all] collector: find path: / max_file_size: 1048576 output_file: smaller_than.txt min_file_size Optional Only include files within the specified size limits (in bytes). version: 1.0 output_directory: /live_response/system artifacts: - description: Search all files bigger than 1048576 bytes. supported_os: [all] collector: find path: / min_file_size: 1048576 output_file: bigger_than.txt modifier Optional (global) Mark artifact as a modifier (may alter system state). Must be enabled via --enable-modifiers . version: 1.0 modifier: true output_directory: /live_response/modifiers artifacts: - description: List all PIDs with a directory in /proc but hidden for ps command. supported_os: [linux] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: if ps ax | awk '{print $1}' | grep -q %line%; then true; else echo %line%; fi output_file: hidden_pids_for_ps_command.txt - description: Umount all bind mounted directories to /proc/PID. supported_os: [linux] collector: command foreach: mount | awk 'BEGIN { FS=\" on \"; } { print $2; }' | grep \"/proc/[0-9]\" | awk '{print $1}' command: umount \"%line%\" output_file: umount_%line%.txt name_pattern Optional Match files by name. Wildcards and regex supported. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all wtmp and utmp files. supported_os: [all] collector: find path: /var name_pattern: [\"wtmp\", \"btmp\"] output_file: wtmp_btmp.txt no_group Optional Match files with unknown GID. version: 1.0 output_directory: /live_response/system artifacts: - description: List files under /bin directory with an unknown group ID name. supported_os: [aix, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris] collector: find path: /bin file_type: [f] no_group: true output_file: group_name_unknown_files.txt no_user Optional Match files with unknown UID. version: 1.0 output_directory: /live_response/system artifacts: - description: List files under /bin directory with an unknown user ID name. supported_os: [aix, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris] collector: find path: /bin file_type: [f] no_user: true output_file: user_name_unknown_files.txt output_directory Required for: command, find, hash, stat Specifies the internal output path in the output file. version: 1.0 artifacts: - description: My first artifact. supported_os: [all] collector: command command: ls /tmp output_directory: /my_custom_artifacts output_file: ls_tmp.txt Output file contents: Can be defined globally: version: 1.0 output_directory: /my_custom_artifacts artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_directory: /live_response/process output_file: ps.txt - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps auxwww output_file: ps_auxwww.txt output_file Optional Defines the file name inside output_directory . UAC appends to this file. version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_directory: /live_response/process output_file: ps.txt If no output_file is specified, the output of the command will be stored in the output_directory . In the example below, avml.raw will be placed in the memory_dump directory. version: 1.0 output_directory: /memory_dump artifacts: - description: Capture a memory image. supported_os: [linux] collector: command command: avml avml.raw path Required for: find, file, hash, stat Specifies the starting point for searching or collecting files. The mount point set by --mount-point is automatically prepended to the path. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all cmdline files within /proc/*/ supported_os: [all] collector: find path: /proc/*/cmdline output_file: list_of_cmdline_files.txt Multiple paths example: version: 1.0 output_directory: /system artifacts: - description: List files under user's home directory (no recursion, top-level only) with an unknown user ID name. supported_os: [aix, freebsd, linux, netbsd, netscaler, openbsd] collector: find path: /home /export/home /Users /%user_home% max_depth: 1 file_type: [f] no_user: true output_file: user_name_unknown_files.txt Use quotation marks when specifying paths with spaces or special characters. version: 1.0 output_directory: /live_response/system artifacts: - description: Search for TCC.db file. supported_os: [all] collector: find path: /Library/\"Application Support\"/com.apple.TCC/TCC.db output_file: path_with_spaces.txt path_pattern Optional Match full paths with patterns. version: 1.0 output_directory: /live_response/system artifacts: - description: Find Discord cache files. supported_os: [all] collector: find path: /%user_home% path_pattern: [\"*/discord/Cache/*\"] output_file: discord_cache.txt permissions Optional Filter files by permission bits. Symbolic mode is not supported (e.g: -g=w). version: 1.0 output_directory: /live_response/system artifacts: - description: Search files that have permissions set to 755 or 644. supported_os: [all] collector: find path: / file_type: [f] permissions: [755, -4000] output_file: all_755_and_644_permissions.txt redirect_stderr_to_stdout Optional for: command Redirect stderr to the output file. version: 1.0 output_directory: /live_response/process artifacts: - description: Collect the list open files. supported_os: [all] collector: command command: lsof -nPl output_file: lsof_-nPl.txt redirect_stderr_to_stdout: true supported_os Required Specifies supported operating systems. Value Description all Applies to all systems aix IBM AIX esxi VMware ESXi freebsd FreeBSD linux Linux macos macOS netbsd NetBSD netscaler NetScaler openbsd OpenBSD solaris Solaris version: 1.0 artifacts: - description: Artifact description. supported_os: [all] collector: hash ... # additional options depending on the collector - description: Artifact description. supported_os: [aix, freebsd, solaris] collector: stat ... # additional options depending on the collector Additional Recommendations Enclose paths with spaces or special characters in quotes. Use triple-quoted strings ( \"\"\" ) for multi-line commands or conditions. Apply runtime variables like %user% , %line% , and %uac_directory% where applicable. Maintain consistent indentation and formatting in your YAML.","title":"Artifacts"},{"location":"artifacts/#artifacts-definition","text":"Artifacts define the parameters used by UAC collectors to gather data from the target system. UAC dynamically reads YAML artifact definition files and determines which of the five available collectors to use: command , file , find , hash , or stat . Based on the contents of each artifact, UAC collects the appropriate data and saves it to the specified output locations. Each artifact file must include a version field and a list of artifact rules. Every rule defines how data is collected, which platforms it supports, and what collector it uses. Here's an example containing two rules, each using a different collector: version: 1.0 artifacts: - description: Hash running processes. supported_os: [aix] collector: hash path: /proc/[0-9]*/object/a.out output_directory: /live_response/process output_file: hash_running_processes - description: Report a snapshot of the current processes. supported_os: [aix, freebsd, linux, macos, netbsd, openbsd, solaris] collector: command command: ps auxwww output_directory: /live_response/process output_file: ps_auxwww.txt It's a common practice to group artifacts by related topics within the same YAML file. This structure allows for more precise and efficient artifact collection tailored to your specific needs.","title":"Artifacts definition"},{"location":"artifacts/#yaml-file-structure-overview","text":"","title":"YAML File Structure Overview"},{"location":"artifacts/#version","text":"Required Indicates the version of the artifact file. Increment this value whenever you modify the file, such as by updating rules or adding new artifacts. version: 1.0","title":"version"},{"location":"artifacts/#artifacts","text":"Required A list of rules specifying what to collect. Each rule must contain: description supported_os collector Other fields depend on the selected collector. version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command ... # additional options depending on the collector - description: Hash files that contain at least +x flag set for owner. supported_os: [all] collector: hash ... # additional options depending on the collector - description: Collect /var/log logs. supported_os: [all] collector: file ... # additional options depending on the collector","title":"artifacts"},{"location":"artifacts/#collectors-overview","text":"Each collector serves a specific function and comes with its own set of required and optional fields. The following sections provide a complete explanation of each collector along with practical examples.","title":"Collectors Overview"},{"location":"artifacts/#command","text":"Use the command collector to execute system commands and save their output to a specified file. UAC uses eval to run the command and captures standard output (stdout) into the defined file. Standard error (stderr) messages are written to uac.log , unless redirected explicitly. Required fields: command output_directory Optional fields: compress_output_file condition exclude_nologin_users foreach output_file redirect_stderr_to_stdout Example: version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps auxwww output_directory: /live_response/process output_file: ps_auxwww.txt","title":"command"},{"location":"artifacts/#find-based-collectors","text":"These collectors rely on the find tool to locate files and directories. UAC builds the appropriate find command dynamically at runtime based on the platform\u2019s supported options. If unsupported options are detected or find is not available, UAC can use find.pl as a fallback. Example: version: 1.0 artifacts: - description: Collect nginx logs. supported_os: [aix, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris] collector: file path: /var/log exclude_path_pattern: [\"/sys\", \"/proc\"] name_pattern: [\"*access_log*\", \"*access.log*\", \"*error_log*\", \"*error.log*\"] max_depth: 5 file_type: [f] max_file_size: 1073741824 # 1GB Resulting command with standard find : find /var/log -maxdepth 5 \\( -path \"/sys\" -o -path \"/proc\" \\) -prune -o -size -1073741824c \\( -name \"*access_log*\" -o -name \"*access.log*\" -o -name \"*error_log*\" -o -name \"*error.log*\" \\) -print Fallback using Perl implementation: find.pl /var/log -maxdepth 5 \\( -path \"/sys\" -o -path \"/proc\" \\) -prune -o -size -1073741824c \\( -name \"*access_log*\" -o -name \"*access.log*\" -o -name \"*error_log*\" -o -name \"*error.log*\" \\) -print","title":"find-based collectors"},{"location":"artifacts/#find","text":"Search for files and directories and save their paths to a text file. Required fields: path output_directory output_file Optional fields: Refer to the field reference section for a full list (e.g., exclude_path_pattern , name_pattern , etc.)","title":"find"},{"location":"artifacts/#hash","text":"Generate hash values of matching files and save the results to a text file. The hash algorithm is defined in the UAC configuration file ( uac.conf ). Required fields: path output_directory output_file Optional fields: Refer to the field reference section for a full list (e.g., exclude_path_pattern , name_pattern , etc.)","title":"hash"},{"location":"artifacts/#stat","text":"Collect file and directory metadata to generate a body file, compatible with The Sleuth Kit (TSK). If the native stat tool is unavailable, UAC will use a Perl fallback stat.pl . Required fields: path output_directory output_file Optional fields: Refer to the field reference section for a full list (e.g., exclude_path_pattern , name_pattern , etc.)","title":"stat"},{"location":"artifacts/#file","text":"Copy raw files and directories to the output archive. Files are stored in the [root] directory inside the output file structure. Required fields: path Optional fields: Refer to the field reference section for a full list (e.g., exclude_path_pattern , name_pattern , etc.) Example output layout: [root] \u2514\u2500\u2500 var \u2514\u2500\u2500 log \u2514\u2500\u2500 access.log","title":"file"},{"location":"artifacts/#field-reference-and-examples","text":"Each field used in artifact rules is described below, along with relevant examples.","title":"Field Reference and Examples"},{"location":"artifacts/#command_1","text":"Required by: command Defines the shell command to execute on the target system. The command is run using eval , and its stdout is captured in the output file. stderr is logged to uac.log unless redirected. version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps -ef output_directory: /live_response/process output_file: ps_-ef.txt Multi-line commands should be enclosed in triple quotes: command: \"\"\" for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done \"\"\" Use with timeout: command: timeout.sh 2 ps -ef","title":"command"},{"location":"artifacts/#compress_output_file","text":"Optional for: command If true , compresses the output file using gzip . version: 1.0 output_directory: /live_response/process artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps -ef output_file: ps_-ef.txt compress_output_file: true","title":"compress_output_file"},{"location":"artifacts/#condition","text":"Optional for: all collectors Shell condition that must return success (exit 0) for the artifact to run. version: 1.0 output_directory: /live_response/process artifacts: - description: Collect running processes executable path. supported_os: [freebsd] condition: ls /proc/$$ collector: command command: ls -l /proc/[0-9]*/file output_file: running_processes_full_paths.txt Negation with ! : condition: ! ls /proc/$$ Global condition example. In this case, the collection will only proceed if the global condition returns true. condition: ls /proc/$$ artifacts: - description: Hash running processes supported_os: [linux] ... Multi-line example: condition: \"\"\" if ls /proc/$$ && ps; then true else false fi \"\"\"","title":"condition"},{"location":"artifacts/#description","text":"Required Short text describing what the artifact does. Should not contain line breaks. description: List current processes","title":"description"},{"location":"artifacts/#exclude_file_system","text":"Optional for: file, find, hash, stat Exclude file systems by type. UAC retrieves the list of existing mountpoints (paths) at runtime and excludes them from the collection. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all files excluding any files located in procfs, nfs and devfs file systems. supported_os: [all] collector: find path: / exclude_file_system: [procfs, nfs, devfs] output_file: exclude_procfs_nfs_devfs.txt Note that exclude_file_system will be ignored when path_pattern is used.","title":"exclude_file_system"},{"location":"artifacts/#exclude_name_pattern","text":"Optional Exclude files by name pattern. No slashes allowed in patterns. version: 1.0 output_directory: /live_response/system artifacts: - description: Search /etc excluding passwd and shadow* files. supported_os: [all] collector: find path: /etc exclude_name_pattern: [\"passwd\", \"shadow*\"] output_file: etc_excluding_passwd_shadow.txt","title":"exclude_name_pattern"},{"location":"artifacts/#exclude_nologin_users","text":"Optional When true , artifacts are only collected for users with a valid login shell. version: 1.0 artifacts: - description: Run 'ls -lRa' on all home directories for users that have a valid shell only. supported_os: [all] collector: command command: ls -lRa /%user_home%/ exclude_nologin_users: true output_directory: /live_response/%user% output_file: ls_-lRa_%user%.txt","title":"exclude_nologin_users"},{"location":"artifacts/#exclude_path_pattern","text":"Optional Exclude specific paths using shell-style patterns. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all excluding /etc and /var. supported_os: [all] collector: find path: / exclude_path_pattern: [\"/dev\", \"/var\"] output_file: all_excluding_etc_var.txt","title":"exclude_path_pattern"},{"location":"artifacts/#file_type","text":"Required when max_file_size or min_file_size is specified Match files by type. Value Description f Regular file d Directory l Symbolic link p Named pipe (FIFO) s Socket b Block special file c Character special version: 1.0 output_directory: /live_response/system artifacts: - description: Search files only. supported_os: [all] collector: find path: / file_type: [f] output_file: files_only.txt - description: Search directories only. supported_os: [all] collector: find path: / file_type: [f, d, l] output_file: directories_only.txt","title":"file_type"},{"location":"artifacts/#foreach","text":"Optional for: command Run a command for each result returned by another command. Use %line% to substitute the line output. The logic behind it is: for (each line returned by foreach); do command done version: 1.0 artifacts: - description: Fetch the logs of all containers. supported_os: [linux] collector: command foreach: docker container ps -all | sed 1d | awk '{print $1}' command: docker container logs %line% output_directory: /live_response/containers/%line% output_file: docker_container_logs_%line%.txt Multi-line: foreach: \"\"\" for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::' done \"\"\"","title":"foreach"},{"location":"artifacts/#ignore_date_range","text":"Optional Ignore --start-date and --end-date arguments if true . version: 1.0 output_directory: /live_response/system artifacts: - description: Search /etc regardless date range set by --start-date and --end-date. supported_os: [all] collector: find path: /etc ignore_date_range: true output_file: ignore_date_range.txt","title":"ignore_date_range"},{"location":"artifacts/#is_file_list","text":"Optional for: file, hash, stat Interpret path as a file that contains a list of file paths. artifacts: - description: Hash files based on a file list located in /%uac_directory%/my_file_list.txt. supported_os: [all] collector: hash path: /%uac_directory%/my_file_list.txt is_file_list: true output_file: hash_my_file_list.txt","title":"is_file_list"},{"location":"artifacts/#max_depth","text":"Optional Limit recursion depth in directories. version: 1.0 output_directory: /live_response/system artifacts: - description: Descend at most 5 levels of directories below /. supported_os: [all] collector: find path: / max_depth: 5 output_file: max_5_levels.txt","title":"max_depth"},{"location":"artifacts/#max_file_size","text":"Optional Only include files within the specified size limits (in bytes). version: 1.0 output_directory: /live_response/system artifacts: - description: Search all files smaller than 1048576 bytes. supported_os: [all] collector: find path: / max_file_size: 1048576 output_file: smaller_than.txt","title":"max_file_size"},{"location":"artifacts/#min_file_size","text":"Optional Only include files within the specified size limits (in bytes). version: 1.0 output_directory: /live_response/system artifacts: - description: Search all files bigger than 1048576 bytes. supported_os: [all] collector: find path: / min_file_size: 1048576 output_file: bigger_than.txt","title":"min_file_size"},{"location":"artifacts/#modifier","text":"Optional (global) Mark artifact as a modifier (may alter system state). Must be enabled via --enable-modifiers . version: 1.0 modifier: true output_directory: /live_response/modifiers artifacts: - description: List all PIDs with a directory in /proc but hidden for ps command. supported_os: [linux] collector: command foreach: for pid in /proc/[0-9]*; do echo ${pid} | sed -e 's:/proc/::'; done command: if ps ax | awk '{print $1}' | grep -q %line%; then true; else echo %line%; fi output_file: hidden_pids_for_ps_command.txt - description: Umount all bind mounted directories to /proc/PID. supported_os: [linux] collector: command foreach: mount | awk 'BEGIN { FS=\" on \"; } { print $2; }' | grep \"/proc/[0-9]\" | awk '{print $1}' command: umount \"%line%\" output_file: umount_%line%.txt","title":"modifier"},{"location":"artifacts/#name_pattern","text":"Optional Match files by name. Wildcards and regex supported. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all wtmp and utmp files. supported_os: [all] collector: find path: /var name_pattern: [\"wtmp\", \"btmp\"] output_file: wtmp_btmp.txt","title":"name_pattern"},{"location":"artifacts/#no_group","text":"Optional Match files with unknown GID. version: 1.0 output_directory: /live_response/system artifacts: - description: List files under /bin directory with an unknown group ID name. supported_os: [aix, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris] collector: find path: /bin file_type: [f] no_group: true output_file: group_name_unknown_files.txt","title":"no_group"},{"location":"artifacts/#no_user","text":"Optional Match files with unknown UID. version: 1.0 output_directory: /live_response/system artifacts: - description: List files under /bin directory with an unknown user ID name. supported_os: [aix, freebsd, linux, macos, netbsd, netscaler, openbsd, solaris] collector: find path: /bin file_type: [f] no_user: true output_file: user_name_unknown_files.txt","title":"no_user"},{"location":"artifacts/#output_directory","text":"Required for: command, find, hash, stat Specifies the internal output path in the output file. version: 1.0 artifacts: - description: My first artifact. supported_os: [all] collector: command command: ls /tmp output_directory: /my_custom_artifacts output_file: ls_tmp.txt Output file contents: Can be defined globally: version: 1.0 output_directory: /my_custom_artifacts artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_directory: /live_response/process output_file: ps.txt - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps auxwww output_file: ps_auxwww.txt","title":"output_directory"},{"location":"artifacts/#output_file","text":"Optional Defines the file name inside output_directory . UAC appends to this file. version: 1.0 artifacts: - description: Report a snapshot of the current processes. supported_os: [all] collector: command command: ps output_directory: /live_response/process output_file: ps.txt If no output_file is specified, the output of the command will be stored in the output_directory . In the example below, avml.raw will be placed in the memory_dump directory. version: 1.0 output_directory: /memory_dump artifacts: - description: Capture a memory image. supported_os: [linux] collector: command command: avml avml.raw","title":"output_file"},{"location":"artifacts/#path","text":"Required for: find, file, hash, stat Specifies the starting point for searching or collecting files. The mount point set by --mount-point is automatically prepended to the path. version: 1.0 output_directory: /live_response/system artifacts: - description: Search all cmdline files within /proc/*/ supported_os: [all] collector: find path: /proc/*/cmdline output_file: list_of_cmdline_files.txt Multiple paths example: version: 1.0 output_directory: /system artifacts: - description: List files under user's home directory (no recursion, top-level only) with an unknown user ID name. supported_os: [aix, freebsd, linux, netbsd, netscaler, openbsd] collector: find path: /home /export/home /Users /%user_home% max_depth: 1 file_type: [f] no_user: true output_file: user_name_unknown_files.txt Use quotation marks when specifying paths with spaces or special characters. version: 1.0 output_directory: /live_response/system artifacts: - description: Search for TCC.db file. supported_os: [all] collector: find path: /Library/\"Application Support\"/com.apple.TCC/TCC.db output_file: path_with_spaces.txt","title":"path"},{"location":"artifacts/#path_pattern","text":"Optional Match full paths with patterns. version: 1.0 output_directory: /live_response/system artifacts: - description: Find Discord cache files. supported_os: [all] collector: find path: /%user_home% path_pattern: [\"*/discord/Cache/*\"] output_file: discord_cache.txt","title":"path_pattern"},{"location":"artifacts/#permissions","text":"Optional Filter files by permission bits. Symbolic mode is not supported (e.g: -g=w). version: 1.0 output_directory: /live_response/system artifacts: - description: Search files that have permissions set to 755 or 644. supported_os: [all] collector: find path: / file_type: [f] permissions: [755, -4000] output_file: all_755_and_644_permissions.txt","title":"permissions"},{"location":"artifacts/#redirect_stderr_to_stdout","text":"Optional for: command Redirect stderr to the output file. version: 1.0 output_directory: /live_response/process artifacts: - description: Collect the list open files. supported_os: [all] collector: command command: lsof -nPl output_file: lsof_-nPl.txt redirect_stderr_to_stdout: true","title":"redirect_stderr_to_stdout"},{"location":"artifacts/#supported_os","text":"Required Specifies supported operating systems. Value Description all Applies to all systems aix IBM AIX esxi VMware ESXi freebsd FreeBSD linux Linux macos macOS netbsd NetBSD netscaler NetScaler openbsd OpenBSD solaris Solaris version: 1.0 artifacts: - description: Artifact description. supported_os: [all] collector: hash ... # additional options depending on the collector - description: Artifact description. supported_os: [aix, freebsd, solaris] collector: stat ... # additional options depending on the collector","title":"supported_os"},{"location":"artifacts/#additional-recommendations","text":"Enclose paths with spaces or special characters in quotes. Use triple-quoted strings ( \"\"\" ) for multi-line commands or conditions. Apply runtime variables like %user% , %line% , and %uac_directory% where applicable. Maintain consistent indentation and formatting in your YAML.","title":"Additional Recommendations"},{"location":"config_file/","text":"Config files UAC configuration files are located in the config directory. The default configuration file is uac.conf , which will be automatically loaded by UAC during execution. You can create files named after the operating system in the config directory to override the default configuration for a specific operating system. For example: aix.conf for AIX, linux.conf for Linux, macos.conf for macOS, etc. You can also load an external configuration file using the -c/--config option to override the default and the operating system specific configuration. exclude_path_pattern Exclude specific paths using shell-style patterns. exclude_path_pattern: [\"/etc\", \"/usr/*/local\", \"*/log\"] exclude_name_pattern Exclude files by name pattern. No slashes allowed in patterns. exclude_name_pattern: [\"*.txt\", \"*.gz.*\", \"*.[Ll][Oo][Gg]\"] exclude_file_system Exclude file systems by type. UAC retrieves the list of existing mountpoints (paths) at runtime and excludes them from the collection. exclude_file_system: [9p, afs, nfs, nfs4, rpc_pipefs, smbfs, sysfs] hash_algorithm Specifies the hash algorithms to be used by the hash collector. Accepted values: md5 , sha1 , and sha256 hash_algorithm: [md5, sha1] max_depth Limit recursion depth in directories. Accepted values: A positive integer or 0 to disable depth limiting. Performance consideration : Specifying a value here can improve performance by reducing the search scope. max_depth: 10 enable_find_mtime / enable_find_atime / enable_find_ctime Enable or disable filters based on file timestamps using find options: -mtime: last modified -atime: last accessed -ctime: last status change These options can be used to restrict collection to specific date ranges. Accepted values: true, false To collect only files whose data was last modified or whose status was last changed within the specified date range, set enable_find_mtime and enable_find_ctime to true , and enable_find_atime to false : enable_find_mtime: true enable_find_atime: false enable_find_ctime: true To collect only files whose status was last changed within the specified date range, set only enable_find_ctime to true : enable_find_mtime: false enable_find_atime: false enable_find_ctime: true","title":"Config Files"},{"location":"config_file/#config-files","text":"UAC configuration files are located in the config directory. The default configuration file is uac.conf , which will be automatically loaded by UAC during execution. You can create files named after the operating system in the config directory to override the default configuration for a specific operating system. For example: aix.conf for AIX, linux.conf for Linux, macos.conf for macOS, etc. You can also load an external configuration file using the -c/--config option to override the default and the operating system specific configuration.","title":"Config files"},{"location":"config_file/#exclude_path_pattern","text":"Exclude specific paths using shell-style patterns. exclude_path_pattern: [\"/etc\", \"/usr/*/local\", \"*/log\"]","title":"exclude_path_pattern"},{"location":"config_file/#exclude_name_pattern","text":"Exclude files by name pattern. No slashes allowed in patterns. exclude_name_pattern: [\"*.txt\", \"*.gz.*\", \"*.[Ll][Oo][Gg]\"]","title":"exclude_name_pattern"},{"location":"config_file/#exclude_file_system","text":"Exclude file systems by type. UAC retrieves the list of existing mountpoints (paths) at runtime and excludes them from the collection. exclude_file_system: [9p, afs, nfs, nfs4, rpc_pipefs, smbfs, sysfs]","title":"exclude_file_system"},{"location":"config_file/#hash_algorithm","text":"Specifies the hash algorithms to be used by the hash collector. Accepted values: md5 , sha1 , and sha256 hash_algorithm: [md5, sha1]","title":"hash_algorithm"},{"location":"config_file/#max_depth","text":"Limit recursion depth in directories. Accepted values: A positive integer or 0 to disable depth limiting. Performance consideration : Specifying a value here can improve performance by reducing the search scope. max_depth: 10","title":"max_depth"},{"location":"config_file/#enable_find_mtime-enable_find_atime-enable_find_ctime","text":"Enable or disable filters based on file timestamps using find options: -mtime: last modified -atime: last accessed -ctime: last status change These options can be used to restrict collection to specific date ranges. Accepted values: true, false To collect only files whose data was last modified or whose status was last changed within the specified date range, set enable_find_mtime and enable_find_ctime to true , and enable_find_atime to false : enable_find_mtime: true enable_find_atime: false enable_find_ctime: true To collect only files whose status was last changed within the specified date range, set only enable_find_ctime to true : enable_find_mtime: false enable_find_atime: false enable_find_ctime: true","title":"enable_find_mtime / enable_find_atime / enable_find_ctime"},{"location":"helper_functions/","text":"Helper functions Some helper functions are available for use during artifact collection. These functions can enhance your collection logic by introducing conditional behavior based on the target system's state. command_exists Checks whether a given command is available on the target system. Returns true if the command exists. Parameter: The command name must be provided as a string (enclosed in quotes). Returns: Boolean ( true if the command exists) Example: The following artifact will only collect block device information if the lsblk command is available: version: 1.0 condition: command_exists \"lsblk\" output_directory: /live_response/storage artifacts: - description: List block devices. supported_os: [linux] collector: command command: lsblk -l output_file: lsblk_-l.txt","title":"Helper Functions"},{"location":"helper_functions/#helper-functions","text":"Some helper functions are available for use during artifact collection. These functions can enhance your collection logic by introducing conditional behavior based on the target system's state.","title":"Helper functions"},{"location":"helper_functions/#command_exists","text":"Checks whether a given command is available on the target system. Returns true if the command exists. Parameter: The command name must be provided as a string (enclosed in quotes). Returns: Boolean ( true if the command exists) Example: The following artifact will only collect block device information if the lsblk command is available: version: 1.0 condition: command_exists \"lsblk\" output_directory: /live_response/storage artifacts: - description: List block devices. supported_os: [linux] collector: command command: lsblk -l output_file: lsblk_-l.txt","title":"command_exists"},{"location":"log_files/","text":"Log files uac.log The uac.log file contains timestamped messages that include a log level and a corresponding message. This is the primary log used to track the actions performed by UAC during its execution. The level of detail in this log is affected by the --debug option. When data collection is complete, this log is also included in the final output archive. Level Description DBG Debug messages INF Informational messages ERR Error messages CMD Executed commands and their stderr output At the beginning of the file, UAC logs important information such as the command-line options used, operating system, system architecture, mount point, loaded configuration (from uac.conf ), available tools, and other environment details. These entries are logged at the INF level. Example: 2024-05-23 18:07:12 -0300 INF Unix-like Artifacts Collector 2024-05-23 18:07:12 -0300 INF UAC directory: /tmp/uac 2024-05-23 18:07:12 -0300 INF Command line: ./uac -p ir_triage -u -v /tmp 2024-05-23 18:07:12 -0300 INF Operating system: linux 2024-05-23 18:07:12 -0300 INF System architecture: x86_64 2024-05-23 18:07:12 -0300 INF Hostname: uac-suse-tumbleweed 2024-05-23 18:07:12 -0300 INF Mount point: / 2024-05-23 18:07:12 -0300 INF Running as: uac 2024-05-23 18:07:12 -0300 INF Temp Directory: /tmp/uac/uac-data.tmp 2024-05-23 18:07:12 -0300 INF Output format: tar 2024-05-23 18:07:12 -0300 INF Current PID: 6377 2024-05-23 18:07:12 -0300 INF PATH: /tmp/uac/tools/date_to_epoch_pl:/tmp/uac/tools/find_pl:/tmp/uac/tools/stat_pl:/tmp/uac/tools/statx/linux/x86_64:/tmp/uac/tools/zip/esxi_linux/x86_64:/tmp/uac/bin/linux/x86_64:/tmp/uac/bin/linux:/tmp/uac/bin:/usr/xpg4/bin:/usr/xpg6/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/ucb:/usr/ccs/bin:/opt/bin:/opt/sbin:/opt/local/bin:/snap/bin:/netscaler:/opt/homebrew/bin:/usr/xpg4/bin:/usr/xpg6/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/ucb:/usr/ccs/bin:/opt/bin:/opt/sbin:/opt/local/bin:/snap/bin:/netscaler 2024-05-23 18:07:12 -0300 INF Loading uac.conf settings 2024-05-23 18:07:12 -0300 INF Exclude path pattern: 2024-05-23 18:07:12 -0300 INF Exclude name pattern: 2024-05-23 18:07:12 -0300 INF Exclude file system: 9p|afs|autofs|cifs|davfs|fuse|kernfs|nfs|nfs4|rpc_pipefs|smbfs|sysfs 2024-05-23 18:07:12 -0300 INF Hash algorithm: md5|sha1 2024-05-23 18:07:12 -0300 INF Max depth: 0 2024-05-23 18:07:12 -0300 INF Enable find mtime: true 2024-05-23 18:07:12 -0300 INF Enable find atime: false 2024-05-23 18:07:12 -0300 INF Enable find ctime: true 2024-05-23 18:07:12 -0300 INF Setting up tools and parameters 2024-05-23 18:07:12 -0300 INF find operators support: true 2024-05-23 18:07:12 -0300 INF find -path support: true 2024-05-23 18:07:12 -0300 INF find -size support: true 2024-05-23 18:07:12 -0300 INF find -maxdepth support: true 2024-05-23 18:07:12 -0300 INF find -perm support: true 2024-05-23 18:07:12 -0300 INF find -type support: true 2024-05-23 18:07:12 -0300 INF find -mtime support: true 2024-05-23 18:07:12 -0300 INF find -atime support: true 2024-05-23 18:07:12 -0300 INF find -ctime support: true 2024-05-23 18:07:12 -0300 INF find -print0 support: true Once the collection begins, UAC logs each executed command on the target system using the CMD level. 2024-05-23 18:07:12 -0300 INF Artifacts collection started 2024-05-23 18:07:12 -0300 INF Parsing live_response/process/ps.yaml 2024-05-23 18:07:12 -0300 CMD ps 2024-05-23 18:07:12 -0300 CMD ps auxwww 2024-05-23 18:07:12 -0300 CMD ps auxwwwf 2024-05-23 18:07:12 -0300 CMD ps -deaf 2024-05-23 18:07:12 -0300 CMD ps -ef 2024-05-23 18:07:12 -0300 CMD ps -efl 2024-05-23 18:07:12 -0300 CMD ps -eo pid,user,etime,args 2024-05-23 18:07:12 -0300 CMD ps -eo pid,user,lstart,args 2024-05-23 18:07:12 -0300 CMD ps -eo pid,user,cgroup If a command produces an error (stderr), it will be logged on the same line, following the 2> identifier. 2024-05-23 18:07:44 -0300 CMD uptime -s 2> uptime: invalid option -- 's'/nTry 'uptime --help' for more information. 2024-05-23 18:08:04 -0300 CMD fdisk -l 2> fdisk: cannot open /dev/vda: Permission denied Acquisition log After UAC completes execution, it generates a log file with detailed information about the acquisition process. This includes the case metadata and calculated cryptographic hashes (e.g., MD5 and SHA-1) for the output archive to verify data integrity. Example: Created by UAC (Unix-like Artifacts Collector) [Case Information] Case Number: 42 Evidence Number: 1 Description: Web server quick triage Examiner: Duncan Notes: [System Information] Operating System: linux System Architecture: x86_64 Hostname: webserver01 [Acquisition Information] Mount Point: / Acquisition Started: Mon May 26 20:29:36 2024 -0300 Acquisition Finished: Mon May 26 20:35:56 2024 -0300 [Output Information] File: uac-webserver01-linux-20240526202936.tar.gz Format: tar [Computed Hashes] md5 checksum: 5c5305c81a13efdbb394b588da84951d sha1 checksum: ab46c30b259bcbaa7ee9cdb64cae660d27ab98d2","title":"Log Files"},{"location":"log_files/#log-files","text":"","title":"Log files"},{"location":"log_files/#uaclog","text":"The uac.log file contains timestamped messages that include a log level and a corresponding message. This is the primary log used to track the actions performed by UAC during its execution. The level of detail in this log is affected by the --debug option. When data collection is complete, this log is also included in the final output archive. Level Description DBG Debug messages INF Informational messages ERR Error messages CMD Executed commands and their stderr output At the beginning of the file, UAC logs important information such as the command-line options used, operating system, system architecture, mount point, loaded configuration (from uac.conf ), available tools, and other environment details. These entries are logged at the INF level. Example: 2024-05-23 18:07:12 -0300 INF Unix-like Artifacts Collector 2024-05-23 18:07:12 -0300 INF UAC directory: /tmp/uac 2024-05-23 18:07:12 -0300 INF Command line: ./uac -p ir_triage -u -v /tmp 2024-05-23 18:07:12 -0300 INF Operating system: linux 2024-05-23 18:07:12 -0300 INF System architecture: x86_64 2024-05-23 18:07:12 -0300 INF Hostname: uac-suse-tumbleweed 2024-05-23 18:07:12 -0300 INF Mount point: / 2024-05-23 18:07:12 -0300 INF Running as: uac 2024-05-23 18:07:12 -0300 INF Temp Directory: /tmp/uac/uac-data.tmp 2024-05-23 18:07:12 -0300 INF Output format: tar 2024-05-23 18:07:12 -0300 INF Current PID: 6377 2024-05-23 18:07:12 -0300 INF PATH: /tmp/uac/tools/date_to_epoch_pl:/tmp/uac/tools/find_pl:/tmp/uac/tools/stat_pl:/tmp/uac/tools/statx/linux/x86_64:/tmp/uac/tools/zip/esxi_linux/x86_64:/tmp/uac/bin/linux/x86_64:/tmp/uac/bin/linux:/tmp/uac/bin:/usr/xpg4/bin:/usr/xpg6/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/ucb:/usr/ccs/bin:/opt/bin:/opt/sbin:/opt/local/bin:/snap/bin:/netscaler:/opt/homebrew/bin:/usr/xpg4/bin:/usr/xpg6/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/ucb:/usr/ccs/bin:/opt/bin:/opt/sbin:/opt/local/bin:/snap/bin:/netscaler 2024-05-23 18:07:12 -0300 INF Loading uac.conf settings 2024-05-23 18:07:12 -0300 INF Exclude path pattern: 2024-05-23 18:07:12 -0300 INF Exclude name pattern: 2024-05-23 18:07:12 -0300 INF Exclude file system: 9p|afs|autofs|cifs|davfs|fuse|kernfs|nfs|nfs4|rpc_pipefs|smbfs|sysfs 2024-05-23 18:07:12 -0300 INF Hash algorithm: md5|sha1 2024-05-23 18:07:12 -0300 INF Max depth: 0 2024-05-23 18:07:12 -0300 INF Enable find mtime: true 2024-05-23 18:07:12 -0300 INF Enable find atime: false 2024-05-23 18:07:12 -0300 INF Enable find ctime: true 2024-05-23 18:07:12 -0300 INF Setting up tools and parameters 2024-05-23 18:07:12 -0300 INF find operators support: true 2024-05-23 18:07:12 -0300 INF find -path support: true 2024-05-23 18:07:12 -0300 INF find -size support: true 2024-05-23 18:07:12 -0300 INF find -maxdepth support: true 2024-05-23 18:07:12 -0300 INF find -perm support: true 2024-05-23 18:07:12 -0300 INF find -type support: true 2024-05-23 18:07:12 -0300 INF find -mtime support: true 2024-05-23 18:07:12 -0300 INF find -atime support: true 2024-05-23 18:07:12 -0300 INF find -ctime support: true 2024-05-23 18:07:12 -0300 INF find -print0 support: true Once the collection begins, UAC logs each executed command on the target system using the CMD level. 2024-05-23 18:07:12 -0300 INF Artifacts collection started 2024-05-23 18:07:12 -0300 INF Parsing live_response/process/ps.yaml 2024-05-23 18:07:12 -0300 CMD ps 2024-05-23 18:07:12 -0300 CMD ps auxwww 2024-05-23 18:07:12 -0300 CMD ps auxwwwf 2024-05-23 18:07:12 -0300 CMD ps -deaf 2024-05-23 18:07:12 -0300 CMD ps -ef 2024-05-23 18:07:12 -0300 CMD ps -efl 2024-05-23 18:07:12 -0300 CMD ps -eo pid,user,etime,args 2024-05-23 18:07:12 -0300 CMD ps -eo pid,user,lstart,args 2024-05-23 18:07:12 -0300 CMD ps -eo pid,user,cgroup If a command produces an error (stderr), it will be logged on the same line, following the 2> identifier. 2024-05-23 18:07:44 -0300 CMD uptime -s 2> uptime: invalid option -- 's'/nTry 'uptime --help' for more information. 2024-05-23 18:08:04 -0300 CMD fdisk -l 2> fdisk: cannot open /dev/vda: Permission denied","title":"uac.log"},{"location":"log_files/#acquisition-log","text":"After UAC completes execution, it generates a log file with detailed information about the acquisition process. This includes the case metadata and calculated cryptographic hashes (e.g., MD5 and SHA-1) for the output archive to verify data integrity. Example: Created by UAC (Unix-like Artifacts Collector) [Case Information] Case Number: 42 Evidence Number: 1 Description: Web server quick triage Examiner: Duncan Notes: [System Information] Operating System: linux System Architecture: x86_64 Hostname: webserver01 [Acquisition Information] Mount Point: / Acquisition Started: Mon May 26 20:29:36 2024 -0300 Acquisition Finished: Mon May 26 20:35:56 2024 -0300 [Output Information] File: uac-webserver01-linux-20240526202936.tar.gz Format: tar [Computed Hashes] md5 checksum: 5c5305c81a13efdbb394b588da84951d sha1 checksum: ab46c30b259bcbaa7ee9cdb64cae660d27ab98d2","title":"Acquisition log"},{"location":"output_formats/","text":"Output formats UAC currently supports collecting and storing data in three formats: none , tar , and zip . The default output format is tar . You can specify the desired format using the --output-format command-line option. none Collected data will not be archived or compressed. Instead, it will be copied directly into the specified output directory. This format is useful when no archiving tools are available on the target system. ./uac -p ir_triage /tmp --output-format none tar Collected data will be archived and compressed into a .tar file. This is the default format used by UAC. Compression will be enabled if gzip is available in the target system. ./uac -p ir_triage /tmp zip Collected data will be archived and compressed into a .zip file. Optionally, UAC can encrypt the ZIP archive using a password provided via the --output-password option. ./uac -p ir_triage /tmp --output-format zip","title":"Output Formats"},{"location":"output_formats/#output-formats","text":"UAC currently supports collecting and storing data in three formats: none , tar , and zip . The default output format is tar . You can specify the desired format using the --output-format command-line option.","title":"Output formats"},{"location":"output_formats/#none","text":"Collected data will not be archived or compressed. Instead, it will be copied directly into the specified output directory. This format is useful when no archiving tools are available on the target system. ./uac -p ir_triage /tmp --output-format none","title":"none"},{"location":"output_formats/#tar","text":"Collected data will be archived and compressed into a .tar file. This is the default format used by UAC. Compression will be enabled if gzip is available in the target system. ./uac -p ir_triage /tmp","title":"tar"},{"location":"output_formats/#zip","text":"Collected data will be archived and compressed into a .zip file. Optionally, UAC can encrypt the ZIP archive using a password provided via the --output-password option. ./uac -p ir_triage /tmp --output-format zip","title":"zip"},{"location":"parsing_uac_output/","text":"Parsing UAC output Using Plaso Plaso is a Python-based backend engine that powers log2timeline - a tool designed to extract timestamps and forensic artifacts from a computer system to facilitate timeline analysis. It generates what is commonly referred to as a \"Super Timeline.\" If you haven\u2019t seen it already, there's a great YouTube video by Richard Davis of 13cubed that introduces the concept effectively. For more details about Plaso, refer to the official documentation page . Plaso in a Docker container Obtaining the Plaso Docker image docker pull log2timeline/plaso Parsing a UAC output file using Plaso To start the extraction with log2timeline , ensure the UAC output file is available on the host system. Since containers are isolated, you\u2019ll need to mount the host directory containing the file into the container. For example, if your UAC output file is stored at: /data/uac-testvm-linux-20220204120054.tar.gz ...and you want to generate the Plaso storage file as: /data/uac-testvm-linux-20220204120054.plaso You can run: docker run -v /data:/data log2timeline/plaso:latest log2timeline --storage-file /data/uac-testvm-linux-20220204120054.plaso /data/uac-testvm-linux-20220204120054.tar.gz This ensures that both the input and output files are accessible from the host filesystem. Run analysis with psort The .plaso file created by log2timeline is a structured event database. You can convert it to CSV format using psort , making it compatible with timeline analysis tools such as Eric Zimmerman's Timeline Explorer . Run: docker run -v /data:/data log2timeline/plaso:latest psort.py -o l2tcsv /data/uac-testvm-linux-20220204120054.plaso -w /data/uac-testvm-linux-20220204120054.csv Using Magnet AXIOM Magnet AXIOM can be used to parse forensic artifacts from UAC output files. Bodyfile custom artifact Before analyzing a UAC output file in AXIOM, it\u2019s strongly recommended that you download and install the Bodyfile custom artifact . This custom parser reads the bodyfile.txt generated by UAC and enhances timeline extraction. You can download it from my AXIOM Custom Artifacts repository . Parsing UAC output file in Magnet AXIOM Under EVIDENCE SOURCES , load the UAC output file ( .tar.gz or .zip ) as a Linux or macOS disk image. In ARTIFACT DETAILS , click CUSTOMIZE COMPUTER ARTIFACTS and ensure the Bodyfile custom artifact is selected under the CUSTOM ARTIFACTS category. In PARSE AND CARVE ARTIFACTS , select Parse and carve selected artifacts . Using Cyber Triage You can also analyze UAC output using Cyber Triage . For more details, refer to their blog post: Collecting Linux DFIR Artifacts with UAC","title":"Parsing UAC output"},{"location":"parsing_uac_output/#parsing-uac-output","text":"","title":"Parsing UAC output"},{"location":"parsing_uac_output/#using-plaso","text":"Plaso is a Python-based backend engine that powers log2timeline - a tool designed to extract timestamps and forensic artifacts from a computer system to facilitate timeline analysis. It generates what is commonly referred to as a \"Super Timeline.\" If you haven\u2019t seen it already, there's a great YouTube video by Richard Davis of 13cubed that introduces the concept effectively. For more details about Plaso, refer to the official documentation page .","title":"Using Plaso"},{"location":"parsing_uac_output/#plaso-in-a-docker-container","text":"","title":"Plaso in a Docker container"},{"location":"parsing_uac_output/#obtaining-the-plaso-docker-image","text":"docker pull log2timeline/plaso","title":"Obtaining the Plaso Docker image"},{"location":"parsing_uac_output/#parsing-a-uac-output-file-using-plaso","text":"To start the extraction with log2timeline , ensure the UAC output file is available on the host system. Since containers are isolated, you\u2019ll need to mount the host directory containing the file into the container. For example, if your UAC output file is stored at: /data/uac-testvm-linux-20220204120054.tar.gz ...and you want to generate the Plaso storage file as: /data/uac-testvm-linux-20220204120054.plaso You can run: docker run -v /data:/data log2timeline/plaso:latest log2timeline --storage-file /data/uac-testvm-linux-20220204120054.plaso /data/uac-testvm-linux-20220204120054.tar.gz This ensures that both the input and output files are accessible from the host filesystem.","title":"Parsing a UAC output file using Plaso"},{"location":"parsing_uac_output/#run-analysis-with-psort","text":"The .plaso file created by log2timeline is a structured event database. You can convert it to CSV format using psort , making it compatible with timeline analysis tools such as Eric Zimmerman's Timeline Explorer . Run: docker run -v /data:/data log2timeline/plaso:latest psort.py -o l2tcsv /data/uac-testvm-linux-20220204120054.plaso -w /data/uac-testvm-linux-20220204120054.csv","title":"Run analysis with psort"},{"location":"parsing_uac_output/#using-magnet-axiom","text":"Magnet AXIOM can be used to parse forensic artifacts from UAC output files.","title":"Using Magnet AXIOM"},{"location":"parsing_uac_output/#bodyfile-custom-artifact","text":"Before analyzing a UAC output file in AXIOM, it\u2019s strongly recommended that you download and install the Bodyfile custom artifact . This custom parser reads the bodyfile.txt generated by UAC and enhances timeline extraction. You can download it from my AXIOM Custom Artifacts repository .","title":"Bodyfile custom artifact"},{"location":"parsing_uac_output/#parsing-uac-output-file-in-magnet-axiom","text":"Under EVIDENCE SOURCES , load the UAC output file ( .tar.gz or .zip ) as a Linux or macOS disk image. In ARTIFACT DETAILS , click CUSTOMIZE COMPUTER ARTIFACTS and ensure the Bodyfile custom artifact is selected under the CUSTOM ARTIFACTS category. In PARSE AND CARVE ARTIFACTS , select Parse and carve selected artifacts .","title":"Parsing UAC output file in Magnet AXIOM"},{"location":"parsing_uac_output/#using-cyber-triage","text":"You can also analyze UAC output using Cyber Triage . For more details, refer to their blog post: Collecting Linux DFIR Artifacts with UAC","title":"Using Cyber Triage"},{"location":"profiles/","text":"Profile Definition Profiles define the list of artifacts to be collected during execution. Each profile file includes two mandatory fields at the top, followed by a set of artifacts that guide the collection process. Example: name: myprofile description: My profile. artifacts: - live_response/process/ps.yaml - live_response/process/lsof.yaml - bodyfile/bodyfile.yaml - hash_executables/hash_executables.yaml name Required The profile name. UAC uses this name to locate and apply the correct profile during script execution. description Required A brief summary describing the overall purpose of the profile. It should specify the type of collection being performed. Line breaks are not supported. artifacts Required The list of artifacts to be collected. All available artifacts are stored in the artifacts directory. Artifacts are collected in the order they are listed. The following example collects live_response/process/ps.yaml first, then live_response/process/lsof.yaml : name: myprofile description: My profile. artifacts: - live_response/process/ps.yaml - live_response/process/lsof.yaml Globbing and Wildcards Wildcards and glob-style patterns are supported. The next example collects all artifacts in the live_response/process directory and its subdirectories, in alphabetical order: name: myprofile description: My profile. artifacts: - live_response/process/* Excluding Artifacts Artifacts can be excluded using an exclamation mark ( ! ) prefix. The example below collects everything from files/ , except for files/logs/additional_logs.yaml and all items in files/applications/ : name: myprofile description: My profile. artifacts: - files/* - !files/logs/additional_logs.yaml - !files/applications/* Using External Artifacts Artifacts located outside the default artifacts directory can also be included by specifying their full path. Example: name: myprofile description: My profile. artifacts: - live_response/process/* - /my_artifacts_dir/my_artifact.yaml Ensure the full path is used when referencing external artifacts.","title":"Profiles"},{"location":"profiles/#profile-definition","text":"Profiles define the list of artifacts to be collected during execution. Each profile file includes two mandatory fields at the top, followed by a set of artifacts that guide the collection process. Example: name: myprofile description: My profile. artifacts: - live_response/process/ps.yaml - live_response/process/lsof.yaml - bodyfile/bodyfile.yaml - hash_executables/hash_executables.yaml","title":"Profile Definition"},{"location":"profiles/#name","text":"Required The profile name. UAC uses this name to locate and apply the correct profile during script execution.","title":"name"},{"location":"profiles/#description","text":"Required A brief summary describing the overall purpose of the profile. It should specify the type of collection being performed. Line breaks are not supported.","title":"description"},{"location":"profiles/#artifacts","text":"Required The list of artifacts to be collected. All available artifacts are stored in the artifacts directory. Artifacts are collected in the order they are listed. The following example collects live_response/process/ps.yaml first, then live_response/process/lsof.yaml : name: myprofile description: My profile. artifacts: - live_response/process/ps.yaml - live_response/process/lsof.yaml","title":"artifacts"},{"location":"profiles/#globbing-and-wildcards","text":"Wildcards and glob-style patterns are supported. The next example collects all artifacts in the live_response/process directory and its subdirectories, in alphabetical order: name: myprofile description: My profile. artifacts: - live_response/process/*","title":"Globbing and Wildcards"},{"location":"profiles/#excluding-artifacts","text":"Artifacts can be excluded using an exclamation mark ( ! ) prefix. The example below collects everything from files/ , except for files/logs/additional_logs.yaml and all items in files/applications/ : name: myprofile description: My profile. artifacts: - files/* - !files/logs/additional_logs.yaml - !files/applications/*","title":"Excluding Artifacts"},{"location":"profiles/#using-external-artifacts","text":"Artifacts located outside the default artifacts directory can also be included by specifying their full path. Example: name: myprofile description: My profile. artifacts: - live_response/process/* - /my_artifacts_dir/my_artifact.yaml Ensure the full path is used when referencing external artifacts.","title":"Using External Artifacts"},{"location":"runtime_variables/","text":"Runtime Variables UAC supports a set of special runtime variables that are dynamically replaced during execution. Command Line Variables The following variables can be used in conjunction with these command-line options: --output-base-name --aws-s3-presigned-url --aws-s3-presigned-url-log-file --azure-storage-sas-url --azure-storage-sas-url-log-file Variable Description %hostname% The hostname of the target system. %os% The operating system of the target system. %timestamp% The Unix timestamp indicating when the data collection started. Examples: Use variables to create custom output file names: ./uac -a files/browsers/\\* --output-base-name \"uac-%hostname%-%os%-browsers-only-%timestamp%\" /tmp Use variables to upload custom file names during presigned URL transfers: ./uac -a files/browsers/\\* --output-base-name \"uac-%hostname%-%os%-browsers-only-%timestamp%\" --azure-storage-sas-url 'https://uac-test.blob.core.windows.net/uac-container/uac-%hostname%-%os%-browsers-only-%timestamp%.tar.gz?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' /tmp General Variables These variables can be used within artifact definitions to make your collection scripts more flexible and adaptable. Variable Description %uac_directory% Full path to the directory where UAC was executed. %mount_point% Full path to the target mount point. %temp_directory% Full path to the temporary directory used by UAC to store transient data. Files in this directory are not included in the final output archive. %non_local_mount_points% Pipe-separated list of non-local mount points, based on the exclude_file_system setting in the uac.conf file. %start_date% Date provided via the --start-date command-line option. %start_date_epoch% The Unix timestamp corresponding to the --start-date value. %end_date% Date provided via the --end-date command-line option. %end_date_epoch% The Unix timestamp corresponding to the --end-date value. Examples: Use %uac_directory% to reference internal files. This example hashes files listed in a custom file located in the UAC directory: version: 1.0 artifacts: - description: Hash all files based on a file list located in the UAC directory. supported_os: [all] collector: hash path: /%uac_directory%/my_file_list.txt is_file_list: true output_directory: /live_response/system output_file: my_hash_list.txt Use %mount_point% to access files on the target system. This example lists all files in the /Applications directory of the target macOS system: version: 1.0 output_directory: /live_response/packages artifacts: - description: Display all applications located in the /Applications directory. supported_os: [macos] collector: command command: ls -l -a /%mount_point%/Applications output_file: ls_-l_-a_Applications.txt Use %temp_directory% for temporary data. Files stored in the %temp_directory% are excluded from the final output archive. This is useful for temporary or intermediate data: version: 1.0 artifacts: - description: Collect executable paths of running processes. supported_os: [esxi] collector: command command: ps -c | awk '{print $4}' | sort -u | grep \"^/\" output_directory: /%temp_directory%/process output_file: hash_running_processes_full_paths.txt - description: Hash running process executables. supported_os: [esxi, freebsd, macos, openbsd] collector: hash path: /%temp_directory%/process/hash_running_processes_full_paths.txt is_file_list: true output_directory: /live_response/hash_executables output_file: hash_running_processes User-Based Variables These variables trigger a loop in which UAC runs the command once for each user detected on the system. Variable Description %user% Username of the current user in the loop. %user_home% Full path to the current user's home directory. Example: Use %user_home% to collect files for each user. This example collects shell history and related files from each user's home directory: version: 1.0 artifacts: - description: Collect shell history files. supported_os: [all] collector: file path: /%user_home%/ name_pattern: [\".*_history\", \".*history\", \".lesshst\", \".zhistory\"]","title":"Runtime Variables"},{"location":"runtime_variables/#runtime-variables","text":"UAC supports a set of special runtime variables that are dynamically replaced during execution.","title":"Runtime Variables"},{"location":"runtime_variables/#command-line-variables","text":"The following variables can be used in conjunction with these command-line options: --output-base-name --aws-s3-presigned-url --aws-s3-presigned-url-log-file --azure-storage-sas-url --azure-storage-sas-url-log-file Variable Description %hostname% The hostname of the target system. %os% The operating system of the target system. %timestamp% The Unix timestamp indicating when the data collection started. Examples: Use variables to create custom output file names: ./uac -a files/browsers/\\* --output-base-name \"uac-%hostname%-%os%-browsers-only-%timestamp%\" /tmp Use variables to upload custom file names during presigned URL transfers: ./uac -a files/browsers/\\* --output-base-name \"uac-%hostname%-%os%-browsers-only-%timestamp%\" --azure-storage-sas-url 'https://uac-test.blob.core.windows.net/uac-container/uac-%hostname%-%os%-browsers-only-%timestamp%.tar.gz?sp=racwdl&st=2022-09-20T11:20:49Z&se=2022-09-21T19:20:49Z&spr=https&sv=2021-06-08&sr=c&sig=LmNQLedzYBXKSlGGGA0D6x1qSCek1OHELZDiD13BxKk%3D' /tmp","title":"Command Line Variables"},{"location":"runtime_variables/#general-variables","text":"These variables can be used within artifact definitions to make your collection scripts more flexible and adaptable. Variable Description %uac_directory% Full path to the directory where UAC was executed. %mount_point% Full path to the target mount point. %temp_directory% Full path to the temporary directory used by UAC to store transient data. Files in this directory are not included in the final output archive. %non_local_mount_points% Pipe-separated list of non-local mount points, based on the exclude_file_system setting in the uac.conf file. %start_date% Date provided via the --start-date command-line option. %start_date_epoch% The Unix timestamp corresponding to the --start-date value. %end_date% Date provided via the --end-date command-line option. %end_date_epoch% The Unix timestamp corresponding to the --end-date value. Examples: Use %uac_directory% to reference internal files. This example hashes files listed in a custom file located in the UAC directory: version: 1.0 artifacts: - description: Hash all files based on a file list located in the UAC directory. supported_os: [all] collector: hash path: /%uac_directory%/my_file_list.txt is_file_list: true output_directory: /live_response/system output_file: my_hash_list.txt Use %mount_point% to access files on the target system. This example lists all files in the /Applications directory of the target macOS system: version: 1.0 output_directory: /live_response/packages artifacts: - description: Display all applications located in the /Applications directory. supported_os: [macos] collector: command command: ls -l -a /%mount_point%/Applications output_file: ls_-l_-a_Applications.txt Use %temp_directory% for temporary data. Files stored in the %temp_directory% are excluded from the final output archive. This is useful for temporary or intermediate data: version: 1.0 artifacts: - description: Collect executable paths of running processes. supported_os: [esxi] collector: command command: ps -c | awk '{print $4}' | sort -u | grep \"^/\" output_directory: /%temp_directory%/process output_file: hash_running_processes_full_paths.txt - description: Hash running process executables. supported_os: [esxi, freebsd, macos, openbsd] collector: hash path: /%temp_directory%/process/hash_running_processes_full_paths.txt is_file_list: true output_directory: /live_response/hash_executables output_file: hash_running_processes","title":"General Variables"},{"location":"runtime_variables/#user-based-variables","text":"These variables trigger a loop in which UAC runs the command once for each user detected on the system. Variable Description %user% Username of the current user in the loop. %user_home% Full path to the current user's home directory. Example: Use %user_home% to collect files for each user. This example collects shell history and related files from each user's home directory: version: 1.0 artifacts: - description: Collect shell history files. supported_os: [all] collector: file path: /%user_home%/ name_pattern: [\".*_history\", \".*history\", \".lesshst\", \".zhistory\"]","title":"User-Based Variables"},{"location":"testing_lab/","text":"Testing lab UAC is a forensic tool designed to automate the collection of key system artifacts across a wide range of Unix-like operating systems. It is built with portability and broad compatibility in mind, making it suitable for use in environments ranging from modern enterprise systems to legacy infrastructure. To ensure reliability, UAC is extensively tested in our lab across: Diverse Unix-like operating systems. A wide range of system versions, from legacy releases to the latest stable builds. Various hardware architectures, such as i386, x86_64, ARM, MIPS, PowerPC, and others. This comprehensive testing approach ensures that UAC functions consistently across different environments, including outdated or niche systems often encountered in forensic investigations and enterprise environments. The table below lists all OSes, versions, and architectures currently used in our testing pipeline. \u26a0\ufe0f Important Note : The operating systems and versions listed on this page represent those actively used in our testing lab. However, UAC is not limited to these platforms. The tool is designed to run on a wide array of Unix-like systems, even if a particular version or architecture is not explicitly listed. The testing matrix is provided for transparency and quality assurance purposes only. aix Operating System Architecture Comments AIX 7.3 powerpc esxi Operating System Architecture Comments ESXi 6.7 x86_64 ESXi 8.0 x86_64 freebsd Operating System Architecture Comments FreeBSD 7.4 i386 FreeBSD 14.1 amd64 pfsense 2.6 amd64 linux Operating System Architecture Comments AlmaLinux 9 x86_64 Alpine Linux 3.21 x86_64 Amazon Linux x86_64 Armbian Linux aarch64 Running on a Orange Pi 3 LTS CentOS 3 i386 CentOS 5 i386 Clear Linux x86_64 Debian 12 aarch64 Debian 12 x86_64 Running containers (Docker) Debian 6 i686 Fedora 39 x86_64 Running Gnome Shell Gentoo x86_64 Kali Linux x86_64 Kubuntu 24.04 x86_64 Running KDE Plasma Linux 2.6.15-sigma mips Very limited Linux running on a set-up box using Busybox v1.00 Manjaro x86_64 OpenWRT 23 i686 Oracle Linux 9 x86_64 Proxmox 7 x86_64 Running VMs Proxmox 8 x86_64 Running containers (LXC) QNAP QTS 5 x86_64 Red Hat 6 x86_64 Red Hat 9 x86_64 Running containers (Podman) Slackware 15 x86_64 Suse Tumbleweed x86_64 Synology DSM 7 x86_64 Ubuntu Server 20.04 x86_64 Using BusyBox v1.30.1 macos Operating System Architecture Comments High Sierra x86_64 Sonoma arm64 Apple Silicon Ventura x86_64 netbsd Operating System Architecture Comments NetBSD 6 i386 NetBSD 9.3 amd64 NetBSD 10.0 amd64 netscaler Operating System Architecture Comments NetScaler 10.5 amd64 NetScaler 13.0 amd64 openbsd Operating System Architecture Comments OpenBSD 7.3 amd64 solaris Operating System Architecture Comments Solaris 10 i386 Solaris 11 i386","title":"Testing Lab"},{"location":"testing_lab/#testing-lab","text":"UAC is a forensic tool designed to automate the collection of key system artifacts across a wide range of Unix-like operating systems. It is built with portability and broad compatibility in mind, making it suitable for use in environments ranging from modern enterprise systems to legacy infrastructure. To ensure reliability, UAC is extensively tested in our lab across: Diverse Unix-like operating systems. A wide range of system versions, from legacy releases to the latest stable builds. Various hardware architectures, such as i386, x86_64, ARM, MIPS, PowerPC, and others. This comprehensive testing approach ensures that UAC functions consistently across different environments, including outdated or niche systems often encountered in forensic investigations and enterprise environments. The table below lists all OSes, versions, and architectures currently used in our testing pipeline. \u26a0\ufe0f Important Note : The operating systems and versions listed on this page represent those actively used in our testing lab. However, UAC is not limited to these platforms. The tool is designed to run on a wide array of Unix-like systems, even if a particular version or architecture is not explicitly listed. The testing matrix is provided for transparency and quality assurance purposes only.","title":"Testing lab"},{"location":"testing_lab/#aix","text":"Operating System Architecture Comments AIX 7.3 powerpc","title":"aix"},{"location":"testing_lab/#esxi","text":"Operating System Architecture Comments ESXi 6.7 x86_64 ESXi 8.0 x86_64","title":"esxi"},{"location":"testing_lab/#freebsd","text":"Operating System Architecture Comments FreeBSD 7.4 i386 FreeBSD 14.1 amd64 pfsense 2.6 amd64","title":"freebsd"},{"location":"testing_lab/#linux","text":"Operating System Architecture Comments AlmaLinux 9 x86_64 Alpine Linux 3.21 x86_64 Amazon Linux x86_64 Armbian Linux aarch64 Running on a Orange Pi 3 LTS CentOS 3 i386 CentOS 5 i386 Clear Linux x86_64 Debian 12 aarch64 Debian 12 x86_64 Running containers (Docker) Debian 6 i686 Fedora 39 x86_64 Running Gnome Shell Gentoo x86_64 Kali Linux x86_64 Kubuntu 24.04 x86_64 Running KDE Plasma Linux 2.6.15-sigma mips Very limited Linux running on a set-up box using Busybox v1.00 Manjaro x86_64 OpenWRT 23 i686 Oracle Linux 9 x86_64 Proxmox 7 x86_64 Running VMs Proxmox 8 x86_64 Running containers (LXC) QNAP QTS 5 x86_64 Red Hat 6 x86_64 Red Hat 9 x86_64 Running containers (Podman) Slackware 15 x86_64 Suse Tumbleweed x86_64 Synology DSM 7 x86_64 Ubuntu Server 20.04 x86_64 Using BusyBox v1.30.1","title":"linux"},{"location":"testing_lab/#macos","text":"Operating System Architecture Comments High Sierra x86_64 Sonoma arm64 Apple Silicon Ventura x86_64","title":"macos"},{"location":"testing_lab/#netbsd","text":"Operating System Architecture Comments NetBSD 6 i386 NetBSD 9.3 amd64 NetBSD 10.0 amd64","title":"netbsd"},{"location":"testing_lab/#netscaler","text":"Operating System Architecture Comments NetScaler 10.5 amd64 NetScaler 13.0 amd64","title":"netscaler"},{"location":"testing_lab/#openbsd","text":"Operating System Architecture Comments OpenBSD 7.3 amd64","title":"openbsd"},{"location":"testing_lab/#solaris","text":"Operating System Architecture Comments Solaris 10 i386 Solaris 11 i386","title":"solaris"},{"location":"using_uac_with_cs_falcon_rtr/","text":"Using UAC with CrowdStrike Falcon Real Time Response CrowdStrike Falcon Real Time Response (RTR) enables analysts to remotely access and interact with endpoints in real time. This allows for immediate visibility into a system and the ability to collect valuable forensic data by deploying files and executing custom scripts. In the instructions below, the UAC package (e.g., uac-3.0.0.tar.gz ) is assumed to be stored in the CrowdStrike cloud. This allows deployment even if the endpoint is isolated using the Network Containment feature. 1. Create a temporary working directory Create a temporary directory on the live endpoint and navigate into it: /> mkdir /tmp/uac /> cd /tmp/uac 2. Deploy and extract the UAC package Deploy the UAC archive and extract its contents: /tmp/uac> put \"uac-3.0.0.tar.gz\" /tmp/uac> runscript -Raw=```tar -zxf uac-3.0.0.tar.gz``` -Timeout=60 3. Run the collection Change to the UAC directory and start the data collection. Note that Falcon RTR sessions timeout after 10 minutes, so you may need to interact with the session to keep it alive. /tmp/uac> cd uac-3.0.0 /tmp/uac/uac-3.0.0> runscript -Raw=```./uac -p ir_triage /tmp/uac``` -Timeout=9999 4. Upload output and log files Use the get command to upload the resulting archive and log files to the CrowdStrike cloud: /tmp/uac/uac-3.0.0> get \"/tmp/uac/uac-hostname-os-20240707120101.tar.gz\" /tmp/uac/uac-3.0.0> get \"/tmp/uac/uac-hostname-os-20240707120101.log\" Note: The maximum file size supported by get is 4 GB. If necessary, use the split command to divide larger files. Running UAC in the background To run UAC in the background and prevent it from being interrupted by session timeouts, use the following command. This command launches UAC using bash -c and appends its output to a log file: /tmp/uac/uac-3.0.0> runscript -Raw=```bash -c \"./uac -p ir_triage -v /tmp/uac &\" >>/tmp/uac/uac.run.log``` -Timeout=9999 You can monitor the progress using: /tmp/uac/uac-3.0.0> cat /tmp/uac/uac.run.log","title":"Using UAC with CrowdStrike Falcon Real Time Response"},{"location":"using_uac_with_cs_falcon_rtr/#using-uac-with-crowdstrike-falcon-real-time-response","text":"CrowdStrike Falcon Real Time Response (RTR) enables analysts to remotely access and interact with endpoints in real time. This allows for immediate visibility into a system and the ability to collect valuable forensic data by deploying files and executing custom scripts. In the instructions below, the UAC package (e.g., uac-3.0.0.tar.gz ) is assumed to be stored in the CrowdStrike cloud. This allows deployment even if the endpoint is isolated using the Network Containment feature. 1. Create a temporary working directory Create a temporary directory on the live endpoint and navigate into it: /> mkdir /tmp/uac /> cd /tmp/uac 2. Deploy and extract the UAC package Deploy the UAC archive and extract its contents: /tmp/uac> put \"uac-3.0.0.tar.gz\" /tmp/uac> runscript -Raw=```tar -zxf uac-3.0.0.tar.gz``` -Timeout=60 3. Run the collection Change to the UAC directory and start the data collection. Note that Falcon RTR sessions timeout after 10 minutes, so you may need to interact with the session to keep it alive. /tmp/uac> cd uac-3.0.0 /tmp/uac/uac-3.0.0> runscript -Raw=```./uac -p ir_triage /tmp/uac``` -Timeout=9999 4. Upload output and log files Use the get command to upload the resulting archive and log files to the CrowdStrike cloud: /tmp/uac/uac-3.0.0> get \"/tmp/uac/uac-hostname-os-20240707120101.tar.gz\" /tmp/uac/uac-3.0.0> get \"/tmp/uac/uac-hostname-os-20240707120101.log\" Note: The maximum file size supported by get is 4 GB. If necessary, use the split command to divide larger files.","title":"Using UAC with CrowdStrike Falcon Real Time Response"},{"location":"using_uac_with_cs_falcon_rtr/#running-uac-in-the-background","text":"To run UAC in the background and prevent it from being interrupted by session timeouts, use the following command. This command launches UAC using bash -c and appends its output to a log file: /tmp/uac/uac-3.0.0> runscript -Raw=```bash -c \"./uac -p ir_triage -v /tmp/uac &\" >>/tmp/uac/uac.run.log``` -Timeout=9999 You can monitor the progress using: /tmp/uac/uac-3.0.0> cat /tmp/uac/uac.run.log","title":"Running UAC in the background"}]}