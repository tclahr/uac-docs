from axiom import *

import csv
import datetime
import sys
import codecs
import time
import io
import re

__version__ = "1.0"
__description__ = "Parses the body file generated by fls (Sleuthkit) and UAC (Unix-like Artifacts Collector) tools."
__author__ = "Thiago Canozzo Lahr"

class BodyfileArtifact(Artifact):
    def __init__(self):
        self.AddHunter(BodyfileHunter())

    def GetName(self):
        return "Bodyfile"

    def CreateFragments(self):
        self.AddFragment("Filename", Category.None, FragmentType.String)
        self.AddFragment("Logical Size", Category.None, FragmentType.String)
        self.AddFragment("Created", Category.DateTime, FragmentType.DateTime)
        self.AddFragment("Accessed", Category.DateTime, FragmentType.DateTime)
        self.AddFragment("Modified", Category.DateTime, FragmentType.DateTime)
        self.AddFragment("Changed", Category.DateTime, FragmentType.DateTime)
        self.AddFragment("Inode", Category.None, FragmentType.Integer)
        self.AddFragment("File Attributes", Category.None, FragmentType.String)
        self.AddFragment("Permissions", Category.None, FragmentType.String)
        self.AddFragment("UID", Category.None, FragmentType.Integer)
        self.AddFragment("GUID", Category.None, FragmentType.Integer)

class BodyfileHunter(Hunter):
    def __init__(self):
        self.Platform = Platform.Computer

    def Register(self, registrar):
        registrar.RegisterFileRegex(".*bodyfile.*")
        
    def Hunt(self, context):
        temp_file_path = context.Searchable.SaveAsTempFile()

        skip_bom = False

        with io.open(temp_file_path, mode="rb") as csv_file:
            bom = csv_file.read(3)

            if bom == codecs.BOM_UTF8:
                skip_bom = True

        with codecs.open(temp_file_path,"rb","utf-8") as csv_file:
            if skip_bom:
                csv_file.seek(len(codecs.BOM_UTF8))

            csv_reader = csv.reader(csv_file, delimiter="|")

            for row in csv_reader:
                # bodyfile header
                # MD5|name|inode|mode_as_string|UID|GID|size|atime|mtime|ctime|crtime
                if csv_reader.line_num == 1:
                    # check if MD5 column has 0 or a valid MD5 hash value
                    # check if inode, UID, GUID, size, atime, mtime and ctime columns have a valid numeric value
                    if (row[0] == "0" or re.findall(r"([a-fA-F0-9]{32})", row[0])) and re.findall(r"[0-9]+", row[2]) and re.findall(r"[0-9]+", row[4]) and re.findall(r"[0-9]+", row[5]) and re.findall(r"[0-9]+", row[6]) and re.findall(r"[0-9]+", row[7]) and re.findall(r"[0-9]+", row[8]) and re.findall(r"[0-9]+", row[9]):
                        continue
                    else:
                        break

                foundHit = Hit()
                foundHit.SetLocation("Line Number: " + str(csv_reader.line_num))
                
                try:
                    foundHit.AddValue("Filename", row[1])
                except:
                    foundHit.AddValue("Filename", "Error: {}. {}, script line: {}".format(sys.exc_info()[0],sys.exc_info()[1],sys.exc_info()[2].tb_lineno))
                try:
                    foundHit.AddValue("Inode", int(row[2]))
                except:
                    foundHit.AddValue("Inode", 0)
                try:
                    foundHit.AddValue("Permissions", row[3])
                except:
                    foundHit.AddValue("Permissions", "Error: {}. {}, script line: {}".format(sys.exc_info()[0],sys.exc_info()[1],sys.exc_info()[2].tb_lineno))
                try:
                    foundHit.AddValue("UID", int(row[4]))
                except:
                    foundHit.AddValue("UID", 0)
                try:
                    foundHit.AddValue("GUID", int(row[5]))
                except:
                    foundHit.AddValue("GUID", 0)
                try:
                    foundHit.AddValue("Logical Size", "{} bytes".format(row[6]))
                except:
                    foundHit.AddValue("Logical Size", "Error: {}. {}, script line: {}".format(sys.exc_info()[0],sys.exc_info()[1],sys.exc_info()[2].tb_lineno))
                try:
                    foundHit.AddValue("Accessed", datetime.datetime.fromtimestamp(int(row[7])))
                except:
                    foundHit.AddValue("Accessed", datetime.datetime.fromtimestamp(0))
                try:
                    foundHit.AddValue("Modified", datetime.datetime.fromtimestamp(int(row[8])))
                except:
                    foundHit.AddValue("Modified", datetime.datetime.fromtimestamp(0))
                try:
                    foundHit.AddValue("Changed", datetime.datetime.fromtimestamp(int(row[9])))
                except:
                    foundHit.AddValue("Changed", datetime.datetime.fromtimestamp(0))
                try:
                    foundHit.AddValue("Created", datetime.datetime.fromtimestamp(int(row[10])))
                except:
                    foundHit.AddValue("Created", datetime.datetime.fromtimestamp(0))
                
                try:
                    if row[3][0] == "d":
                        file_attributes = "Directory"
                    elif row[3][0] == "l":
                        file_attributes = "Symbolic Link"
                    elif row[3][0] == "p":
                        file_attributes = "Named Pipe (FIFO)"
                    elif row[3][0] == "s":
                        file_attributes = "Socket"
                    elif row[3][0] == "b":
                        file_attributes = "Block Special"
                    elif row[3][0] == "b":
                        file_attributes = "Character Special"
                    else:
                        file_attributes = "Regular File"
                except:
                    foundHit.AddValue("File Attributes", "Error: {}. {}, script line: {}".format(sys.exc_info()[0],sys.exc_info()[1],sys.exc_info()[2].tb_lineno))
                finally:
                    foundHit.AddValue("File Attributes", file_attributes)
                
                self.PublishHit(foundHit)

RegisterArtifact(BodyfileArtifact())

###############################################################################
#             Magnet Forensics Artifact Exchange Signature Block              #
#                                                                             #
# 1:AJ3q2BNcMVLP:AQACAAIA:Q9wE0VHaKvtLs3IPWCg/Si9Dp9d5sEoUXG3m91jNDBV377b6BMs #
# T/8ovSxUaIseEcbK/apV5o4yifX469DJO8vZeBJAjXHP0pFCrREWjaEiB0ndkQBzkErvukojorb #
# d9xd6O21PIxXzWhMzWfNhH9JiyvXk6fcbIndzYJRVeHoIS+S3RAJPjrsSawUzPJ38nv2BAsk4Wz #
# bUgncCb5faNHAGeRxhIw4wgnQwxIzs/zB1v0hj/RVPxnCEWlOYQhMZTztYDFS+f362J6Wuey0CY #
#    8P2VKEEdGI8FYsXds/FwW713clKdUDbtCIyaOtHpq1BeWSsFwiOxTDTSI5R4zKPQZQ==     #
###############################################################################